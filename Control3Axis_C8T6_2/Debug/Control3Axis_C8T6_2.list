
Control3Axis_C8T6_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a5c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08004b68  08004b68  00014b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c6c  08004c6c  00020154  2**0
                  CONTENTS
  4 .ARM          00000000  08004c6c  08004c6c  00020154  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c6c  08004c6c  00020154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c6c  08004c6c  00014c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c70  08004c70  00014c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000154  20000000  08004c74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  20000154  08004dc8  00020154  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  08004dc8  0002041c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002017d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cab3  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e81  00000000  00000000  0002cc73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d00  00000000  00000000  0002eaf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a2b  00000000  00000000  0002f7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018749  00000000  00000000  00030223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e770  00000000  00000000  0004896c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c487  00000000  00000000  000570dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c74  00000000  00000000  000e3564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000e71d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000154 	.word	0x20000154
 8000128:	00000000 	.word	0x00000000
 800012c:	08004b50 	.word	0x08004b50

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000158 	.word	0x20000158
 8000148:	08004b50 	.word	0x08004b50

0800014c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#if defined(__GNUC__)
int _write(int fd, char *ptr, int len) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	b29a      	uxth	r2, r3
 800015c:	f04f 33ff 	mov.w	r3, #4294967295
 8000160:	68b9      	ldr	r1, [r7, #8]
 8000162:	4804      	ldr	r0, [pc, #16]	; (8000174 <_write+0x28>)
 8000164:	f003 fa16 	bl	8003594 <HAL_UART_Transmit>
	return len;
 8000168:	687b      	ldr	r3, [r7, #4]
}
 800016a:	4618      	mov	r0, r3
 800016c:	3710      	adds	r7, #16
 800016e:	46bd      	mov	sp, r7
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	20000200 	.word	0x20000200

08000178 <HAL_TIM_PeriodElapsedCallback>:
  HAL_UART_Transmit( &huart1, (uint8_t * ) &ch, 1, UART_Delay);
  return ch;
}
#endif

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2 && startUart == 1) {
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000188:	d17b      	bne.n	8000282 <HAL_TIM_PeriodElapsedCallback+0x10a>
 800018a:	4b70      	ldr	r3, [pc, #448]	; (800034c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	2b01      	cmp	r3, #1
 8000190:	d177      	bne.n	8000282 <HAL_TIM_PeriodElapsedCallback+0x10a>
		if (startXYZ) {
 8000192:	4b6f      	ldr	r3, [pc, #444]	; (8000350 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	2b00      	cmp	r3, #0
 8000198:	d048      	beq.n	800022c <HAL_TIM_PeriodElapsedCallback+0xb4>
			pulX = doneX == 0 ? pulX + 1 : pulX;
 800019a:	4b6e      	ldr	r3, [pc, #440]	; (8000354 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d103      	bne.n	80001aa <HAL_TIM_PeriodElapsedCallback+0x32>
 80001a2:	4b6d      	ldr	r3, [pc, #436]	; (8000358 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	3301      	adds	r3, #1
 80001a8:	e001      	b.n	80001ae <HAL_TIM_PeriodElapsedCallback+0x36>
 80001aa:	4b6b      	ldr	r3, [pc, #428]	; (8000358 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	4a6a      	ldr	r2, [pc, #424]	; (8000358 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80001b0:	6013      	str	r3, [r2, #0]
			pulZ = doneZ == 0 ? pulZ + 1 : pulZ;
 80001b2:	4b6a      	ldr	r3, [pc, #424]	; (800035c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d103      	bne.n	80001c2 <HAL_TIM_PeriodElapsedCallback+0x4a>
 80001ba:	4b69      	ldr	r3, [pc, #420]	; (8000360 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	3301      	adds	r3, #1
 80001c0:	e001      	b.n	80001c6 <HAL_TIM_PeriodElapsedCallback+0x4e>
 80001c2:	4b67      	ldr	r3, [pc, #412]	; (8000360 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	4a66      	ldr	r2, [pc, #408]	; (8000360 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80001c8:	6013      	str	r3, [r2, #0]
			running_TIM2 = 1;
 80001ca:	4b66      	ldr	r3, [pc, #408]	; (8000364 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80001cc:	2201      	movs	r2, #1
 80001ce:	601a      	str	r2, [r3, #0]

			if (pulX >= X && doneX == 0) {
 80001d0:	4b61      	ldr	r3, [pc, #388]	; (8000358 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	461a      	mov	r2, r3
 80001d6:	4b64      	ldr	r3, [pc, #400]	; (8000368 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	429a      	cmp	r2, r3
 80001dc:	d30f      	bcc.n	80001fe <HAL_TIM_PeriodElapsedCallback+0x86>
 80001de:	4b5d      	ldr	r3, [pc, #372]	; (8000354 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d10b      	bne.n	80001fe <HAL_TIM_PeriodElapsedCallback+0x86>
				HAL_TIM_PWM_Stop_IT(&htim2, X_CHANNEL);
 80001e6:	2100      	movs	r1, #0
 80001e8:	4860      	ldr	r0, [pc, #384]	; (800036c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80001ea:	f002 fb07 	bl	80027fc <HAL_TIM_PWM_Stop_IT>
				count_timer++;
 80001ee:	4b60      	ldr	r3, [pc, #384]	; (8000370 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	3301      	adds	r3, #1
 80001f4:	4a5e      	ldr	r2, [pc, #376]	; (8000370 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80001f6:	6013      	str	r3, [r2, #0]
				doneX = 1;
 80001f8:	4b56      	ldr	r3, [pc, #344]	; (8000354 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80001fa:	2201      	movs	r2, #1
 80001fc:	601a      	str	r2, [r3, #0]
			}
			if (pulZ >= Z && doneZ == 0) {
 80001fe:	4b58      	ldr	r3, [pc, #352]	; (8000360 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	461a      	mov	r2, r3
 8000204:	4b5b      	ldr	r3, [pc, #364]	; (8000374 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	429a      	cmp	r2, r3
 800020a:	d30f      	bcc.n	800022c <HAL_TIM_PeriodElapsedCallback+0xb4>
 800020c:	4b53      	ldr	r3, [pc, #332]	; (800035c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d10b      	bne.n	800022c <HAL_TIM_PeriodElapsedCallback+0xb4>
				HAL_TIM_PWM_Stop_IT(&htim2, Z_CHANNEL);
 8000214:	2108      	movs	r1, #8
 8000216:	4855      	ldr	r0, [pc, #340]	; (800036c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000218:	f002 faf0 	bl	80027fc <HAL_TIM_PWM_Stop_IT>
				doneZ = 1;
 800021c:	4b4f      	ldr	r3, [pc, #316]	; (800035c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800021e:	2201      	movs	r2, #1
 8000220:	601a      	str	r2, [r3, #0]
				count_timer++;
 8000222:	4b53      	ldr	r3, [pc, #332]	; (8000370 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	3301      	adds	r3, #1
 8000228:	4a51      	ldr	r2, [pc, #324]	; (8000370 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800022a:	6013      	str	r3, [r2, #0]
			}
		}
		if (startCmd) {
 800022c:	4b52      	ldr	r3, [pc, #328]	; (8000378 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	2b00      	cmp	r3, #0
 8000232:	d026      	beq.n	8000282 <HAL_TIM_PeriodElapsedCallback+0x10a>
			running_TIM2 = 1;
 8000234:	4b4b      	ldr	r3, [pc, #300]	; (8000364 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000236:	2201      	movs	r2, #1
 8000238:	601a      	str	r2, [r3, #0]
			pulT = doneT == 0 ? pulT + 1 : pulT;
 800023a:	4b50      	ldr	r3, [pc, #320]	; (800037c <HAL_TIM_PeriodElapsedCallback+0x204>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d103      	bne.n	800024a <HAL_TIM_PeriodElapsedCallback+0xd2>
 8000242:	4b4f      	ldr	r3, [pc, #316]	; (8000380 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	3301      	adds	r3, #1
 8000248:	e001      	b.n	800024e <HAL_TIM_PeriodElapsedCallback+0xd6>
 800024a:	4b4d      	ldr	r3, [pc, #308]	; (8000380 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	4a4c      	ldr	r2, [pc, #304]	; (8000380 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000250:	6013      	str	r3, [r2, #0]
			if (pulT >= PULSE_ONE_ROUND && doneT == 0) {
 8000252:	4b4b      	ldr	r3, [pc, #300]	; (8000380 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 800025a:	db12      	blt.n	8000282 <HAL_TIM_PeriodElapsedCallback+0x10a>
 800025c:	4b47      	ldr	r3, [pc, #284]	; (800037c <HAL_TIM_PeriodElapsedCallback+0x204>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d10e      	bne.n	8000282 <HAL_TIM_PeriodElapsedCallback+0x10a>
				HAL_TIM_PWM_Stop_IT(&htim2, TURN_CHANNEL);
 8000264:	2104      	movs	r1, #4
 8000266:	4841      	ldr	r0, [pc, #260]	; (800036c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000268:	f002 fac8 	bl	80027fc <HAL_TIM_PWM_Stop_IT>
				doneT = 1;
 800026c:	4b43      	ldr	r3, [pc, #268]	; (800037c <HAL_TIM_PeriodElapsedCallback+0x204>)
 800026e:	2201      	movs	r2, #1
 8000270:	601a      	str	r2, [r3, #0]
				count_timer++;
 8000272:	4b3f      	ldr	r3, [pc, #252]	; (8000370 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	3301      	adds	r3, #1
 8000278:	4a3d      	ldr	r2, [pc, #244]	; (8000370 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800027a:	6013      	str	r3, [r2, #0]
				printf("Done turn around\r\n");
 800027c:	4841      	ldr	r0, [pc, #260]	; (8000384 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800027e:	f004 f8c7 	bl	8004410 <puts>
			}
		}

	}
	if (htim->Instance == TIM3 && startUart == 1) {
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a40      	ldr	r2, [pc, #256]	; (8000388 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000288:	4293      	cmp	r3, r2
 800028a:	d12d      	bne.n	80002e8 <HAL_TIM_PeriodElapsedCallback+0x170>
 800028c:	4b2f      	ldr	r3, [pc, #188]	; (800034c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	2b01      	cmp	r3, #1
 8000292:	d129      	bne.n	80002e8 <HAL_TIM_PeriodElapsedCallback+0x170>
		if (startXYZ) {
 8000294:	4b2e      	ldr	r3, [pc, #184]	; (8000350 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d025      	beq.n	80002e8 <HAL_TIM_PeriodElapsedCallback+0x170>
			pulY = doneY == 0 ? pulY + 1 : pulY;
 800029c:	4b3b      	ldr	r3, [pc, #236]	; (800038c <HAL_TIM_PeriodElapsedCallback+0x214>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d103      	bne.n	80002ac <HAL_TIM_PeriodElapsedCallback+0x134>
 80002a4:	4b3a      	ldr	r3, [pc, #232]	; (8000390 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	3301      	adds	r3, #1
 80002aa:	e001      	b.n	80002b0 <HAL_TIM_PeriodElapsedCallback+0x138>
 80002ac:	4b38      	ldr	r3, [pc, #224]	; (8000390 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a37      	ldr	r2, [pc, #220]	; (8000390 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80002b2:	6013      	str	r3, [r2, #0]
			running_TIM3 = 1;
 80002b4:	4b37      	ldr	r3, [pc, #220]	; (8000394 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	601a      	str	r2, [r3, #0]
			if (pulY >= Y && doneY == 0) {
 80002ba:	4b35      	ldr	r3, [pc, #212]	; (8000390 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	461a      	mov	r2, r3
 80002c0:	4b35      	ldr	r3, [pc, #212]	; (8000398 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	429a      	cmp	r2, r3
 80002c6:	d30f      	bcc.n	80002e8 <HAL_TIM_PeriodElapsedCallback+0x170>
 80002c8:	4b30      	ldr	r3, [pc, #192]	; (800038c <HAL_TIM_PeriodElapsedCallback+0x214>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d10b      	bne.n	80002e8 <HAL_TIM_PeriodElapsedCallback+0x170>
				HAL_TIM_PWM_Stop_IT(&htim3, Y_CHANNEL);
 80002d0:	2100      	movs	r1, #0
 80002d2:	4832      	ldr	r0, [pc, #200]	; (800039c <HAL_TIM_PeriodElapsedCallback+0x224>)
 80002d4:	f002 fa92 	bl	80027fc <HAL_TIM_PWM_Stop_IT>
				doneY = 1;
 80002d8:	4b2c      	ldr	r3, [pc, #176]	; (800038c <HAL_TIM_PeriodElapsedCallback+0x214>)
 80002da:	2201      	movs	r2, #1
 80002dc:	601a      	str	r2, [r3, #0]
				count_timer++;
 80002de:	4b24      	ldr	r3, [pc, #144]	; (8000370 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	3301      	adds	r3, #1
 80002e4:	4a22      	ldr	r2, [pc, #136]	; (8000370 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80002e6:	6013      	str	r3, [r2, #0]

			}
		}
	}
	if ((count_timer == 3 && startUart == 1)
 80002e8:	4b21      	ldr	r3, [pc, #132]	; (8000370 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	2b03      	cmp	r3, #3
 80002ee:	d103      	bne.n	80002f8 <HAL_TIM_PeriodElapsedCallback+0x180>
 80002f0:	4b16      	ldr	r3, [pc, #88]	; (800034c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	2b01      	cmp	r3, #1
 80002f6:	d007      	beq.n	8000308 <HAL_TIM_PeriodElapsedCallback+0x190>
			|| (count_timer == 1 && startCmd == 1)) {
 80002f8:	4b1d      	ldr	r3, [pc, #116]	; (8000370 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d121      	bne.n	8000344 <HAL_TIM_PeriodElapsedCallback+0x1cc>
 8000300:	4b1d      	ldr	r3, [pc, #116]	; (8000378 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2b01      	cmp	r3, #1
 8000306:	d11d      	bne.n	8000344 <HAL_TIM_PeriodElapsedCallback+0x1cc>
		startXYZ = 0;
 8000308:	4b11      	ldr	r3, [pc, #68]	; (8000350 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
		pulX = 0;
 800030e:	4b12      	ldr	r3, [pc, #72]	; (8000358 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000310:	2200      	movs	r2, #0
 8000312:	601a      	str	r2, [r3, #0]
		pulY = 0;
 8000314:	4b1e      	ldr	r3, [pc, #120]	; (8000390 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
		pulZ = 0;
 800031a:	4b11      	ldr	r3, [pc, #68]	; (8000360 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
		pulT = 0;
 8000320:	4b17      	ldr	r3, [pc, #92]	; (8000380 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
		count_timer = 0;
 8000326:	4b12      	ldr	r3, [pc, #72]	; (8000370 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000328:	2200      	movs	r2, #0
 800032a:	601a      	str	r2, [r3, #0]
		startCmd = 0;
 800032c:	4b12      	ldr	r3, [pc, #72]	; (8000378 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
		startUart = 0;
 8000332:	4b06      	ldr	r3, [pc, #24]	; (800034c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000334:	2200      	movs	r2, #0
 8000336:	601a      	str	r2, [r3, #0]
		running_TIM2 = 0;
 8000338:	4b0a      	ldr	r3, [pc, #40]	; (8000364 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
		running_TIM3 = 0;
 800033e:	4b15      	ldr	r3, [pc, #84]	; (8000394 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000340:	2200      	movs	r2, #0
 8000342:	601a      	str	r2, [r3, #0]
	}
}
 8000344:	bf00      	nop
 8000346:	3708      	adds	r7, #8
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	20000254 	.word	0x20000254
 8000350:	2000027c 	.word	0x2000027c
 8000354:	20000268 	.word	0x20000268
 8000358:	20000258 	.word	0x20000258
 800035c:	20000270 	.word	0x20000270
 8000360:	20000260 	.word	0x20000260
 8000364:	20000284 	.word	0x20000284
 8000368:	2000029c 	.word	0x2000029c
 800036c:	20000170 	.word	0x20000170
 8000370:	200002a8 	.word	0x200002a8
 8000374:	200002a4 	.word	0x200002a4
 8000378:	20000280 	.word	0x20000280
 800037c:	20000278 	.word	0x20000278
 8000380:	20000274 	.word	0x20000274
 8000384:	08004b68 	.word	0x08004b68
 8000388:	40000400 	.word	0x40000400
 800038c:	2000026c 	.word	0x2000026c
 8000390:	2000025c 	.word	0x2000025c
 8000394:	20000288 	.word	0x20000288
 8000398:	200002a0 	.word	0x200002a0
 800039c:	200001b8 	.word	0x200001b8

080003a0 <Uart_Receive_Init>:
void Uart_Receive_Init() {
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
	X = 0;
 80003a4:	4b12      	ldr	r3, [pc, #72]	; (80003f0 <Uart_Receive_Init+0x50>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
	Y = 0;
 80003aa:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <Uart_Receive_Init+0x54>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
	Z = 0;
 80003b0:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <Uart_Receive_Init+0x58>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
	valueX = MAX_UART_VALUE;
 80003b6:	4b11      	ldr	r3, [pc, #68]	; (80003fc <Uart_Receive_Init+0x5c>)
 80003b8:	4a11      	ldr	r2, [pc, #68]	; (8000400 <Uart_Receive_Init+0x60>)
 80003ba:	601a      	str	r2, [r3, #0]
	valueY = MAX_UART_VALUE;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <Uart_Receive_Init+0x64>)
 80003be:	4a10      	ldr	r2, [pc, #64]	; (8000400 <Uart_Receive_Init+0x60>)
 80003c0:	601a      	str	r2, [r3, #0]
	valueZ = MAX_UART_VALUE;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <Uart_Receive_Init+0x68>)
 80003c4:	4a0e      	ldr	r2, [pc, #56]	; (8000400 <Uart_Receive_Init+0x60>)
 80003c6:	601a      	str	r2, [r3, #0]
	count_dot = 0;
 80003c8:	4b10      	ldr	r3, [pc, #64]	; (800040c <Uart_Receive_Init+0x6c>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
	mode = 0;
 80003ce:	4b10      	ldr	r3, [pc, #64]	; (8000410 <Uart_Receive_Init+0x70>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	601a      	str	r2, [r3, #0]
	dir_changeZ = 0;
 80003d4:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <Uart_Receive_Init+0x74>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
	dir_changeX = 0;
 80003da:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <Uart_Receive_Init+0x78>)
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
	dir_changeY = 0;
 80003e0:	4b0e      	ldr	r3, [pc, #56]	; (800041c <Uart_Receive_Init+0x7c>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]

}
 80003e6:	bf00      	nop
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	2000029c 	.word	0x2000029c
 80003f4:	200002a0 	.word	0x200002a0
 80003f8:	200002a4 	.word	0x200002a4
 80003fc:	20000000 	.word	0x20000000
 8000400:	000186a0 	.word	0x000186a0
 8000404:	20000004 	.word	0x20000004
 8000408:	20000008 	.word	0x20000008
 800040c:	20000264 	.word	0x20000264
 8000410:	2000028c 	.word	0x2000028c
 8000414:	20000298 	.word	0x20000298
 8000418:	20000290 	.word	0x20000290
 800041c:	20000294 	.word	0x20000294

08000420 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4aaa      	ldr	r2, [pc, #680]	; (80006d8 <HAL_UART_RxCpltCallback+0x2b8>)
 800042e:	4293      	cmp	r3, r2
 8000430:	f040 8280 	bne.w	8000934 <HAL_UART_RxCpltCallback+0x514>
		if (running_TIM2 == 0 && running_TIM3 == 0) {
 8000434:	4ba9      	ldr	r3, [pc, #676]	; (80006dc <HAL_UART_RxCpltCallback+0x2bc>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	2b00      	cmp	r3, #0
 800043a:	f040 8273 	bne.w	8000924 <HAL_UART_RxCpltCallback+0x504>
 800043e:	4ba8      	ldr	r3, [pc, #672]	; (80006e0 <HAL_UART_RxCpltCallback+0x2c0>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	2b00      	cmp	r3, #0
 8000444:	f040 826e 	bne.w	8000924 <HAL_UART_RxCpltCallback+0x504>
			Uart_Receive_Init(); // khoi tao lai cac gia tri cua UART
 8000448:	f7ff ffaa 	bl	80003a0 <Uart_Receive_Init>
			HAL_UART_Receive_IT(&huart1, (uint8_t*) rxByte, length); // truyen du? bit
 800044c:	221a      	movs	r2, #26
 800044e:	49a5      	ldr	r1, [pc, #660]	; (80006e4 <HAL_UART_RxCpltCallback+0x2c4>)
 8000450:	48a5      	ldr	r0, [pc, #660]	; (80006e8 <HAL_UART_RxCpltCallback+0x2c8>)
 8000452:	f003 f922 	bl	800369a <HAL_UART_Receive_IT>
			if (!strncmp(rxByte, Home,length)) {
 8000456:	221a      	movs	r2, #26
 8000458:	49a4      	ldr	r1, [pc, #656]	; (80006ec <HAL_UART_RxCpltCallback+0x2cc>)
 800045a:	48a2      	ldr	r0, [pc, #648]	; (80006e4 <HAL_UART_RxCpltCallback+0x2c4>)
 800045c:	f004 f8c0 	bl	80045e0 <strncmp>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d103      	bne.n	800046e <HAL_UART_RxCpltCallback+0x4e>
				mode = Home_State;
 8000466:	4ba2      	ldr	r3, [pc, #648]	; (80006f0 <HAL_UART_RxCpltCallback+0x2d0>)
 8000468:	2201      	movs	r2, #1
 800046a:	601a      	str	r2, [r3, #0]
 800046c:	e046      	b.n	80004fc <HAL_UART_RxCpltCallback+0xdc>
			} else if (!strncmp(rxByte, Stop,length)) {
 800046e:	221a      	movs	r2, #26
 8000470:	49a0      	ldr	r1, [pc, #640]	; (80006f4 <HAL_UART_RxCpltCallback+0x2d4>)
 8000472:	489c      	ldr	r0, [pc, #624]	; (80006e4 <HAL_UART_RxCpltCallback+0x2c4>)
 8000474:	f004 f8b4 	bl	80045e0 <strncmp>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d103      	bne.n	8000486 <HAL_UART_RxCpltCallback+0x66>
				mode = Stop_State;
 800047e:	4b9c      	ldr	r3, [pc, #624]	; (80006f0 <HAL_UART_RxCpltCallback+0x2d0>)
 8000480:	2203      	movs	r2, #3
 8000482:	601a      	str	r2, [r3, #0]
 8000484:	e03a      	b.n	80004fc <HAL_UART_RxCpltCallback+0xdc>
			} else if (!strncmp(rxByte, Turn_Around,length)) {
 8000486:	221a      	movs	r2, #26
 8000488:	499b      	ldr	r1, [pc, #620]	; (80006f8 <HAL_UART_RxCpltCallback+0x2d8>)
 800048a:	4896      	ldr	r0, [pc, #600]	; (80006e4 <HAL_UART_RxCpltCallback+0x2c4>)
 800048c:	f004 f8a8 	bl	80045e0 <strncmp>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d103      	bne.n	800049e <HAL_UART_RxCpltCallback+0x7e>
				mode = Turn_Around_State;
 8000496:	4b96      	ldr	r3, [pc, #600]	; (80006f0 <HAL_UART_RxCpltCallback+0x2d0>)
 8000498:	2202      	movs	r2, #2
 800049a:	601a      	str	r2, [r3, #0]
 800049c:	e02e      	b.n	80004fc <HAL_UART_RxCpltCallback+0xdc>
			} else if (!strncmp(rxByte, Stop_Conveyor,length)) {
 800049e:	221a      	movs	r2, #26
 80004a0:	4996      	ldr	r1, [pc, #600]	; (80006fc <HAL_UART_RxCpltCallback+0x2dc>)
 80004a2:	4890      	ldr	r0, [pc, #576]	; (80006e4 <HAL_UART_RxCpltCallback+0x2c4>)
 80004a4:	f004 f89c 	bl	80045e0 <strncmp>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d103      	bne.n	80004b6 <HAL_UART_RxCpltCallback+0x96>
				mode = Stop_Conveyor_State;
 80004ae:	4b90      	ldr	r3, [pc, #576]	; (80006f0 <HAL_UART_RxCpltCallback+0x2d0>)
 80004b0:	2204      	movs	r2, #4
 80004b2:	601a      	str	r2, [r3, #0]
 80004b4:	e022      	b.n	80004fc <HAL_UART_RxCpltCallback+0xdc>
			} else if (!strncmp(rxByte, Start_Conveyor,length)) {
 80004b6:	221a      	movs	r2, #26
 80004b8:	4991      	ldr	r1, [pc, #580]	; (8000700 <HAL_UART_RxCpltCallback+0x2e0>)
 80004ba:	488a      	ldr	r0, [pc, #552]	; (80006e4 <HAL_UART_RxCpltCallback+0x2c4>)
 80004bc:	f004 f890 	bl	80045e0 <strncmp>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d103      	bne.n	80004ce <HAL_UART_RxCpltCallback+0xae>
				mode = Start_Conveyor_State;
 80004c6:	4b8a      	ldr	r3, [pc, #552]	; (80006f0 <HAL_UART_RxCpltCallback+0x2d0>)
 80004c8:	2205      	movs	r2, #5
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	e016      	b.n	80004fc <HAL_UART_RxCpltCallback+0xdc>
			} else if (!strncmp(rxByte, Start_Pick_Up,length)) {
 80004ce:	221a      	movs	r2, #26
 80004d0:	498c      	ldr	r1, [pc, #560]	; (8000704 <HAL_UART_RxCpltCallback+0x2e4>)
 80004d2:	4884      	ldr	r0, [pc, #528]	; (80006e4 <HAL_UART_RxCpltCallback+0x2c4>)
 80004d4:	f004 f884 	bl	80045e0 <strncmp>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d103      	bne.n	80004e6 <HAL_UART_RxCpltCallback+0xc6>
				mode = Start_Pick_Up_State;
 80004de:	4b84      	ldr	r3, [pc, #528]	; (80006f0 <HAL_UART_RxCpltCallback+0x2d0>)
 80004e0:	2206      	movs	r2, #6
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	e00a      	b.n	80004fc <HAL_UART_RxCpltCallback+0xdc>
			} else if (!strncmp(rxByte, Stop_Pick_Up,length)) {
 80004e6:	221a      	movs	r2, #26
 80004e8:	4987      	ldr	r1, [pc, #540]	; (8000708 <HAL_UART_RxCpltCallback+0x2e8>)
 80004ea:	487e      	ldr	r0, [pc, #504]	; (80006e4 <HAL_UART_RxCpltCallback+0x2c4>)
 80004ec:	f004 f878 	bl	80045e0 <strncmp>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d102      	bne.n	80004fc <HAL_UART_RxCpltCallback+0xdc>
				mode = Stop_Pick_Up_State;
 80004f6:	4b7e      	ldr	r3, [pc, #504]	; (80006f0 <HAL_UART_RxCpltCallback+0x2d0>)
 80004f8:	2207      	movs	r2, #7
 80004fa:	601a      	str	r2, [r3, #0]
			}
			switch (mode) {
 80004fc:	4b7c      	ldr	r3, [pc, #496]	; (80006f0 <HAL_UART_RxCpltCallback+0x2d0>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	3b01      	subs	r3, #1
 8000502:	2b06      	cmp	r3, #6
 8000504:	f200 8087 	bhi.w	8000616 <HAL_UART_RxCpltCallback+0x1f6>
 8000508:	a201      	add	r2, pc, #4	; (adr r2, 8000510 <HAL_UART_RxCpltCallback+0xf0>)
 800050a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800050e:	bf00      	nop
 8000510:	0800052d 	.word	0x0800052d
 8000514:	08000597 	.word	0x08000597
 8000518:	0800056b 	.word	0x0800056b
 800051c:	080005cb 	.word	0x080005cb
 8000520:	080005df 	.word	0x080005df
 8000524:	080005f3 	.word	0x080005f3
 8000528:	08000605 	.word	0x08000605
			case Home_State: // cai nay cao nhi
				HAL_GPIO_WritePin(GPIOB, DIRX_Pin | DIRY_Pin | DIRZ_Pin,
 800052c:	2201      	movs	r2, #1
 800052e:	f240 4121 	movw	r1, #1057	; 0x421
 8000532:	4876      	ldr	r0, [pc, #472]	; (800070c <HAL_UART_RxCpltCallback+0x2ec>)
 8000534:	f001 fb38 	bl	8001ba8 <HAL_GPIO_WritePin>
						CounterClockWise);
				HAL_TIM_PWM_Start_IT(&htim2, X_CHANNEL);
 8000538:	2100      	movs	r1, #0
 800053a:	4875      	ldr	r0, [pc, #468]	; (8000710 <HAL_UART_RxCpltCallback+0x2f0>)
 800053c:	f002 f86e 	bl	800261c <HAL_TIM_PWM_Start_IT>
				HAL_TIM_PWM_Start_IT(&htim3, Y_CHANNEL);
 8000540:	2100      	movs	r1, #0
 8000542:	4874      	ldr	r0, [pc, #464]	; (8000714 <HAL_UART_RxCpltCallback+0x2f4>)
 8000544:	f002 f86a 	bl	800261c <HAL_TIM_PWM_Start_IT>
				HAL_TIM_PWM_Start_IT(&htim2, Z_CHANNEL);
 8000548:	2108      	movs	r1, #8
 800054a:	4871      	ldr	r0, [pc, #452]	; (8000710 <HAL_UART_RxCpltCallback+0x2f0>)
 800054c:	f002 f866 	bl	800261c <HAL_TIM_PWM_Start_IT>
				doneX = 1;
 8000550:	4b71      	ldr	r3, [pc, #452]	; (8000718 <HAL_UART_RxCpltCallback+0x2f8>)
 8000552:	2201      	movs	r2, #1
 8000554:	601a      	str	r2, [r3, #0]
				doneY = 1;
 8000556:	4b71      	ldr	r3, [pc, #452]	; (800071c <HAL_UART_RxCpltCallback+0x2fc>)
 8000558:	2201      	movs	r2, #1
 800055a:	601a      	str	r2, [r3, #0]
				doneZ = 1;
 800055c:	4b70      	ldr	r3, [pc, #448]	; (8000720 <HAL_UART_RxCpltCallback+0x300>)
 800055e:	2201      	movs	r2, #1
 8000560:	601a      	str	r2, [r3, #0]
				printf("Mode: Home\r\n");
 8000562:	4870      	ldr	r0, [pc, #448]	; (8000724 <HAL_UART_RxCpltCallback+0x304>)
 8000564:	f003 ff54 	bl	8004410 <puts>
				break;
 8000568:	e059      	b.n	800061e <HAL_UART_RxCpltCallback+0x1fe>
			case Stop_State: // thay doi do uu tien boi vi cai nay cao nhat
				HAL_TIM_PWM_Stop_IT(&htim2, X_CHANNEL);
 800056a:	2100      	movs	r1, #0
 800056c:	4868      	ldr	r0, [pc, #416]	; (8000710 <HAL_UART_RxCpltCallback+0x2f0>)
 800056e:	f002 f945 	bl	80027fc <HAL_TIM_PWM_Stop_IT>
				HAL_TIM_PWM_Stop_IT(&htim3, Y_CHANNEL);
 8000572:	2100      	movs	r1, #0
 8000574:	4867      	ldr	r0, [pc, #412]	; (8000714 <HAL_UART_RxCpltCallback+0x2f4>)
 8000576:	f002 f941 	bl	80027fc <HAL_TIM_PWM_Stop_IT>
				HAL_TIM_PWM_Stop_IT(&htim2, Z_CHANNEL);
 800057a:	2108      	movs	r1, #8
 800057c:	4864      	ldr	r0, [pc, #400]	; (8000710 <HAL_UART_RxCpltCallback+0x2f0>)
 800057e:	f002 f93d 	bl	80027fc <HAL_TIM_PWM_Stop_IT>
				HAL_GPIO_WritePin(GPIOB, RELAY_CONVEYOR_Pin, Off);
 8000582:	2201      	movs	r2, #1
 8000584:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000588:	4860      	ldr	r0, [pc, #384]	; (800070c <HAL_UART_RxCpltCallback+0x2ec>)
 800058a:	f001 fb0d 	bl	8001ba8 <HAL_GPIO_WritePin>
				printf("Mode: Stop\r\n");
 800058e:	4866      	ldr	r0, [pc, #408]	; (8000728 <HAL_UART_RxCpltCallback+0x308>)
 8000590:	f003 ff3e 	bl	8004410 <puts>
				break;
 8000594:	e043      	b.n	800061e <HAL_UART_RxCpltCallback+0x1fe>
			case Turn_Around_State:
				HAL_GPIO_WritePin(GPIOB, RELAY_CONVEYOR_Pin, On);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800059c:	485b      	ldr	r0, [pc, #364]	; (800070c <HAL_UART_RxCpltCallback+0x2ec>)
 800059e:	f001 fb03 	bl	8001ba8 <HAL_GPIO_WritePin>
				HAL_TIM_PWM_Stop_IT(&htim2, X_CHANNEL);
 80005a2:	2100      	movs	r1, #0
 80005a4:	485a      	ldr	r0, [pc, #360]	; (8000710 <HAL_UART_RxCpltCallback+0x2f0>)
 80005a6:	f002 f929 	bl	80027fc <HAL_TIM_PWM_Stop_IT>
				HAL_TIM_PWM_Stop_IT(&htim3, Y_CHANNEL);
 80005aa:	2100      	movs	r1, #0
 80005ac:	4859      	ldr	r0, [pc, #356]	; (8000714 <HAL_UART_RxCpltCallback+0x2f4>)
 80005ae:	f002 f925 	bl	80027fc <HAL_TIM_PWM_Stop_IT>
				HAL_TIM_PWM_Stop_IT(&htim2, Z_CHANNEL);
 80005b2:	2108      	movs	r1, #8
 80005b4:	4856      	ldr	r0, [pc, #344]	; (8000710 <HAL_UART_RxCpltCallback+0x2f0>)
 80005b6:	f002 f921 	bl	80027fc <HAL_TIM_PWM_Stop_IT>
				HAL_TIM_PWM_Start_IT(&htim2, TURN_CHANNEL);
 80005ba:	2104      	movs	r1, #4
 80005bc:	4854      	ldr	r0, [pc, #336]	; (8000710 <HAL_UART_RxCpltCallback+0x2f0>)
 80005be:	f002 f82d 	bl	800261c <HAL_TIM_PWM_Start_IT>
				printf("Mode: Turn Around\r\n");
 80005c2:	485a      	ldr	r0, [pc, #360]	; (800072c <HAL_UART_RxCpltCallback+0x30c>)
 80005c4:	f003 ff24 	bl	8004410 <puts>
				break;
 80005c8:	e029      	b.n	800061e <HAL_UART_RxCpltCallback+0x1fe>
			case Stop_Conveyor_State:
				HAL_GPIO_WritePin(GPIOB, RELAY_CONVEYOR_Pin, Off);
 80005ca:	2201      	movs	r2, #1
 80005cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d0:	484e      	ldr	r0, [pc, #312]	; (800070c <HAL_UART_RxCpltCallback+0x2ec>)
 80005d2:	f001 fae9 	bl	8001ba8 <HAL_GPIO_WritePin>
				printf("Mode: Stop Conveyor\r\n");
 80005d6:	4856      	ldr	r0, [pc, #344]	; (8000730 <HAL_UART_RxCpltCallback+0x310>)
 80005d8:	f003 ff1a 	bl	8004410 <puts>
				break;
 80005dc:	e01f      	b.n	800061e <HAL_UART_RxCpltCallback+0x1fe>
			case Start_Conveyor_State:
				HAL_GPIO_WritePin(GPIOB, RELAY_CONVEYOR_Pin, On);
 80005de:	2200      	movs	r2, #0
 80005e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005e4:	4849      	ldr	r0, [pc, #292]	; (800070c <HAL_UART_RxCpltCallback+0x2ec>)
 80005e6:	f001 fadf 	bl	8001ba8 <HAL_GPIO_WritePin>
				printf("Mode: Start Conveyor\r\n");
 80005ea:	4852      	ldr	r0, [pc, #328]	; (8000734 <HAL_UART_RxCpltCallback+0x314>)
 80005ec:	f003 ff10 	bl	8004410 <puts>
				break;
 80005f0:	e015      	b.n	800061e <HAL_UART_RxCpltCallback+0x1fe>
			case Start_Pick_Up_State:
				HAL_GPIO_WritePin(GPIOA, RELAY_ROBOT_Pin, On);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2140      	movs	r1, #64	; 0x40
 80005f6:	4850      	ldr	r0, [pc, #320]	; (8000738 <HAL_UART_RxCpltCallback+0x318>)
 80005f8:	f001 fad6 	bl	8001ba8 <HAL_GPIO_WritePin>
				printf("Mode: Start pick up \r\n");
 80005fc:	484f      	ldr	r0, [pc, #316]	; (800073c <HAL_UART_RxCpltCallback+0x31c>)
 80005fe:	f003 ff07 	bl	8004410 <puts>
				break;
 8000602:	e00c      	b.n	800061e <HAL_UART_RxCpltCallback+0x1fe>
			case Stop_Pick_Up_State:
				HAL_GPIO_WritePin(GPIOA, RELAY_ROBOT_Pin, Off);
 8000604:	2201      	movs	r2, #1
 8000606:	2140      	movs	r1, #64	; 0x40
 8000608:	484b      	ldr	r0, [pc, #300]	; (8000738 <HAL_UART_RxCpltCallback+0x318>)
 800060a:	f001 facd 	bl	8001ba8 <HAL_GPIO_WritePin>
				printf("Mode: Stop pick up \r\n");
 800060e:	484c      	ldr	r0, [pc, #304]	; (8000740 <HAL_UART_RxCpltCallback+0x320>)
 8000610:	f003 fefe 	bl	8004410 <puts>
				break;
 8000614:	e003      	b.n	800061e <HAL_UART_RxCpltCallback+0x1fe>
			default:
				mode = 0;
 8000616:	4b36      	ldr	r3, [pc, #216]	; (80006f0 <HAL_UART_RxCpltCallback+0x2d0>)
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
				break;
 800061c:	bf00      	nop
			}
			if (mode == 0) {
 800061e:	4b34      	ldr	r3, [pc, #208]	; (80006f0 <HAL_UART_RxCpltCallback+0x2d0>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	f040 8173 	bne.w	800090e <HAL_UART_RxCpltCallback+0x4ee>
				printf("Mode: XYZ\r\n");
 8000628:	4846      	ldr	r0, [pc, #280]	; (8000744 <HAL_UART_RxCpltCallback+0x324>)
 800062a:	f003 fef1 	bl	8004410 <puts>
				for (int i = 0; i < length; i++) {
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	e128      	b.n	8000886 <HAL_UART_RxCpltCallback+0x466>
					if ((rxByte[i] >= 'a' && rxByte[i] <= 'z')
 8000634:	4a2b      	ldr	r2, [pc, #172]	; (80006e4 <HAL_UART_RxCpltCallback+0x2c4>)
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	4413      	add	r3, r2
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b60      	cmp	r3, #96	; 0x60
 800063e:	d906      	bls.n	800064e <HAL_UART_RxCpltCallback+0x22e>
 8000640:	4a28      	ldr	r2, [pc, #160]	; (80006e4 <HAL_UART_RxCpltCallback+0x2c4>)
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	4413      	add	r3, r2
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b7a      	cmp	r3, #122	; 0x7a
 800064a:	f240 8118 	bls.w	800087e <HAL_UART_RxCpltCallback+0x45e>
							|| (rxByte[i] >= 'A' && rxByte[i] <= 'Z')
 800064e:	4a25      	ldr	r2, [pc, #148]	; (80006e4 <HAL_UART_RxCpltCallback+0x2c4>)
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	4413      	add	r3, r2
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b40      	cmp	r3, #64	; 0x40
 8000658:	d906      	bls.n	8000668 <HAL_UART_RxCpltCallback+0x248>
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <HAL_UART_RxCpltCallback+0x2c4>)
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	4413      	add	r3, r2
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b5a      	cmp	r3, #90	; 0x5a
 8000664:	f240 810b 	bls.w	800087e <HAL_UART_RxCpltCallback+0x45e>
							|| rxByte[i] == '=') {
 8000668:	4a1e      	ldr	r2, [pc, #120]	; (80006e4 <HAL_UART_RxCpltCallback+0x2c4>)
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	4413      	add	r3, r2
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b3d      	cmp	r3, #61	; 0x3d
 8000672:	f000 8104 	beq.w	800087e <HAL_UART_RxCpltCallback+0x45e>
						continue;
					} else {
						if (rxByte[i] == ',') {
 8000676:	4a1b      	ldr	r2, [pc, #108]	; (80006e4 <HAL_UART_RxCpltCallback+0x2c4>)
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	4413      	add	r3, r2
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b2c      	cmp	r3, #44	; 0x2c
 8000680:	d105      	bne.n	800068e <HAL_UART_RxCpltCallback+0x26e>
							count_dot++;
 8000682:	4b31      	ldr	r3, [pc, #196]	; (8000748 <HAL_UART_RxCpltCallback+0x328>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	3301      	adds	r3, #1
 8000688:	4a2f      	ldr	r2, [pc, #188]	; (8000748 <HAL_UART_RxCpltCallback+0x328>)
 800068a:	6013      	str	r3, [r2, #0]
							continue;
 800068c:	e0f8      	b.n	8000880 <HAL_UART_RxCpltCallback+0x460>
						}
						switch (count_dot) {
 800068e:	4b2e      	ldr	r3, [pc, #184]	; (8000748 <HAL_UART_RxCpltCallback+0x328>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b02      	cmp	r3, #2
 8000694:	f000 80b9 	beq.w	800080a <HAL_UART_RxCpltCallback+0x3ea>
 8000698:	2b02      	cmp	r3, #2
 800069a:	f300 80f1 	bgt.w	8000880 <HAL_UART_RxCpltCallback+0x460>
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d002      	beq.n	80006a8 <HAL_UART_RxCpltCallback+0x288>
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d079      	beq.n	800079a <HAL_UART_RxCpltCallback+0x37a>
 80006a6:	e0eb      	b.n	8000880 <HAL_UART_RxCpltCallback+0x460>
						case 0:
							if (rxByte[i] == '-') {
 80006a8:	4a0e      	ldr	r2, [pc, #56]	; (80006e4 <HAL_UART_RxCpltCallback+0x2c4>)
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	4413      	add	r3, r2
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b2d      	cmp	r3, #45	; 0x2d
 80006b2:	d151      	bne.n	8000758 <HAL_UART_RxCpltCallback+0x338>
								HAL_GPIO_WritePin(GPIOB, DIRX_Pin,
 80006b4:	2201      	movs	r2, #1
 80006b6:	2101      	movs	r1, #1
 80006b8:	4814      	ldr	r0, [pc, #80]	; (800070c <HAL_UART_RxCpltCallback+0x2ec>)
 80006ba:	f001 fa75 	bl	8001ba8 <HAL_GPIO_WritePin>
										CounterClockWise);
								dir_changeX = 1;
 80006be:	4b23      	ldr	r3, [pc, #140]	; (800074c <HAL_UART_RxCpltCallback+0x32c>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	601a      	str	r2, [r3, #0]
								valueX /= 10;
 80006c4:	4b22      	ldr	r3, [pc, #136]	; (8000750 <HAL_UART_RxCpltCallback+0x330>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a22      	ldr	r2, [pc, #136]	; (8000754 <HAL_UART_RxCpltCallback+0x334>)
 80006ca:	fba2 2303 	umull	r2, r3, r2, r3
 80006ce:	08db      	lsrs	r3, r3, #3
 80006d0:	4a1f      	ldr	r2, [pc, #124]	; (8000750 <HAL_UART_RxCpltCallback+0x330>)
 80006d2:	6013      	str	r3, [r2, #0]
								continue;
 80006d4:	e0d4      	b.n	8000880 <HAL_UART_RxCpltCallback+0x460>
 80006d6:	bf00      	nop
 80006d8:	40013800 	.word	0x40013800
 80006dc:	20000284 	.word	0x20000284
 80006e0:	20000288 	.word	0x20000288
 80006e4:	200002ac 	.word	0x200002ac
 80006e8:	20000200 	.word	0x20000200
 80006ec:	2000000c 	.word	0x2000000c
 80006f0:	2000028c 	.word	0x2000028c
 80006f4:	2000004c 	.word	0x2000004c
 80006f8:	2000002c 	.word	0x2000002c
 80006fc:	2000006c 	.word	0x2000006c
 8000700:	2000008c 	.word	0x2000008c
 8000704:	200000ac 	.word	0x200000ac
 8000708:	200000cc 	.word	0x200000cc
 800070c:	40010c00 	.word	0x40010c00
 8000710:	20000170 	.word	0x20000170
 8000714:	200001b8 	.word	0x200001b8
 8000718:	20000268 	.word	0x20000268
 800071c:	2000026c 	.word	0x2000026c
 8000720:	20000270 	.word	0x20000270
 8000724:	08004b7c 	.word	0x08004b7c
 8000728:	08004b88 	.word	0x08004b88
 800072c:	08004b94 	.word	0x08004b94
 8000730:	08004ba8 	.word	0x08004ba8
 8000734:	08004bc0 	.word	0x08004bc0
 8000738:	40010800 	.word	0x40010800
 800073c:	08004bd8 	.word	0x08004bd8
 8000740:	08004bf0 	.word	0x08004bf0
 8000744:	08004c08 	.word	0x08004c08
 8000748:	20000264 	.word	0x20000264
 800074c:	20000290 	.word	0x20000290
 8000750:	20000000 	.word	0x20000000
 8000754:	cccccccd 	.word	0xcccccccd
							}
							if (!dir_changeX) {
 8000758:	4b78      	ldr	r3, [pc, #480]	; (800093c <HAL_UART_RxCpltCallback+0x51c>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d104      	bne.n	800076a <HAL_UART_RxCpltCallback+0x34a>
								HAL_GPIO_WritePin(GPIOB, DIRX_Pin, ClockWise);
 8000760:	2200      	movs	r2, #0
 8000762:	2101      	movs	r1, #1
 8000764:	4876      	ldr	r0, [pc, #472]	; (8000940 <HAL_UART_RxCpltCallback+0x520>)
 8000766:	f001 fa1f 	bl	8001ba8 <HAL_GPIO_WritePin>

							}
							X += ((int) rxByte[i] - '0') * valueX;
 800076a:	4a76      	ldr	r2, [pc, #472]	; (8000944 <HAL_UART_RxCpltCallback+0x524>)
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	4413      	add	r3, r2
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	3b30      	subs	r3, #48	; 0x30
 8000774:	461a      	mov	r2, r3
 8000776:	4b74      	ldr	r3, [pc, #464]	; (8000948 <HAL_UART_RxCpltCallback+0x528>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	fb03 f202 	mul.w	r2, r3, r2
 800077e:	4b73      	ldr	r3, [pc, #460]	; (800094c <HAL_UART_RxCpltCallback+0x52c>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4413      	add	r3, r2
 8000784:	4a71      	ldr	r2, [pc, #452]	; (800094c <HAL_UART_RxCpltCallback+0x52c>)
 8000786:	6013      	str	r3, [r2, #0]
							valueX /= 10;
 8000788:	4b6f      	ldr	r3, [pc, #444]	; (8000948 <HAL_UART_RxCpltCallback+0x528>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a70      	ldr	r2, [pc, #448]	; (8000950 <HAL_UART_RxCpltCallback+0x530>)
 800078e:	fba2 2303 	umull	r2, r3, r2, r3
 8000792:	08db      	lsrs	r3, r3, #3
 8000794:	4a6c      	ldr	r2, [pc, #432]	; (8000948 <HAL_UART_RxCpltCallback+0x528>)
 8000796:	6013      	str	r3, [r2, #0]
							break;
 8000798:	e072      	b.n	8000880 <HAL_UART_RxCpltCallback+0x460>
						case 1:
							if (rxByte[i] == '-') {
 800079a:	4a6a      	ldr	r2, [pc, #424]	; (8000944 <HAL_UART_RxCpltCallback+0x524>)
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	4413      	add	r3, r2
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b2d      	cmp	r3, #45	; 0x2d
 80007a4:	d110      	bne.n	80007c8 <HAL_UART_RxCpltCallback+0x3a8>
								HAL_GPIO_WritePin(GPIOA, DIRY_Pin,
 80007a6:	2201      	movs	r2, #1
 80007a8:	2120      	movs	r1, #32
 80007aa:	486a      	ldr	r0, [pc, #424]	; (8000954 <HAL_UART_RxCpltCallback+0x534>)
 80007ac:	f001 f9fc 	bl	8001ba8 <HAL_GPIO_WritePin>
										CounterClockWise);
								dir_changeY = 1;
 80007b0:	4b69      	ldr	r3, [pc, #420]	; (8000958 <HAL_UART_RxCpltCallback+0x538>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	601a      	str	r2, [r3, #0]
								valueY /= 10;
 80007b6:	4b69      	ldr	r3, [pc, #420]	; (800095c <HAL_UART_RxCpltCallback+0x53c>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a65      	ldr	r2, [pc, #404]	; (8000950 <HAL_UART_RxCpltCallback+0x530>)
 80007bc:	fba2 2303 	umull	r2, r3, r2, r3
 80007c0:	08db      	lsrs	r3, r3, #3
 80007c2:	4a66      	ldr	r2, [pc, #408]	; (800095c <HAL_UART_RxCpltCallback+0x53c>)
 80007c4:	6013      	str	r3, [r2, #0]
								continue;
 80007c6:	e05b      	b.n	8000880 <HAL_UART_RxCpltCallback+0x460>
							}
							if (!dir_changeY) {
 80007c8:	4b63      	ldr	r3, [pc, #396]	; (8000958 <HAL_UART_RxCpltCallback+0x538>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d104      	bne.n	80007da <HAL_UART_RxCpltCallback+0x3ba>
								HAL_GPIO_WritePin(GPIOA, DIRY_Pin, ClockWise);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2120      	movs	r1, #32
 80007d4:	485f      	ldr	r0, [pc, #380]	; (8000954 <HAL_UART_RxCpltCallback+0x534>)
 80007d6:	f001 f9e7 	bl	8001ba8 <HAL_GPIO_WritePin>
							}
							Y += ((int) rxByte[i] - '0') * valueY;
 80007da:	4a5a      	ldr	r2, [pc, #360]	; (8000944 <HAL_UART_RxCpltCallback+0x524>)
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	4413      	add	r3, r2
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	3b30      	subs	r3, #48	; 0x30
 80007e4:	461a      	mov	r2, r3
 80007e6:	4b5d      	ldr	r3, [pc, #372]	; (800095c <HAL_UART_RxCpltCallback+0x53c>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	fb03 f202 	mul.w	r2, r3, r2
 80007ee:	4b5c      	ldr	r3, [pc, #368]	; (8000960 <HAL_UART_RxCpltCallback+0x540>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4413      	add	r3, r2
 80007f4:	4a5a      	ldr	r2, [pc, #360]	; (8000960 <HAL_UART_RxCpltCallback+0x540>)
 80007f6:	6013      	str	r3, [r2, #0]
							valueY /= 10;
 80007f8:	4b58      	ldr	r3, [pc, #352]	; (800095c <HAL_UART_RxCpltCallback+0x53c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a54      	ldr	r2, [pc, #336]	; (8000950 <HAL_UART_RxCpltCallback+0x530>)
 80007fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000802:	08db      	lsrs	r3, r3, #3
 8000804:	4a55      	ldr	r2, [pc, #340]	; (800095c <HAL_UART_RxCpltCallback+0x53c>)
 8000806:	6013      	str	r3, [r2, #0]
							break;
 8000808:	e03a      	b.n	8000880 <HAL_UART_RxCpltCallback+0x460>
						case 2:
							if (rxByte[i] == '-') {
 800080a:	4a4e      	ldr	r2, [pc, #312]	; (8000944 <HAL_UART_RxCpltCallback+0x524>)
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	4413      	add	r3, r2
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b2d      	cmp	r3, #45	; 0x2d
 8000814:	d111      	bne.n	800083a <HAL_UART_RxCpltCallback+0x41a>
								HAL_GPIO_WritePin(GPIOB, DIRZ_Pin,
 8000816:	2201      	movs	r2, #1
 8000818:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800081c:	4848      	ldr	r0, [pc, #288]	; (8000940 <HAL_UART_RxCpltCallback+0x520>)
 800081e:	f001 f9c3 	bl	8001ba8 <HAL_GPIO_WritePin>
										CounterClockWise);
								valueZ /= 10;
 8000822:	4b50      	ldr	r3, [pc, #320]	; (8000964 <HAL_UART_RxCpltCallback+0x544>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a4a      	ldr	r2, [pc, #296]	; (8000950 <HAL_UART_RxCpltCallback+0x530>)
 8000828:	fba2 2303 	umull	r2, r3, r2, r3
 800082c:	08db      	lsrs	r3, r3, #3
 800082e:	4a4d      	ldr	r2, [pc, #308]	; (8000964 <HAL_UART_RxCpltCallback+0x544>)
 8000830:	6013      	str	r3, [r2, #0]
								dir_changeZ = 1;
 8000832:	4b4d      	ldr	r3, [pc, #308]	; (8000968 <HAL_UART_RxCpltCallback+0x548>)
 8000834:	2201      	movs	r2, #1
 8000836:	601a      	str	r2, [r3, #0]
								continue;
 8000838:	e022      	b.n	8000880 <HAL_UART_RxCpltCallback+0x460>
							}
							if (!dir_changeZ) {
 800083a:	4b4b      	ldr	r3, [pc, #300]	; (8000968 <HAL_UART_RxCpltCallback+0x548>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d105      	bne.n	800084e <HAL_UART_RxCpltCallback+0x42e>
								HAL_GPIO_WritePin(GPIOB, DIRZ_Pin, ClockWise);
 8000842:	2200      	movs	r2, #0
 8000844:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000848:	483d      	ldr	r0, [pc, #244]	; (8000940 <HAL_UART_RxCpltCallback+0x520>)
 800084a:	f001 f9ad 	bl	8001ba8 <HAL_GPIO_WritePin>
							}
							Z += ((int) rxByte[i] - '0') * valueZ;
 800084e:	4a3d      	ldr	r2, [pc, #244]	; (8000944 <HAL_UART_RxCpltCallback+0x524>)
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	4413      	add	r3, r2
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	3b30      	subs	r3, #48	; 0x30
 8000858:	461a      	mov	r2, r3
 800085a:	4b42      	ldr	r3, [pc, #264]	; (8000964 <HAL_UART_RxCpltCallback+0x544>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	fb03 f202 	mul.w	r2, r3, r2
 8000862:	4b42      	ldr	r3, [pc, #264]	; (800096c <HAL_UART_RxCpltCallback+0x54c>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4413      	add	r3, r2
 8000868:	4a40      	ldr	r2, [pc, #256]	; (800096c <HAL_UART_RxCpltCallback+0x54c>)
 800086a:	6013      	str	r3, [r2, #0]
							valueZ /= 10;
 800086c:	4b3d      	ldr	r3, [pc, #244]	; (8000964 <HAL_UART_RxCpltCallback+0x544>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a37      	ldr	r2, [pc, #220]	; (8000950 <HAL_UART_RxCpltCallback+0x530>)
 8000872:	fba2 2303 	umull	r2, r3, r2, r3
 8000876:	08db      	lsrs	r3, r3, #3
 8000878:	4a3a      	ldr	r2, [pc, #232]	; (8000964 <HAL_UART_RxCpltCallback+0x544>)
 800087a:	6013      	str	r3, [r2, #0]
							break;
 800087c:	e000      	b.n	8000880 <HAL_UART_RxCpltCallback+0x460>
						continue;
 800087e:	bf00      	nop
				for (int i = 0; i < length; i++) {
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	3301      	adds	r3, #1
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	2b19      	cmp	r3, #25
 800088a:	f77f aed3 	ble.w	8000634 <HAL_UART_RxCpltCallback+0x214>

						}
					}
				}
				startXYZ = 1;
 800088e:	4b38      	ldr	r3, [pc, #224]	; (8000970 <HAL_UART_RxCpltCallback+0x550>)
 8000890:	2201      	movs	r2, #1
 8000892:	601a      	str	r2, [r3, #0]
				doneX = 0;
 8000894:	4b37      	ldr	r3, [pc, #220]	; (8000974 <HAL_UART_RxCpltCallback+0x554>)
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
				doneY = 0;
 800089a:	4b37      	ldr	r3, [pc, #220]	; (8000978 <HAL_UART_RxCpltCallback+0x558>)
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
				doneZ = 0;
 80008a0:	4b36      	ldr	r3, [pc, #216]	; (800097c <HAL_UART_RxCpltCallback+0x55c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
				if (X) {
 80008a6:	4b29      	ldr	r3, [pc, #164]	; (800094c <HAL_UART_RxCpltCallback+0x52c>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d004      	beq.n	80008b8 <HAL_UART_RxCpltCallback+0x498>
					HAL_TIM_PWM_Start_IT(&htim2, X_CHANNEL);
 80008ae:	2100      	movs	r1, #0
 80008b0:	4833      	ldr	r0, [pc, #204]	; (8000980 <HAL_UART_RxCpltCallback+0x560>)
 80008b2:	f001 feb3 	bl	800261c <HAL_TIM_PWM_Start_IT>
 80008b6:	e007      	b.n	80008c8 <HAL_UART_RxCpltCallback+0x4a8>
				} else {
					doneX = 1;
 80008b8:	4b2e      	ldr	r3, [pc, #184]	; (8000974 <HAL_UART_RxCpltCallback+0x554>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	601a      	str	r2, [r3, #0]
					count_timer++;
 80008be:	4b31      	ldr	r3, [pc, #196]	; (8000984 <HAL_UART_RxCpltCallback+0x564>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	3301      	adds	r3, #1
 80008c4:	4a2f      	ldr	r2, [pc, #188]	; (8000984 <HAL_UART_RxCpltCallback+0x564>)
 80008c6:	6013      	str	r3, [r2, #0]
				}
				if (Y) {
 80008c8:	4b25      	ldr	r3, [pc, #148]	; (8000960 <HAL_UART_RxCpltCallback+0x540>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d004      	beq.n	80008da <HAL_UART_RxCpltCallback+0x4ba>
					HAL_TIM_PWM_Start_IT(&htim3, Y_CHANNEL);
 80008d0:	2100      	movs	r1, #0
 80008d2:	482d      	ldr	r0, [pc, #180]	; (8000988 <HAL_UART_RxCpltCallback+0x568>)
 80008d4:	f001 fea2 	bl	800261c <HAL_TIM_PWM_Start_IT>
 80008d8:	e007      	b.n	80008ea <HAL_UART_RxCpltCallback+0x4ca>
				} else {
					doneY = 1;
 80008da:	4b27      	ldr	r3, [pc, #156]	; (8000978 <HAL_UART_RxCpltCallback+0x558>)
 80008dc:	2201      	movs	r2, #1
 80008de:	601a      	str	r2, [r3, #0]
					count_timer++;
 80008e0:	4b28      	ldr	r3, [pc, #160]	; (8000984 <HAL_UART_RxCpltCallback+0x564>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	4a27      	ldr	r2, [pc, #156]	; (8000984 <HAL_UART_RxCpltCallback+0x564>)
 80008e8:	6013      	str	r3, [r2, #0]
				}
				if (Z) {
 80008ea:	4b20      	ldr	r3, [pc, #128]	; (800096c <HAL_UART_RxCpltCallback+0x54c>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d004      	beq.n	80008fc <HAL_UART_RxCpltCallback+0x4dc>
					HAL_TIM_PWM_Start_IT(&htim2, Z_CHANNEL);
 80008f2:	2108      	movs	r1, #8
 80008f4:	4822      	ldr	r0, [pc, #136]	; (8000980 <HAL_UART_RxCpltCallback+0x560>)
 80008f6:	f001 fe91 	bl	800261c <HAL_TIM_PWM_Start_IT>
 80008fa:	e00f      	b.n	800091c <HAL_UART_RxCpltCallback+0x4fc>
				} else {
					doneZ = 1;
 80008fc:	4b1f      	ldr	r3, [pc, #124]	; (800097c <HAL_UART_RxCpltCallback+0x55c>)
 80008fe:	2201      	movs	r2, #1
 8000900:	601a      	str	r2, [r3, #0]
					count_timer++;
 8000902:	4b20      	ldr	r3, [pc, #128]	; (8000984 <HAL_UART_RxCpltCallback+0x564>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	3301      	adds	r3, #1
 8000908:	4a1e      	ldr	r2, [pc, #120]	; (8000984 <HAL_UART_RxCpltCallback+0x564>)
 800090a:	6013      	str	r3, [r2, #0]
 800090c:	e006      	b.n	800091c <HAL_UART_RxCpltCallback+0x4fc>
				}

			} else if (mode != 0) {
 800090e:	4b1f      	ldr	r3, [pc, #124]	; (800098c <HAL_UART_RxCpltCallback+0x56c>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d002      	beq.n	800091c <HAL_UART_RxCpltCallback+0x4fc>
				startCmd = 1;
 8000916:	4b1e      	ldr	r3, [pc, #120]	; (8000990 <HAL_UART_RxCpltCallback+0x570>)
 8000918:	2201      	movs	r2, #1
 800091a:	601a      	str	r2, [r3, #0]
			}
			startUart = 1;
 800091c:	4b1d      	ldr	r3, [pc, #116]	; (8000994 <HAL_UART_RxCpltCallback+0x574>)
 800091e:	2201      	movs	r2, #1
 8000920:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart1, (uint8_t*) rxByte, length);
		}

	}

}
 8000922:	e007      	b.n	8000934 <HAL_UART_RxCpltCallback+0x514>
			printf("Running.... Dont receive value\r\n");
 8000924:	481c      	ldr	r0, [pc, #112]	; (8000998 <HAL_UART_RxCpltCallback+0x578>)
 8000926:	f003 fd73 	bl	8004410 <puts>
			HAL_UART_Receive_IT(&huart1, (uint8_t*) rxByte, length);
 800092a:	221a      	movs	r2, #26
 800092c:	4905      	ldr	r1, [pc, #20]	; (8000944 <HAL_UART_RxCpltCallback+0x524>)
 800092e:	481b      	ldr	r0, [pc, #108]	; (800099c <HAL_UART_RxCpltCallback+0x57c>)
 8000930:	f002 feb3 	bl	800369a <HAL_UART_Receive_IT>
}
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000290 	.word	0x20000290
 8000940:	40010c00 	.word	0x40010c00
 8000944:	200002ac 	.word	0x200002ac
 8000948:	20000000 	.word	0x20000000
 800094c:	2000029c 	.word	0x2000029c
 8000950:	cccccccd 	.word	0xcccccccd
 8000954:	40010800 	.word	0x40010800
 8000958:	20000294 	.word	0x20000294
 800095c:	20000004 	.word	0x20000004
 8000960:	200002a0 	.word	0x200002a0
 8000964:	20000008 	.word	0x20000008
 8000968:	20000298 	.word	0x20000298
 800096c:	200002a4 	.word	0x200002a4
 8000970:	2000027c 	.word	0x2000027c
 8000974:	20000268 	.word	0x20000268
 8000978:	2000026c 	.word	0x2000026c
 800097c:	20000270 	.word	0x20000270
 8000980:	20000170 	.word	0x20000170
 8000984:	200002a8 	.word	0x200002a8
 8000988:	200001b8 	.word	0x200001b8
 800098c:	2000028c 	.word	0x2000028c
 8000990:	20000280 	.word	0x20000280
 8000994:	20000254 	.word	0x20000254
 8000998:	08004c14 	.word	0x08004c14
 800099c:	20000200 	.word	0x20000200

080009a0 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 80009aa:	88fb      	ldrh	r3, [r7, #6]
 80009ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009b0:	d027      	beq.n	8000a02 <HAL_GPIO_EXTI_Callback+0x62>
 80009b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009b6:	dc49      	bgt.n	8000a4c <HAL_GPIO_EXTI_Callback+0xac>
 80009b8:	2b80      	cmp	r3, #128	; 0x80
 80009ba:	d006      	beq.n	80009ca <HAL_GPIO_EXTI_Callback+0x2a>
 80009bc:	2b80      	cmp	r3, #128	; 0x80
 80009be:	dc45      	bgt.n	8000a4c <HAL_GPIO_EXTI_Callback+0xac>
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	d010      	beq.n	80009e6 <HAL_GPIO_EXTI_Callback+0x46>
 80009c4:	2b10      	cmp	r3, #16
 80009c6:	d02c      	beq.n	8000a22 <HAL_GPIO_EXTI_Callback+0x82>
		HAL_TIM_PWM_Stop_IT(&htim2, Z_CHANNEL);
		EXTI->PR = SIGZ_Pin;
		__HAL_GPIO_EXTI_CLEAR_IT(SIGZ_Pin);
		break;
	default:
		break;
 80009c8:	e040      	b.n	8000a4c <HAL_GPIO_EXTI_Callback+0xac>
		HAL_TIM_PWM_Stop_IT(&htim2, X_CHANNEL);
 80009ca:	2100      	movs	r1, #0
 80009cc:	4822      	ldr	r0, [pc, #136]	; (8000a58 <HAL_GPIO_EXTI_Callback+0xb8>)
 80009ce:	f001 ff15 	bl	80027fc <HAL_TIM_PWM_Stop_IT>
		homeX = 1;
 80009d2:	4b22      	ldr	r3, [pc, #136]	; (8000a5c <HAL_GPIO_EXTI_Callback+0xbc>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	601a      	str	r2, [r3, #0]
		EXTI->PR = SIGX_Pin;
 80009d8:	4b21      	ldr	r3, [pc, #132]	; (8000a60 <HAL_GPIO_EXTI_Callback+0xc0>)
 80009da:	2280      	movs	r2, #128	; 0x80
 80009dc:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(SIGX_Pin);
 80009de:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <HAL_GPIO_EXTI_Callback+0xc0>)
 80009e0:	2280      	movs	r2, #128	; 0x80
 80009e2:	615a      	str	r2, [r3, #20]
		break;
 80009e4:	e033      	b.n	8000a4e <HAL_GPIO_EXTI_Callback+0xae>
		HAL_TIM_PWM_Stop_IT(&htim3, Y_CHANNEL);
 80009e6:	2100      	movs	r1, #0
 80009e8:	481e      	ldr	r0, [pc, #120]	; (8000a64 <HAL_GPIO_EXTI_Callback+0xc4>)
 80009ea:	f001 ff07 	bl	80027fc <HAL_TIM_PWM_Stop_IT>
		homeY = 1;
 80009ee:	4b1e      	ldr	r3, [pc, #120]	; (8000a68 <HAL_GPIO_EXTI_Callback+0xc8>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	601a      	str	r2, [r3, #0]
		EXTI->PR = SIGY_Pin;
 80009f4:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <HAL_GPIO_EXTI_Callback+0xc0>)
 80009f6:	2202      	movs	r2, #2
 80009f8:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(SIGY_Pin);
 80009fa:	4b19      	ldr	r3, [pc, #100]	; (8000a60 <HAL_GPIO_EXTI_Callback+0xc0>)
 80009fc:	2202      	movs	r2, #2
 80009fe:	615a      	str	r2, [r3, #20]
		break;
 8000a00:	e025      	b.n	8000a4e <HAL_GPIO_EXTI_Callback+0xae>
		HAL_TIM_PWM_Stop_IT(&htim2, Z_CHANNEL);
 8000a02:	2108      	movs	r1, #8
 8000a04:	4814      	ldr	r0, [pc, #80]	; (8000a58 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000a06:	f001 fef9 	bl	80027fc <HAL_TIM_PWM_Stop_IT>
		homeZ = 1;
 8000a0a:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <HAL_GPIO_EXTI_Callback+0xcc>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	601a      	str	r2, [r3, #0]
		EXTI->PR = SIGZ_Pin;
 8000a10:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000a12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a16:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(SIGZ_Pin);
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000a1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a1e:	615a      	str	r2, [r3, #20]
		break;
 8000a20:	e015      	b.n	8000a4e <HAL_GPIO_EXTI_Callback+0xae>
		HAL_TIM_PWM_Stop_IT(&htim2, X_CHANNEL);
 8000a22:	2100      	movs	r1, #0
 8000a24:	480c      	ldr	r0, [pc, #48]	; (8000a58 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000a26:	f001 fee9 	bl	80027fc <HAL_TIM_PWM_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim3, Y_CHANNEL);
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	480d      	ldr	r0, [pc, #52]	; (8000a64 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000a2e:	f001 fee5 	bl	80027fc <HAL_TIM_PWM_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim2, Z_CHANNEL);
 8000a32:	2108      	movs	r1, #8
 8000a34:	4808      	ldr	r0, [pc, #32]	; (8000a58 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000a36:	f001 fee1 	bl	80027fc <HAL_TIM_PWM_Stop_IT>
		EXTI->PR = SIGZ_Pin;
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a40:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(SIGZ_Pin);
 8000a42:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a48:	615a      	str	r2, [r3, #20]
		break;
 8000a4a:	e000      	b.n	8000a4e <HAL_GPIO_EXTI_Callback+0xae>
		break;
 8000a4c:	bf00      	nop
	}
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000170 	.word	0x20000170
 8000a5c:	20000248 	.word	0x20000248
 8000a60:	40010400 	.word	0x40010400
 8000a64:	200001b8 	.word	0x200001b8
 8000a68:	2000024c 	.word	0x2000024c
 8000a6c:	20000250 	.word	0x20000250

08000a70 <ResetAllValue>:
void ResetAllValue() {
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
	homeY = 0;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <ResetAllValue+0x44>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
	homeX = 0;
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <ResetAllValue+0x48>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
	homeZ = 0;
 8000a80:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <ResetAllValue+0x4c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
	pulX = 0;
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <ResetAllValue+0x50>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
	pulY = 0;
 8000a8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <ResetAllValue+0x54>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
	pulZ = 0;
 8000a92:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <ResetAllValue+0x58>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
	doneX = 0;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <ResetAllValue+0x5c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
	doneY = 0;
 8000a9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <ResetAllValue+0x60>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
	doneZ = 0;
 8000aa4:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <ResetAllValue+0x64>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bc80      	pop	{r7}
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	2000024c 	.word	0x2000024c
 8000ab8:	20000248 	.word	0x20000248
 8000abc:	20000250 	.word	0x20000250
 8000ac0:	20000258 	.word	0x20000258
 8000ac4:	2000025c 	.word	0x2000025c
 8000ac8:	20000260 	.word	0x20000260
 8000acc:	20000268 	.word	0x20000268
 8000ad0:	2000026c 	.word	0x2000026c
 8000ad4:	20000270 	.word	0x20000270

08000ad8 <CheckHome>:
void CheckHome(void) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
	if (homeY == 1 && homeX == 1 && homeZ == 1) {
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <CheckHome+0x38>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d112      	bne.n	8000b0a <CheckHome+0x32>
 8000ae4:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <CheckHome+0x3c>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d10e      	bne.n	8000b0a <CheckHome+0x32>
 8000aec:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <CheckHome+0x40>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d10a      	bne.n	8000b0a <CheckHome+0x32>
		printf("At home\r\n");
 8000af4:	4809      	ldr	r0, [pc, #36]	; (8000b1c <CheckHome+0x44>)
 8000af6:	f003 fc8b 	bl	8004410 <puts>
		ResetAllValue();
 8000afa:	f7ff ffb9 	bl	8000a70 <ResetAllValue>
		HAL_GPIO_WritePin(GPIOB, RELAY_CONVEYOR_Pin, On); // bat bang chuyen
 8000afe:	2200      	movs	r2, #0
 8000b00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b04:	4806      	ldr	r0, [pc, #24]	; (8000b20 <CheckHome+0x48>)
 8000b06:	f001 f84f 	bl	8001ba8 <HAL_GPIO_WritePin>
	}
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	2000024c 	.word	0x2000024c
 8000b14:	20000248 	.word	0x20000248
 8000b18:	20000250 	.word	0x20000250
 8000b1c:	08004c34 	.word	0x08004c34
 8000b20:	40010c00 	.word	0x40010c00

08000b24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b28:	f000 fc98 	bl	800145c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b2c:	f000 f828 	bl	8000b80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b30:	f000 f996 	bl	8000e60 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b34:	f000 f86a 	bl	8000c0c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000b38:	f000 f968 	bl	8000e0c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000b3c:	f000 f8f0 	bl	8000d20 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8000b40:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <main+0x4c>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f06f 0201 	mvn.w	r2, #1
 8000b48:	611a      	str	r2, [r3, #16]
	__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <main+0x50>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f06f 0201 	mvn.w	r2, #1
 8000b52:	611a      	str	r2, [r3, #16]

	HAL_TIM_Base_Start_IT(&htim2);
 8000b54:	4806      	ldr	r0, [pc, #24]	; (8000b70 <main+0x4c>)
 8000b56:	f001 fcb7 	bl	80024c8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8000b5a:	4806      	ldr	r0, [pc, #24]	; (8000b74 <main+0x50>)
 8000b5c:	f001 fcb4 	bl	80024c8 <HAL_TIM_Base_Start_IT>

	HAL_UART_Receive_IT(&huart1, (uint8_t*) rxByte, length);
 8000b60:	221a      	movs	r2, #26
 8000b62:	4905      	ldr	r1, [pc, #20]	; (8000b78 <main+0x54>)
 8000b64:	4805      	ldr	r0, [pc, #20]	; (8000b7c <main+0x58>)
 8000b66:	f002 fd98 	bl	800369a <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		CheckHome();
 8000b6a:	f7ff ffb5 	bl	8000ad8 <CheckHome>
 8000b6e:	e7fc      	b.n	8000b6a <main+0x46>
 8000b70:	20000170 	.word	0x20000170
 8000b74:	200001b8 	.word	0x200001b8
 8000b78:	200002ac 	.word	0x200002ac
 8000b7c:	20000200 	.word	0x20000200

08000b80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b090      	sub	sp, #64	; 0x40
 8000b84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b86:	f107 0318 	add.w	r3, r7, #24
 8000b8a:	2228      	movs	r2, #40	; 0x28
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f003 fd1e 	bl	80045d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
 8000ba0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ba6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000baa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bac:	2300      	movs	r3, #0
 8000bae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bbc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000bbe:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc4:	f107 0318 	add.w	r3, r7, #24
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f001 f81d 	bl	8001c08 <HAL_RCC_OscConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000bd4:	f000 fa02 	bl	8000fdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd8:	230f      	movs	r3, #15
 8000bda:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000be4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000be8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8000bea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bee:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	2102      	movs	r1, #2
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f001 fa89 	bl	800210c <HAL_RCC_ClockConfig>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000c00:	f000 f9ec 	bl	8000fdc <Error_Handler>
  }
}
 8000c04:	bf00      	nop
 8000c06:	3740      	adds	r7, #64	; 0x40
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08e      	sub	sp, #56	; 0x38
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c20:	f107 0320 	add.w	r3, r7, #32
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
 8000c38:	615a      	str	r2, [r3, #20]
 8000c3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c3c:	4b37      	ldr	r3, [pc, #220]	; (8000d1c <MX_TIM2_Init+0x110>)
 8000c3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 160-1;
 8000c44:	4b35      	ldr	r3, [pc, #212]	; (8000d1c <MX_TIM2_Init+0x110>)
 8000c46:	229f      	movs	r2, #159	; 0x9f
 8000c48:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4a:	4b34      	ldr	r3, [pc, #208]	; (8000d1c <MX_TIM2_Init+0x110>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 125-1;
 8000c50:	4b32      	ldr	r3, [pc, #200]	; (8000d1c <MX_TIM2_Init+0x110>)
 8000c52:	227c      	movs	r2, #124	; 0x7c
 8000c54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c56:	4b31      	ldr	r3, [pc, #196]	; (8000d1c <MX_TIM2_Init+0x110>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c5c:	4b2f      	ldr	r3, [pc, #188]	; (8000d1c <MX_TIM2_Init+0x110>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c62:	482e      	ldr	r0, [pc, #184]	; (8000d1c <MX_TIM2_Init+0x110>)
 8000c64:	f001 fbe0 	bl	8002428 <HAL_TIM_Base_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000c6e:	f000 f9b5 	bl	8000fdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4827      	ldr	r0, [pc, #156]	; (8000d1c <MX_TIM2_Init+0x110>)
 8000c80:	f002 f838 	bl	8002cf4 <HAL_TIM_ConfigClockSource>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000c8a:	f000 f9a7 	bl	8000fdc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c8e:	4823      	ldr	r0, [pc, #140]	; (8000d1c <MX_TIM2_Init+0x110>)
 8000c90:	f001 fc6c 	bl	800256c <HAL_TIM_PWM_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000c9a:	f000 f99f 	bl	8000fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ca6:	f107 0320 	add.w	r3, r7, #32
 8000caa:	4619      	mov	r1, r3
 8000cac:	481b      	ldr	r0, [pc, #108]	; (8000d1c <MX_TIM2_Init+0x110>)
 8000cae:	f002 fbb1 	bl	8003414 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000cb8:	f000 f990 	bl	8000fdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cbc:	2360      	movs	r3, #96	; 0x60
 8000cbe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8000cc0:	2364      	movs	r3, #100	; 0x64
 8000cc2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	2200      	movs	r2, #0
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4812      	ldr	r0, [pc, #72]	; (8000d1c <MX_TIM2_Init+0x110>)
 8000cd4:	f001 ff4c 	bl	8002b70 <HAL_TIM_PWM_ConfigChannel>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000cde:	f000 f97d 	bl	8000fdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	2204      	movs	r2, #4
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	480c      	ldr	r0, [pc, #48]	; (8000d1c <MX_TIM2_Init+0x110>)
 8000cea:	f001 ff41 	bl	8002b70 <HAL_TIM_PWM_ConfigChannel>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8000cf4:	f000 f972 	bl	8000fdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	2208      	movs	r2, #8
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4807      	ldr	r0, [pc, #28]	; (8000d1c <MX_TIM2_Init+0x110>)
 8000d00:	f001 ff36 	bl	8002b70 <HAL_TIM_PWM_ConfigChannel>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 8000d0a:	f000 f967 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d0e:	4803      	ldr	r0, [pc, #12]	; (8000d1c <MX_TIM2_Init+0x110>)
 8000d10:	f000 f9dc 	bl	80010cc <HAL_TIM_MspPostInit>

}
 8000d14:	bf00      	nop
 8000d16:	3738      	adds	r7, #56	; 0x38
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000170 	.word	0x20000170

08000d20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08e      	sub	sp, #56	; 0x38
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d34:	f107 0320 	add.w	r3, r7, #32
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
 8000d4c:	615a      	str	r2, [r3, #20]
 8000d4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d50:	4b2c      	ldr	r3, [pc, #176]	; (8000e04 <MX_TIM3_Init+0xe4>)
 8000d52:	4a2d      	ldr	r2, [pc, #180]	; (8000e08 <MX_TIM3_Init+0xe8>)
 8000d54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160-1;
 8000d56:	4b2b      	ldr	r3, [pc, #172]	; (8000e04 <MX_TIM3_Init+0xe4>)
 8000d58:	229f      	movs	r2, #159	; 0x9f
 8000d5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5c:	4b29      	ldr	r3, [pc, #164]	; (8000e04 <MX_TIM3_Init+0xe4>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200-1;
 8000d62:	4b28      	ldr	r3, [pc, #160]	; (8000e04 <MX_TIM3_Init+0xe4>)
 8000d64:	22c7      	movs	r2, #199	; 0xc7
 8000d66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d68:	4b26      	ldr	r3, [pc, #152]	; (8000e04 <MX_TIM3_Init+0xe4>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d6e:	4b25      	ldr	r3, [pc, #148]	; (8000e04 <MX_TIM3_Init+0xe4>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d74:	4823      	ldr	r0, [pc, #140]	; (8000e04 <MX_TIM3_Init+0xe4>)
 8000d76:	f001 fb57 	bl	8002428 <HAL_TIM_Base_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000d80:	f000 f92c 	bl	8000fdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d88:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d8e:	4619      	mov	r1, r3
 8000d90:	481c      	ldr	r0, [pc, #112]	; (8000e04 <MX_TIM3_Init+0xe4>)
 8000d92:	f001 ffaf 	bl	8002cf4 <HAL_TIM_ConfigClockSource>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000d9c:	f000 f91e 	bl	8000fdc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000da0:	4818      	ldr	r0, [pc, #96]	; (8000e04 <MX_TIM3_Init+0xe4>)
 8000da2:	f001 fbe3 	bl	800256c <HAL_TIM_PWM_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000dac:	f000 f916 	bl	8000fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db0:	2300      	movs	r3, #0
 8000db2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000db8:	f107 0320 	add.w	r3, r7, #32
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4811      	ldr	r0, [pc, #68]	; (8000e04 <MX_TIM3_Init+0xe4>)
 8000dc0:	f002 fb28 	bl	8003414 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000dca:	f000 f907 	bl	8000fdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dce:	2360      	movs	r3, #96	; 0x60
 8000dd0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8000dd2:	2332      	movs	r3, #50	; 0x32
 8000dd4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	2200      	movs	r2, #0
 8000de2:	4619      	mov	r1, r3
 8000de4:	4807      	ldr	r0, [pc, #28]	; (8000e04 <MX_TIM3_Init+0xe4>)
 8000de6:	f001 fec3 	bl	8002b70 <HAL_TIM_PWM_ConfigChannel>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000df0:	f000 f8f4 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000df4:	4803      	ldr	r0, [pc, #12]	; (8000e04 <MX_TIM3_Init+0xe4>)
 8000df6:	f000 f969 	bl	80010cc <HAL_TIM_MspPostInit>

}
 8000dfa:	bf00      	nop
 8000dfc:	3738      	adds	r7, #56	; 0x38
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	200001b8 	.word	0x200001b8
 8000e08:	40000400 	.word	0x40000400

08000e0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <MX_USART1_UART_Init+0x4c>)
 8000e12:	4a12      	ldr	r2, [pc, #72]	; (8000e5c <MX_USART1_UART_Init+0x50>)
 8000e14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <MX_USART1_UART_Init+0x4c>)
 8000e18:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <MX_USART1_UART_Init+0x4c>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <MX_USART1_UART_Init+0x4c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <MX_USART1_UART_Init+0x4c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e30:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <MX_USART1_UART_Init+0x4c>)
 8000e32:	220c      	movs	r2, #12
 8000e34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e36:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <MX_USART1_UART_Init+0x4c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <MX_USART1_UART_Init+0x4c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e42:	4805      	ldr	r0, [pc, #20]	; (8000e58 <MX_USART1_UART_Init+0x4c>)
 8000e44:	f002 fb56 	bl	80034f4 <HAL_UART_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e4e:	f000 f8c5 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000200 	.word	0x20000200
 8000e5c:	40013800 	.word	0x40013800

08000e60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b088      	sub	sp, #32
 8000e64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e66:	f107 0310 	add.w	r3, r7, #16
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e74:	4b54      	ldr	r3, [pc, #336]	; (8000fc8 <MX_GPIO_Init+0x168>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	4a53      	ldr	r2, [pc, #332]	; (8000fc8 <MX_GPIO_Init+0x168>)
 8000e7a:	f043 0320 	orr.w	r3, r3, #32
 8000e7e:	6193      	str	r3, [r2, #24]
 8000e80:	4b51      	ldr	r3, [pc, #324]	; (8000fc8 <MX_GPIO_Init+0x168>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	f003 0320 	and.w	r3, r3, #32
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8c:	4b4e      	ldr	r3, [pc, #312]	; (8000fc8 <MX_GPIO_Init+0x168>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	4a4d      	ldr	r2, [pc, #308]	; (8000fc8 <MX_GPIO_Init+0x168>)
 8000e92:	f043 0304 	orr.w	r3, r3, #4
 8000e96:	6193      	str	r3, [r2, #24]
 8000e98:	4b4b      	ldr	r3, [pc, #300]	; (8000fc8 <MX_GPIO_Init+0x168>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	f003 0304 	and.w	r3, r3, #4
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea4:	4b48      	ldr	r3, [pc, #288]	; (8000fc8 <MX_GPIO_Init+0x168>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	4a47      	ldr	r2, [pc, #284]	; (8000fc8 <MX_GPIO_Init+0x168>)
 8000eaa:	f043 0308 	orr.w	r3, r3, #8
 8000eae:	6193      	str	r3, [r2, #24]
 8000eb0:	4b45      	ldr	r3, [pc, #276]	; (8000fc8 <MX_GPIO_Init+0x168>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	f003 0308 	and.w	r3, r3, #8
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIRY_GPIO_Port, DIRY_Pin, GPIO_PIN_RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2120      	movs	r1, #32
 8000ec0:	4842      	ldr	r0, [pc, #264]	; (8000fcc <MX_GPIO_Init+0x16c>)
 8000ec2:	f000 fe71 	bl	8001ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_ROBOT_GPIO_Port, RELAY_ROBOT_Pin, GPIO_PIN_SET);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	2140      	movs	r1, #64	; 0x40
 8000eca:	4840      	ldr	r0, [pc, #256]	; (8000fcc <MX_GPIO_Init+0x16c>)
 8000ecc:	f000 fe6c 	bl	8001ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIRX_Pin|DIRZ_Pin, GPIO_PIN_RESET);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f240 4101 	movw	r1, #1025	; 0x401
 8000ed6:	483e      	ldr	r0, [pc, #248]	; (8000fd0 <MX_GPIO_Init+0x170>)
 8000ed8:	f000 fe66 	bl	8001ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY_ABSORB_Pin|RELAY_CONVEYOR_Pin, GPIO_PIN_SET);
 8000edc:	2201      	movs	r2, #1
 8000ede:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000ee2:	483b      	ldr	r0, [pc, #236]	; (8000fd0 <MX_GPIO_Init+0x170>)
 8000ee4:	f000 fe60 	bl	8001ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EMSTOP_Pin */
  GPIO_InitStruct.Pin = EMSTOP_Pin;
 8000ee8:	2310      	movs	r3, #16
 8000eea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eec:	4b39      	ldr	r3, [pc, #228]	; (8000fd4 <MX_GPIO_Init+0x174>)
 8000eee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EMSTOP_GPIO_Port, &GPIO_InitStruct);
 8000ef4:	f107 0310 	add.w	r3, r7, #16
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4834      	ldr	r0, [pc, #208]	; (8000fcc <MX_GPIO_Init+0x16c>)
 8000efc:	f000 fcd0 	bl	80018a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIRY_Pin */
  GPIO_InitStruct.Pin = DIRY_Pin;
 8000f00:	2320      	movs	r3, #32
 8000f02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f04:	2301      	movs	r3, #1
 8000f06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIRY_GPIO_Port, &GPIO_InitStruct);
 8000f10:	f107 0310 	add.w	r3, r7, #16
 8000f14:	4619      	mov	r1, r3
 8000f16:	482d      	ldr	r0, [pc, #180]	; (8000fcc <MX_GPIO_Init+0x16c>)
 8000f18:	f000 fcc2 	bl	80018a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_ROBOT_Pin */
  GPIO_InitStruct.Pin = RELAY_ROBOT_Pin;
 8000f1c:	2340      	movs	r3, #64	; 0x40
 8000f1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f20:	2301      	movs	r3, #1
 8000f22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RELAY_ROBOT_GPIO_Port, &GPIO_InitStruct);
 8000f2c:	f107 0310 	add.w	r3, r7, #16
 8000f30:	4619      	mov	r1, r3
 8000f32:	4826      	ldr	r0, [pc, #152]	; (8000fcc <MX_GPIO_Init+0x16c>)
 8000f34:	f000 fcb4 	bl	80018a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIRX_Pin DIRZ_Pin */
  GPIO_InitStruct.Pin = DIRX_Pin|DIRZ_Pin;
 8000f38:	f240 4301 	movw	r3, #1025	; 0x401
 8000f3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f42:	2302      	movs	r3, #2
 8000f44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2302      	movs	r3, #2
 8000f48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4a:	f107 0310 	add.w	r3, r7, #16
 8000f4e:	4619      	mov	r1, r3
 8000f50:	481f      	ldr	r0, [pc, #124]	; (8000fd0 <MX_GPIO_Init+0x170>)
 8000f52:	f000 fca5 	bl	80018a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIGY_Pin SIGX_Pin SIGZ_Pin */
  GPIO_InitStruct.Pin = SIGY_Pin|SIGX_Pin|SIGZ_Pin;
 8000f56:	f240 2382 	movw	r3, #642	; 0x282
 8000f5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f5c:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <MX_GPIO_Init+0x178>)
 8000f5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f60:	2301      	movs	r3, #1
 8000f62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f64:	f107 0310 	add.w	r3, r7, #16
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4819      	ldr	r0, [pc, #100]	; (8000fd0 <MX_GPIO_Init+0x170>)
 8000f6c:	f000 fc98 	bl	80018a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_ABSORB_Pin RELAY_CONVEYOR_Pin */
  GPIO_InitStruct.Pin = RELAY_ABSORB_Pin|RELAY_CONVEYOR_Pin;
 8000f70:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000f74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f76:	2301      	movs	r3, #1
 8000f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f82:	f107 0310 	add.w	r3, r7, #16
 8000f86:	4619      	mov	r1, r3
 8000f88:	4811      	ldr	r0, [pc, #68]	; (8000fd0 <MX_GPIO_Init+0x170>)
 8000f8a:	f000 fc89 	bl	80018a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2100      	movs	r1, #0
 8000f92:	2007      	movs	r0, #7
 8000f94:	f000 fb9b 	bl	80016ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000f98:	2007      	movs	r0, #7
 8000f9a:	f000 fbb4 	bl	8001706 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	200a      	movs	r0, #10
 8000fa4:	f000 fb93 	bl	80016ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000fa8:	200a      	movs	r0, #10
 8000faa:	f000 fbac 	bl	8001706 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	2017      	movs	r0, #23
 8000fb4:	f000 fb8b 	bl	80016ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000fb8:	2017      	movs	r0, #23
 8000fba:	f000 fba4 	bl	8001706 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fbe:	bf00      	nop
 8000fc0:	3720      	adds	r7, #32
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	40010800 	.word	0x40010800
 8000fd0:	40010c00 	.word	0x40010c00
 8000fd4:	10110000 	.word	0x10110000
 8000fd8:	10210000 	.word	0x10210000

08000fdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe0:	b672      	cpsid	i
}
 8000fe2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000fe4:	e7fe      	b.n	8000fe4 <Error_Handler+0x8>
	...

08000fe8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <HAL_MspInit+0x5c>)
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	4a14      	ldr	r2, [pc, #80]	; (8001044 <HAL_MspInit+0x5c>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	6193      	str	r3, [r2, #24]
 8000ffa:	4b12      	ldr	r3, [pc, #72]	; (8001044 <HAL_MspInit+0x5c>)
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001006:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <HAL_MspInit+0x5c>)
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	4a0e      	ldr	r2, [pc, #56]	; (8001044 <HAL_MspInit+0x5c>)
 800100c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001010:	61d3      	str	r3, [r2, #28]
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <HAL_MspInit+0x5c>)
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800101e:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <HAL_MspInit+0x60>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	4a04      	ldr	r2, [pc, #16]	; (8001048 <HAL_MspInit+0x60>)
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800103a:	bf00      	nop
 800103c:	3714      	adds	r7, #20
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr
 8001044:	40021000 	.word	0x40021000
 8001048:	40010000 	.word	0x40010000

0800104c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800105c:	d114      	bne.n	8001088 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800105e:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <HAL_TIM_Base_MspInit+0x78>)
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	4a18      	ldr	r2, [pc, #96]	; (80010c4 <HAL_TIM_Base_MspInit+0x78>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	61d3      	str	r3, [r2, #28]
 800106a:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <HAL_TIM_Base_MspInit+0x78>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2100      	movs	r1, #0
 800107a:	201c      	movs	r0, #28
 800107c:	f000 fb27 	bl	80016ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001080:	201c      	movs	r0, #28
 8001082:	f000 fb40 	bl	8001706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001086:	e018      	b.n	80010ba <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a0e      	ldr	r2, [pc, #56]	; (80010c8 <HAL_TIM_Base_MspInit+0x7c>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d113      	bne.n	80010ba <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001092:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <HAL_TIM_Base_MspInit+0x78>)
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <HAL_TIM_Base_MspInit+0x78>)
 8001098:	f043 0302 	orr.w	r3, r3, #2
 800109c:	61d3      	str	r3, [r2, #28]
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <HAL_TIM_Base_MspInit+0x78>)
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2100      	movs	r1, #0
 80010ae:	201d      	movs	r0, #29
 80010b0:	f000 fb0d 	bl	80016ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010b4:	201d      	movs	r0, #29
 80010b6:	f000 fb26 	bl	8001706 <HAL_NVIC_EnableIRQ>
}
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40000400 	.word	0x40000400

080010cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	; 0x28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010ea:	d118      	bne.n	800111e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ec:	4b25      	ldr	r3, [pc, #148]	; (8001184 <HAL_TIM_MspPostInit+0xb8>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a24      	ldr	r2, [pc, #144]	; (8001184 <HAL_TIM_MspPostInit+0xb8>)
 80010f2:	f043 0304 	orr.w	r3, r3, #4
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b22      	ldr	r3, [pc, #136]	; (8001184 <HAL_TIM_MspPostInit+0xb8>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f003 0304 	and.w	r3, r3, #4
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001104:	2307      	movs	r3, #7
 8001106:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001108:	2302      	movs	r3, #2
 800110a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2302      	movs	r3, #2
 800110e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4619      	mov	r1, r3
 8001116:	481c      	ldr	r0, [pc, #112]	; (8001188 <HAL_TIM_MspPostInit+0xbc>)
 8001118:	f000 fbc2 	bl	80018a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800111c:	e02e      	b.n	800117c <HAL_TIM_MspPostInit+0xb0>
  else if(htim->Instance==TIM3)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a1a      	ldr	r2, [pc, #104]	; (800118c <HAL_TIM_MspPostInit+0xc0>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d129      	bne.n	800117c <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001128:	4b16      	ldr	r3, [pc, #88]	; (8001184 <HAL_TIM_MspPostInit+0xb8>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	4a15      	ldr	r2, [pc, #84]	; (8001184 <HAL_TIM_MspPostInit+0xb8>)
 800112e:	f043 0308 	orr.w	r3, r3, #8
 8001132:	6193      	str	r3, [r2, #24]
 8001134:	4b13      	ldr	r3, [pc, #76]	; (8001184 <HAL_TIM_MspPostInit+0xb8>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f003 0308 	and.w	r3, r3, #8
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001140:	2310      	movs	r3, #16
 8001142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	2302      	movs	r3, #2
 8001146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2302      	movs	r3, #2
 800114a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4619      	mov	r1, r3
 8001152:	480f      	ldr	r0, [pc, #60]	; (8001190 <HAL_TIM_MspPostInit+0xc4>)
 8001154:	f000 fba4 	bl	80018a0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001158:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <HAL_TIM_MspPostInit+0xc8>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
 8001166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001168:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
 800116e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001170:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
 8001176:	4a07      	ldr	r2, [pc, #28]	; (8001194 <HAL_TIM_MspPostInit+0xc8>)
 8001178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117a:	6053      	str	r3, [r2, #4]
}
 800117c:	bf00      	nop
 800117e:	3728      	adds	r7, #40	; 0x28
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40021000 	.word	0x40021000
 8001188:	40010800 	.word	0x40010800
 800118c:	40000400 	.word	0x40000400
 8001190:	40010c00 	.word	0x40010c00
 8001194:	40010000 	.word	0x40010000

08001198 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0310 	add.w	r3, r7, #16
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a20      	ldr	r2, [pc, #128]	; (8001234 <HAL_UART_MspInit+0x9c>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d139      	bne.n	800122c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011b8:	4b1f      	ldr	r3, [pc, #124]	; (8001238 <HAL_UART_MspInit+0xa0>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	4a1e      	ldr	r2, [pc, #120]	; (8001238 <HAL_UART_MspInit+0xa0>)
 80011be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c2:	6193      	str	r3, [r2, #24]
 80011c4:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <HAL_UART_MspInit+0xa0>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d0:	4b19      	ldr	r3, [pc, #100]	; (8001238 <HAL_UART_MspInit+0xa0>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	4a18      	ldr	r2, [pc, #96]	; (8001238 <HAL_UART_MspInit+0xa0>)
 80011d6:	f043 0304 	orr.w	r3, r3, #4
 80011da:	6193      	str	r3, [r2, #24]
 80011dc:	4b16      	ldr	r3, [pc, #88]	; (8001238 <HAL_UART_MspInit+0xa0>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011f2:	2303      	movs	r3, #3
 80011f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f6:	f107 0310 	add.w	r3, r7, #16
 80011fa:	4619      	mov	r1, r3
 80011fc:	480f      	ldr	r0, [pc, #60]	; (800123c <HAL_UART_MspInit+0xa4>)
 80011fe:	f000 fb4f 	bl	80018a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001206:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001210:	f107 0310 	add.w	r3, r7, #16
 8001214:	4619      	mov	r1, r3
 8001216:	4809      	ldr	r0, [pc, #36]	; (800123c <HAL_UART_MspInit+0xa4>)
 8001218:	f000 fb42 	bl	80018a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800121c:	2200      	movs	r2, #0
 800121e:	2100      	movs	r1, #0
 8001220:	2025      	movs	r0, #37	; 0x25
 8001222:	f000 fa54 	bl	80016ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001226:	2025      	movs	r0, #37	; 0x25
 8001228:	f000 fa6d 	bl	8001706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800122c:	bf00      	nop
 800122e:	3720      	adds	r7, #32
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40013800 	.word	0x40013800
 8001238:	40021000 	.word	0x40021000
 800123c:	40010800 	.word	0x40010800

08001240 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001244:	e7fe      	b.n	8001244 <NMI_Handler+0x4>

08001246 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800124a:	e7fe      	b.n	800124a <HardFault_Handler+0x4>

0800124c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <MemManage_Handler+0x4>

08001252 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001256:	e7fe      	b.n	8001256 <BusFault_Handler+0x4>

08001258 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800125c:	e7fe      	b.n	800125c <UsageFault_Handler+0x4>

0800125e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr

0800126a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr

08001276 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr

08001282 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001286:	f000 f92f 	bl	80014e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}

0800128e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SIGY_Pin);
 8001292:	2002      	movs	r0, #2
 8001294:	f000 fca0 	bl	8001bd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}

0800129c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMSTOP_Pin);
 80012a0:	2010      	movs	r0, #16
 80012a2:	f000 fc99 	bl	8001bd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}

080012aa <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SIGX_Pin);
 80012ae:	2080      	movs	r0, #128	; 0x80
 80012b0:	f000 fc92 	bl	8001bd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SIGZ_Pin);
 80012b4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012b8:	f000 fc8e 	bl	8001bd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}

080012c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012c4:	4802      	ldr	r0, [pc, #8]	; (80012d0 <TIM2_IRQHandler+0x10>)
 80012c6:	f001 fb4b 	bl	8002960 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000170 	.word	0x20000170

080012d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80012d8:	4802      	ldr	r0, [pc, #8]	; (80012e4 <TIM3_IRQHandler+0x10>)
 80012da:	f001 fb41 	bl	8002960 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200001b8 	.word	0x200001b8

080012e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012ec:	4802      	ldr	r0, [pc, #8]	; (80012f8 <USART1_IRQHandler+0x10>)
 80012ee:	f002 f9f9 	bl	80036e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000200 	.word	0x20000200

080012fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	e00a      	b.n	8001324 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800130e:	f3af 8000 	nop.w
 8001312:	4601      	mov	r1, r0
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	1c5a      	adds	r2, r3, #1
 8001318:	60ba      	str	r2, [r7, #8]
 800131a:	b2ca      	uxtb	r2, r1
 800131c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	3301      	adds	r3, #1
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	697a      	ldr	r2, [r7, #20]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	429a      	cmp	r2, r3
 800132a:	dbf0      	blt.n	800130e <_read+0x12>
  }

  return len;
 800132c:	687b      	ldr	r3, [r7, #4]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001336:	b480      	push	{r7}
 8001338:	b083      	sub	sp, #12
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800133e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001342:	4618      	mov	r0, r3
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr

0800134c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800135c:	605a      	str	r2, [r3, #4]
  return 0;
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr

0800136a <_isatty>:

int _isatty(int file)
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001372:	2301      	movs	r3, #1
}
 8001374:	4618      	mov	r0, r3
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr

0800137e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800137e:	b480      	push	{r7}
 8001380:	b085      	sub	sp, #20
 8001382:	af00      	add	r7, sp, #0
 8001384:	60f8      	str	r0, [r7, #12]
 8001386:	60b9      	str	r1, [r7, #8]
 8001388:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr
	...

08001398 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a0:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <_sbrk+0x5c>)
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <_sbrk+0x60>)
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <_sbrk+0x64>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d102      	bne.n	80013ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <_sbrk+0x64>)
 80013b6:	4a12      	ldr	r2, [pc, #72]	; (8001400 <_sbrk+0x68>)
 80013b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <_sbrk+0x64>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d207      	bcs.n	80013d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c8:	f003 f962 	bl	8004690 <__errno>
 80013cc:	4603      	mov	r3, r0
 80013ce:	220c      	movs	r2, #12
 80013d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
 80013d6:	e009      	b.n	80013ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <_sbrk+0x64>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013de:	4b07      	ldr	r3, [pc, #28]	; (80013fc <_sbrk+0x64>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	4a05      	ldr	r2, [pc, #20]	; (80013fc <_sbrk+0x64>)
 80013e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ea:	68fb      	ldr	r3, [r7, #12]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20005000 	.word	0x20005000
 80013f8:	00000400 	.word	0x00000400
 80013fc:	200002c8 	.word	0x200002c8
 8001400:	20000420 	.word	0x20000420

08001404 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr

08001410 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001410:	f7ff fff8 	bl	8001404 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001414:	480b      	ldr	r0, [pc, #44]	; (8001444 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001416:	490c      	ldr	r1, [pc, #48]	; (8001448 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001418:	4a0c      	ldr	r2, [pc, #48]	; (800144c <LoopFillZerobss+0x16>)
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800141c:	e002      	b.n	8001424 <LoopCopyDataInit>

0800141e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800141e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001422:	3304      	adds	r3, #4

08001424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001428:	d3f9      	bcc.n	800141e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800142a:	4a09      	ldr	r2, [pc, #36]	; (8001450 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800142c:	4c09      	ldr	r4, [pc, #36]	; (8001454 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800142e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001430:	e001      	b.n	8001436 <LoopFillZerobss>

08001432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001434:	3204      	adds	r2, #4

08001436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001438:	d3fb      	bcc.n	8001432 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800143a:	f003 f92f 	bl	800469c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800143e:	f7ff fb71 	bl	8000b24 <main>
  bx lr
 8001442:	4770      	bx	lr
  ldr r0, =_sdata
 8001444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001448:	20000154 	.word	0x20000154
  ldr r2, =_sidata
 800144c:	08004c74 	.word	0x08004c74
  ldr r2, =_sbss
 8001450:	20000154 	.word	0x20000154
  ldr r4, =_ebss
 8001454:	2000041c 	.word	0x2000041c

08001458 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001458:	e7fe      	b.n	8001458 <ADC1_2_IRQHandler>
	...

0800145c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001460:	4b08      	ldr	r3, [pc, #32]	; (8001484 <HAL_Init+0x28>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a07      	ldr	r2, [pc, #28]	; (8001484 <HAL_Init+0x28>)
 8001466:	f043 0310 	orr.w	r3, r3, #16
 800146a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800146c:	2003      	movs	r0, #3
 800146e:	f000 f923 	bl	80016b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001472:	2000      	movs	r0, #0
 8001474:	f000 f808 	bl	8001488 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001478:	f7ff fdb6 	bl	8000fe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40022000 	.word	0x40022000

08001488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <HAL_InitTick+0x54>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <HAL_InitTick+0x58>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	4619      	mov	r1, r3
 800149a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800149e:	fbb3 f3f1 	udiv	r3, r3, r1
 80014a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 f93b 	bl	8001722 <HAL_SYSTICK_Config>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e00e      	b.n	80014d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b0f      	cmp	r3, #15
 80014ba:	d80a      	bhi.n	80014d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014bc:	2200      	movs	r2, #0
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	f04f 30ff 	mov.w	r0, #4294967295
 80014c4:	f000 f903 	bl	80016ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014c8:	4a06      	ldr	r2, [pc, #24]	; (80014e4 <HAL_InitTick+0x5c>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ce:	2300      	movs	r3, #0
 80014d0:	e000      	b.n	80014d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	200000ec 	.word	0x200000ec
 80014e0:	200000f4 	.word	0x200000f4
 80014e4:	200000f0 	.word	0x200000f0

080014e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <HAL_IncTick+0x1c>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b05      	ldr	r3, [pc, #20]	; (8001508 <HAL_IncTick+0x20>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4413      	add	r3, r2
 80014f8:	4a03      	ldr	r2, [pc, #12]	; (8001508 <HAL_IncTick+0x20>)
 80014fa:	6013      	str	r3, [r2, #0]
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr
 8001504:	200000f4 	.word	0x200000f4
 8001508:	200002cc 	.word	0x200002cc

0800150c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return uwTick;
 8001510:	4b02      	ldr	r3, [pc, #8]	; (800151c <HAL_GetTick+0x10>)
 8001512:	681b      	ldr	r3, [r3, #0]
}
 8001514:	4618      	mov	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	200002cc 	.word	0x200002cc

08001520 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <__NVIC_SetPriorityGrouping+0x44>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001536:	68ba      	ldr	r2, [r7, #8]
 8001538:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800153c:	4013      	ands	r3, r2
 800153e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001548:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800154c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001552:	4a04      	ldr	r2, [pc, #16]	; (8001564 <__NVIC_SetPriorityGrouping+0x44>)
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	60d3      	str	r3, [r2, #12]
}
 8001558:	bf00      	nop
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800156c:	4b04      	ldr	r3, [pc, #16]	; (8001580 <__NVIC_GetPriorityGrouping+0x18>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	0a1b      	lsrs	r3, r3, #8
 8001572:	f003 0307 	and.w	r3, r3, #7
}
 8001576:	4618      	mov	r0, r3
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001592:	2b00      	cmp	r3, #0
 8001594:	db0b      	blt.n	80015ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	f003 021f 	and.w	r2, r3, #31
 800159c:	4906      	ldr	r1, [pc, #24]	; (80015b8 <__NVIC_EnableIRQ+0x34>)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	095b      	lsrs	r3, r3, #5
 80015a4:	2001      	movs	r0, #1
 80015a6:	fa00 f202 	lsl.w	r2, r0, r2
 80015aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr
 80015b8:	e000e100 	.word	0xe000e100

080015bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	6039      	str	r1, [r7, #0]
 80015c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	db0a      	blt.n	80015e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	490c      	ldr	r1, [pc, #48]	; (8001608 <__NVIC_SetPriority+0x4c>)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	0112      	lsls	r2, r2, #4
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	440b      	add	r3, r1
 80015e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e4:	e00a      	b.n	80015fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	4908      	ldr	r1, [pc, #32]	; (800160c <__NVIC_SetPriority+0x50>)
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	3b04      	subs	r3, #4
 80015f4:	0112      	lsls	r2, r2, #4
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	440b      	add	r3, r1
 80015fa:	761a      	strb	r2, [r3, #24]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000e100 	.word	0xe000e100
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001610:	b480      	push	{r7}
 8001612:	b089      	sub	sp, #36	; 0x24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f1c3 0307 	rsb	r3, r3, #7
 800162a:	2b04      	cmp	r3, #4
 800162c:	bf28      	it	cs
 800162e:	2304      	movcs	r3, #4
 8001630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3304      	adds	r3, #4
 8001636:	2b06      	cmp	r3, #6
 8001638:	d902      	bls.n	8001640 <NVIC_EncodePriority+0x30>
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3b03      	subs	r3, #3
 800163e:	e000      	b.n	8001642 <NVIC_EncodePriority+0x32>
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	f04f 32ff 	mov.w	r2, #4294967295
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43da      	mvns	r2, r3
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	401a      	ands	r2, r3
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001658:	f04f 31ff 	mov.w	r1, #4294967295
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	43d9      	mvns	r1, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	4313      	orrs	r3, r2
         );
}
 800166a:	4618      	mov	r0, r3
 800166c:	3724      	adds	r7, #36	; 0x24
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr

08001674 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3b01      	subs	r3, #1
 8001680:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001684:	d301      	bcc.n	800168a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001686:	2301      	movs	r3, #1
 8001688:	e00f      	b.n	80016aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800168a:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <SysTick_Config+0x40>)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3b01      	subs	r3, #1
 8001690:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001692:	210f      	movs	r1, #15
 8001694:	f04f 30ff 	mov.w	r0, #4294967295
 8001698:	f7ff ff90 	bl	80015bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800169c:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <SysTick_Config+0x40>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016a2:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <SysTick_Config+0x40>)
 80016a4:	2207      	movs	r2, #7
 80016a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	e000e010 	.word	0xe000e010

080016b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff ff2d 	bl	8001520 <__NVIC_SetPriorityGrouping>
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b086      	sub	sp, #24
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	4603      	mov	r3, r0
 80016d6:	60b9      	str	r1, [r7, #8]
 80016d8:	607a      	str	r2, [r7, #4]
 80016da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016e0:	f7ff ff42 	bl	8001568 <__NVIC_GetPriorityGrouping>
 80016e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	68b9      	ldr	r1, [r7, #8]
 80016ea:	6978      	ldr	r0, [r7, #20]
 80016ec:	f7ff ff90 	bl	8001610 <NVIC_EncodePriority>
 80016f0:	4602      	mov	r2, r0
 80016f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff5f 	bl	80015bc <__NVIC_SetPriority>
}
 80016fe:	bf00      	nop
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	4603      	mov	r3, r0
 800170e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff35 	bl	8001584 <__NVIC_EnableIRQ>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff ffa2 	bl	8001674 <SysTick_Config>
 8001730:	4603      	mov	r3, r0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800173a:	b480      	push	{r7}
 800173c:	b085      	sub	sp, #20
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001742:	2300      	movs	r3, #0
 8001744:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d008      	beq.n	8001764 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2204      	movs	r2, #4
 8001756:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e020      	b.n	80017a6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f022 020e 	bic.w	r2, r2, #14
 8001772:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f022 0201 	bic.w	r2, r2, #1
 8001782:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800178c:	2101      	movs	r1, #1
 800178e:	fa01 f202 	lsl.w	r2, r1, r2
 8001792:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr

080017b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017b8:	2300      	movs	r3, #0
 80017ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d005      	beq.n	80017d4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2204      	movs	r2, #4
 80017cc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	73fb      	strb	r3, [r7, #15]
 80017d2:	e051      	b.n	8001878 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 020e 	bic.w	r2, r2, #14
 80017e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0201 	bic.w	r2, r2, #1
 80017f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a22      	ldr	r2, [pc, #136]	; (8001884 <HAL_DMA_Abort_IT+0xd4>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d029      	beq.n	8001852 <HAL_DMA_Abort_IT+0xa2>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a21      	ldr	r2, [pc, #132]	; (8001888 <HAL_DMA_Abort_IT+0xd8>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d022      	beq.n	800184e <HAL_DMA_Abort_IT+0x9e>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a1f      	ldr	r2, [pc, #124]	; (800188c <HAL_DMA_Abort_IT+0xdc>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d01a      	beq.n	8001848 <HAL_DMA_Abort_IT+0x98>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a1e      	ldr	r2, [pc, #120]	; (8001890 <HAL_DMA_Abort_IT+0xe0>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d012      	beq.n	8001842 <HAL_DMA_Abort_IT+0x92>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a1c      	ldr	r2, [pc, #112]	; (8001894 <HAL_DMA_Abort_IT+0xe4>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d00a      	beq.n	800183c <HAL_DMA_Abort_IT+0x8c>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a1b      	ldr	r2, [pc, #108]	; (8001898 <HAL_DMA_Abort_IT+0xe8>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d102      	bne.n	8001836 <HAL_DMA_Abort_IT+0x86>
 8001830:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001834:	e00e      	b.n	8001854 <HAL_DMA_Abort_IT+0xa4>
 8001836:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800183a:	e00b      	b.n	8001854 <HAL_DMA_Abort_IT+0xa4>
 800183c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001840:	e008      	b.n	8001854 <HAL_DMA_Abort_IT+0xa4>
 8001842:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001846:	e005      	b.n	8001854 <HAL_DMA_Abort_IT+0xa4>
 8001848:	f44f 7380 	mov.w	r3, #256	; 0x100
 800184c:	e002      	b.n	8001854 <HAL_DMA_Abort_IT+0xa4>
 800184e:	2310      	movs	r3, #16
 8001850:	e000      	b.n	8001854 <HAL_DMA_Abort_IT+0xa4>
 8001852:	2301      	movs	r3, #1
 8001854:	4a11      	ldr	r2, [pc, #68]	; (800189c <HAL_DMA_Abort_IT+0xec>)
 8001856:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	4798      	blx	r3
    } 
  }
  return status;
 8001878:	7bfb      	ldrb	r3, [r7, #15]
}
 800187a:	4618      	mov	r0, r3
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40020008 	.word	0x40020008
 8001888:	4002001c 	.word	0x4002001c
 800188c:	40020030 	.word	0x40020030
 8001890:	40020044 	.word	0x40020044
 8001894:	40020058 	.word	0x40020058
 8001898:	4002006c 	.word	0x4002006c
 800189c:	40020000 	.word	0x40020000

080018a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b08b      	sub	sp, #44	; 0x2c
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018aa:	2300      	movs	r3, #0
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018ae:	2300      	movs	r3, #0
 80018b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018b2:	e169      	b.n	8001b88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018b4:	2201      	movs	r2, #1
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	69fa      	ldr	r2, [r7, #28]
 80018c4:	4013      	ands	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	f040 8158 	bne.w	8001b82 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	4a9a      	ldr	r2, [pc, #616]	; (8001b40 <HAL_GPIO_Init+0x2a0>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d05e      	beq.n	800199a <HAL_GPIO_Init+0xfa>
 80018dc:	4a98      	ldr	r2, [pc, #608]	; (8001b40 <HAL_GPIO_Init+0x2a0>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d875      	bhi.n	80019ce <HAL_GPIO_Init+0x12e>
 80018e2:	4a98      	ldr	r2, [pc, #608]	; (8001b44 <HAL_GPIO_Init+0x2a4>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d058      	beq.n	800199a <HAL_GPIO_Init+0xfa>
 80018e8:	4a96      	ldr	r2, [pc, #600]	; (8001b44 <HAL_GPIO_Init+0x2a4>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d86f      	bhi.n	80019ce <HAL_GPIO_Init+0x12e>
 80018ee:	4a96      	ldr	r2, [pc, #600]	; (8001b48 <HAL_GPIO_Init+0x2a8>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d052      	beq.n	800199a <HAL_GPIO_Init+0xfa>
 80018f4:	4a94      	ldr	r2, [pc, #592]	; (8001b48 <HAL_GPIO_Init+0x2a8>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d869      	bhi.n	80019ce <HAL_GPIO_Init+0x12e>
 80018fa:	4a94      	ldr	r2, [pc, #592]	; (8001b4c <HAL_GPIO_Init+0x2ac>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d04c      	beq.n	800199a <HAL_GPIO_Init+0xfa>
 8001900:	4a92      	ldr	r2, [pc, #584]	; (8001b4c <HAL_GPIO_Init+0x2ac>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d863      	bhi.n	80019ce <HAL_GPIO_Init+0x12e>
 8001906:	4a92      	ldr	r2, [pc, #584]	; (8001b50 <HAL_GPIO_Init+0x2b0>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d046      	beq.n	800199a <HAL_GPIO_Init+0xfa>
 800190c:	4a90      	ldr	r2, [pc, #576]	; (8001b50 <HAL_GPIO_Init+0x2b0>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d85d      	bhi.n	80019ce <HAL_GPIO_Init+0x12e>
 8001912:	2b12      	cmp	r3, #18
 8001914:	d82a      	bhi.n	800196c <HAL_GPIO_Init+0xcc>
 8001916:	2b12      	cmp	r3, #18
 8001918:	d859      	bhi.n	80019ce <HAL_GPIO_Init+0x12e>
 800191a:	a201      	add	r2, pc, #4	; (adr r2, 8001920 <HAL_GPIO_Init+0x80>)
 800191c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001920:	0800199b 	.word	0x0800199b
 8001924:	08001975 	.word	0x08001975
 8001928:	08001987 	.word	0x08001987
 800192c:	080019c9 	.word	0x080019c9
 8001930:	080019cf 	.word	0x080019cf
 8001934:	080019cf 	.word	0x080019cf
 8001938:	080019cf 	.word	0x080019cf
 800193c:	080019cf 	.word	0x080019cf
 8001940:	080019cf 	.word	0x080019cf
 8001944:	080019cf 	.word	0x080019cf
 8001948:	080019cf 	.word	0x080019cf
 800194c:	080019cf 	.word	0x080019cf
 8001950:	080019cf 	.word	0x080019cf
 8001954:	080019cf 	.word	0x080019cf
 8001958:	080019cf 	.word	0x080019cf
 800195c:	080019cf 	.word	0x080019cf
 8001960:	080019cf 	.word	0x080019cf
 8001964:	0800197d 	.word	0x0800197d
 8001968:	08001991 	.word	0x08001991
 800196c:	4a79      	ldr	r2, [pc, #484]	; (8001b54 <HAL_GPIO_Init+0x2b4>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d013      	beq.n	800199a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001972:	e02c      	b.n	80019ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	623b      	str	r3, [r7, #32]
          break;
 800197a:	e029      	b.n	80019d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	3304      	adds	r3, #4
 8001982:	623b      	str	r3, [r7, #32]
          break;
 8001984:	e024      	b.n	80019d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	3308      	adds	r3, #8
 800198c:	623b      	str	r3, [r7, #32]
          break;
 800198e:	e01f      	b.n	80019d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	330c      	adds	r3, #12
 8001996:	623b      	str	r3, [r7, #32]
          break;
 8001998:	e01a      	b.n	80019d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d102      	bne.n	80019a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019a2:	2304      	movs	r3, #4
 80019a4:	623b      	str	r3, [r7, #32]
          break;
 80019a6:	e013      	b.n	80019d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d105      	bne.n	80019bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019b0:	2308      	movs	r3, #8
 80019b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69fa      	ldr	r2, [r7, #28]
 80019b8:	611a      	str	r2, [r3, #16]
          break;
 80019ba:	e009      	b.n	80019d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019bc:	2308      	movs	r3, #8
 80019be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	69fa      	ldr	r2, [r7, #28]
 80019c4:	615a      	str	r2, [r3, #20]
          break;
 80019c6:	e003      	b.n	80019d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019c8:	2300      	movs	r3, #0
 80019ca:	623b      	str	r3, [r7, #32]
          break;
 80019cc:	e000      	b.n	80019d0 <HAL_GPIO_Init+0x130>
          break;
 80019ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	2bff      	cmp	r3, #255	; 0xff
 80019d4:	d801      	bhi.n	80019da <HAL_GPIO_Init+0x13a>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	e001      	b.n	80019de <HAL_GPIO_Init+0x13e>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	3304      	adds	r3, #4
 80019de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	2bff      	cmp	r3, #255	; 0xff
 80019e4:	d802      	bhi.n	80019ec <HAL_GPIO_Init+0x14c>
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	e002      	b.n	80019f2 <HAL_GPIO_Init+0x152>
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	3b08      	subs	r3, #8
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	210f      	movs	r1, #15
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	401a      	ands	r2, r3
 8001a04:	6a39      	ldr	r1, [r7, #32]
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f000 80b1 	beq.w	8001b82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a20:	4b4d      	ldr	r3, [pc, #308]	; (8001b58 <HAL_GPIO_Init+0x2b8>)
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	4a4c      	ldr	r2, [pc, #304]	; (8001b58 <HAL_GPIO_Init+0x2b8>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	6193      	str	r3, [r2, #24]
 8001a2c:	4b4a      	ldr	r3, [pc, #296]	; (8001b58 <HAL_GPIO_Init+0x2b8>)
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	60bb      	str	r3, [r7, #8]
 8001a36:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a38:	4a48      	ldr	r2, [pc, #288]	; (8001b5c <HAL_GPIO_Init+0x2bc>)
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	089b      	lsrs	r3, r3, #2
 8001a3e:	3302      	adds	r3, #2
 8001a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a44:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	220f      	movs	r2, #15
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a40      	ldr	r2, [pc, #256]	; (8001b60 <HAL_GPIO_Init+0x2c0>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d013      	beq.n	8001a8c <HAL_GPIO_Init+0x1ec>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a3f      	ldr	r2, [pc, #252]	; (8001b64 <HAL_GPIO_Init+0x2c4>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d00d      	beq.n	8001a88 <HAL_GPIO_Init+0x1e8>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a3e      	ldr	r2, [pc, #248]	; (8001b68 <HAL_GPIO_Init+0x2c8>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d007      	beq.n	8001a84 <HAL_GPIO_Init+0x1e4>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a3d      	ldr	r2, [pc, #244]	; (8001b6c <HAL_GPIO_Init+0x2cc>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d101      	bne.n	8001a80 <HAL_GPIO_Init+0x1e0>
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e006      	b.n	8001a8e <HAL_GPIO_Init+0x1ee>
 8001a80:	2304      	movs	r3, #4
 8001a82:	e004      	b.n	8001a8e <HAL_GPIO_Init+0x1ee>
 8001a84:	2302      	movs	r3, #2
 8001a86:	e002      	b.n	8001a8e <HAL_GPIO_Init+0x1ee>
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e000      	b.n	8001a8e <HAL_GPIO_Init+0x1ee>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a90:	f002 0203 	and.w	r2, r2, #3
 8001a94:	0092      	lsls	r2, r2, #2
 8001a96:	4093      	lsls	r3, r2
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a9e:	492f      	ldr	r1, [pc, #188]	; (8001b5c <HAL_GPIO_Init+0x2bc>)
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	089b      	lsrs	r3, r3, #2
 8001aa4:	3302      	adds	r3, #2
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d006      	beq.n	8001ac6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ab8:	4b2d      	ldr	r3, [pc, #180]	; (8001b70 <HAL_GPIO_Init+0x2d0>)
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	492c      	ldr	r1, [pc, #176]	; (8001b70 <HAL_GPIO_Init+0x2d0>)
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	608b      	str	r3, [r1, #8]
 8001ac4:	e006      	b.n	8001ad4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ac6:	4b2a      	ldr	r3, [pc, #168]	; (8001b70 <HAL_GPIO_Init+0x2d0>)
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	43db      	mvns	r3, r3
 8001ace:	4928      	ldr	r1, [pc, #160]	; (8001b70 <HAL_GPIO_Init+0x2d0>)
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d006      	beq.n	8001aee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ae0:	4b23      	ldr	r3, [pc, #140]	; (8001b70 <HAL_GPIO_Init+0x2d0>)
 8001ae2:	68da      	ldr	r2, [r3, #12]
 8001ae4:	4922      	ldr	r1, [pc, #136]	; (8001b70 <HAL_GPIO_Init+0x2d0>)
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	60cb      	str	r3, [r1, #12]
 8001aec:	e006      	b.n	8001afc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001aee:	4b20      	ldr	r3, [pc, #128]	; (8001b70 <HAL_GPIO_Init+0x2d0>)
 8001af0:	68da      	ldr	r2, [r3, #12]
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	43db      	mvns	r3, r3
 8001af6:	491e      	ldr	r1, [pc, #120]	; (8001b70 <HAL_GPIO_Init+0x2d0>)
 8001af8:	4013      	ands	r3, r2
 8001afa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d006      	beq.n	8001b16 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b08:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <HAL_GPIO_Init+0x2d0>)
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	4918      	ldr	r1, [pc, #96]	; (8001b70 <HAL_GPIO_Init+0x2d0>)
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	604b      	str	r3, [r1, #4]
 8001b14:	e006      	b.n	8001b24 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b16:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <HAL_GPIO_Init+0x2d0>)
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	4914      	ldr	r1, [pc, #80]	; (8001b70 <HAL_GPIO_Init+0x2d0>)
 8001b20:	4013      	ands	r3, r2
 8001b22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d021      	beq.n	8001b74 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b30:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <HAL_GPIO_Init+0x2d0>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	490e      	ldr	r1, [pc, #56]	; (8001b70 <HAL_GPIO_Init+0x2d0>)
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	600b      	str	r3, [r1, #0]
 8001b3c:	e021      	b.n	8001b82 <HAL_GPIO_Init+0x2e2>
 8001b3e:	bf00      	nop
 8001b40:	10320000 	.word	0x10320000
 8001b44:	10310000 	.word	0x10310000
 8001b48:	10220000 	.word	0x10220000
 8001b4c:	10210000 	.word	0x10210000
 8001b50:	10120000 	.word	0x10120000
 8001b54:	10110000 	.word	0x10110000
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	40010000 	.word	0x40010000
 8001b60:	40010800 	.word	0x40010800
 8001b64:	40010c00 	.word	0x40010c00
 8001b68:	40011000 	.word	0x40011000
 8001b6c:	40011400 	.word	0x40011400
 8001b70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b74:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <HAL_GPIO_Init+0x304>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	4909      	ldr	r1, [pc, #36]	; (8001ba4 <HAL_GPIO_Init+0x304>)
 8001b7e:	4013      	ands	r3, r2
 8001b80:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	3301      	adds	r3, #1
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f47f ae8e 	bne.w	80018b4 <HAL_GPIO_Init+0x14>
  }
}
 8001b98:	bf00      	nop
 8001b9a:	bf00      	nop
 8001b9c:	372c      	adds	r7, #44	; 0x2c
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr
 8001ba4:	40010400 	.word	0x40010400

08001ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	807b      	strh	r3, [r7, #2]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bb8:	787b      	ldrb	r3, [r7, #1]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bbe:	887a      	ldrh	r2, [r7, #2]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bc4:	e003      	b.n	8001bce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bc6:	887b      	ldrh	r3, [r7, #2]
 8001bc8:	041a      	lsls	r2, r3, #16
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	611a      	str	r2, [r3, #16]
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001be2:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001be4:	695a      	ldr	r2, [r3, #20]
 8001be6:	88fb      	ldrh	r3, [r7, #6]
 8001be8:	4013      	ands	r3, r2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d006      	beq.n	8001bfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bee:	4a05      	ldr	r2, [pc, #20]	; (8001c04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bf0:	88fb      	ldrh	r3, [r7, #6]
 8001bf2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bf4:	88fb      	ldrh	r3, [r7, #6]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe fed2 	bl	80009a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40010400 	.word	0x40010400

08001c08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e272      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 8087 	beq.w	8001d36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c28:	4b92      	ldr	r3, [pc, #584]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 030c 	and.w	r3, r3, #12
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d00c      	beq.n	8001c4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c34:	4b8f      	ldr	r3, [pc, #572]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 030c 	and.w	r3, r3, #12
 8001c3c:	2b08      	cmp	r3, #8
 8001c3e:	d112      	bne.n	8001c66 <HAL_RCC_OscConfig+0x5e>
 8001c40:	4b8c      	ldr	r3, [pc, #560]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c4c:	d10b      	bne.n	8001c66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4e:	4b89      	ldr	r3, [pc, #548]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d06c      	beq.n	8001d34 <HAL_RCC_OscConfig+0x12c>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d168      	bne.n	8001d34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e24c      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c6e:	d106      	bne.n	8001c7e <HAL_RCC_OscConfig+0x76>
 8001c70:	4b80      	ldr	r3, [pc, #512]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a7f      	ldr	r2, [pc, #508]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	e02e      	b.n	8001cdc <HAL_RCC_OscConfig+0xd4>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10c      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x98>
 8001c86:	4b7b      	ldr	r3, [pc, #492]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a7a      	ldr	r2, [pc, #488]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	4b78      	ldr	r3, [pc, #480]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a77      	ldr	r2, [pc, #476]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e01d      	b.n	8001cdc <HAL_RCC_OscConfig+0xd4>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ca8:	d10c      	bne.n	8001cc4 <HAL_RCC_OscConfig+0xbc>
 8001caa:	4b72      	ldr	r3, [pc, #456]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a71      	ldr	r2, [pc, #452]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	4b6f      	ldr	r3, [pc, #444]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a6e      	ldr	r2, [pc, #440]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	e00b      	b.n	8001cdc <HAL_RCC_OscConfig+0xd4>
 8001cc4:	4b6b      	ldr	r3, [pc, #428]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a6a      	ldr	r2, [pc, #424]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cce:	6013      	str	r3, [r2, #0]
 8001cd0:	4b68      	ldr	r3, [pc, #416]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a67      	ldr	r2, [pc, #412]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d013      	beq.n	8001d0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce4:	f7ff fc12 	bl	800150c <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cec:	f7ff fc0e 	bl	800150c <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b64      	cmp	r3, #100	; 0x64
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e200      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfe:	4b5d      	ldr	r3, [pc, #372]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0xe4>
 8001d0a:	e014      	b.n	8001d36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0c:	f7ff fbfe 	bl	800150c <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d14:	f7ff fbfa 	bl	800150c <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b64      	cmp	r3, #100	; 0x64
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e1ec      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d26:	4b53      	ldr	r3, [pc, #332]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f0      	bne.n	8001d14 <HAL_RCC_OscConfig+0x10c>
 8001d32:	e000      	b.n	8001d36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d063      	beq.n	8001e0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d42:	4b4c      	ldr	r3, [pc, #304]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f003 030c 	and.w	r3, r3, #12
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00b      	beq.n	8001d66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d4e:	4b49      	ldr	r3, [pc, #292]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 030c 	and.w	r3, r3, #12
 8001d56:	2b08      	cmp	r3, #8
 8001d58:	d11c      	bne.n	8001d94 <HAL_RCC_OscConfig+0x18c>
 8001d5a:	4b46      	ldr	r3, [pc, #280]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d116      	bne.n	8001d94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d66:	4b43      	ldr	r3, [pc, #268]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d005      	beq.n	8001d7e <HAL_RCC_OscConfig+0x176>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d001      	beq.n	8001d7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e1c0      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7e:	4b3d      	ldr	r3, [pc, #244]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	4939      	ldr	r1, [pc, #228]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d92:	e03a      	b.n	8001e0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d020      	beq.n	8001dde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d9c:	4b36      	ldr	r3, [pc, #216]	; (8001e78 <HAL_RCC_OscConfig+0x270>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da2:	f7ff fbb3 	bl	800150c <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001daa:	f7ff fbaf 	bl	800150c <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e1a1      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dbc:	4b2d      	ldr	r3, [pc, #180]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0f0      	beq.n	8001daa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc8:	4b2a      	ldr	r3, [pc, #168]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	4927      	ldr	r1, [pc, #156]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	600b      	str	r3, [r1, #0]
 8001ddc:	e015      	b.n	8001e0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dde:	4b26      	ldr	r3, [pc, #152]	; (8001e78 <HAL_RCC_OscConfig+0x270>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de4:	f7ff fb92 	bl	800150c <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dec:	f7ff fb8e 	bl	800150c <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e180      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfe:	4b1d      	ldr	r3, [pc, #116]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d03a      	beq.n	8001e8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d019      	beq.n	8001e52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e1e:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <HAL_RCC_OscConfig+0x274>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e24:	f7ff fb72 	bl	800150c <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e2c:	f7ff fb6e 	bl	800150c <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e160      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3e:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e4a:	2001      	movs	r0, #1
 8001e4c:	f000 face 	bl	80023ec <RCC_Delay>
 8001e50:	e01c      	b.n	8001e8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e52:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <HAL_RCC_OscConfig+0x274>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e58:	f7ff fb58 	bl	800150c <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e5e:	e00f      	b.n	8001e80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e60:	f7ff fb54 	bl	800150c <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d908      	bls.n	8001e80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e146      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
 8001e72:	bf00      	nop
 8001e74:	40021000 	.word	0x40021000
 8001e78:	42420000 	.word	0x42420000
 8001e7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e80:	4b92      	ldr	r3, [pc, #584]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1e9      	bne.n	8001e60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 80a6 	beq.w	8001fe6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e9e:	4b8b      	ldr	r3, [pc, #556]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10d      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eaa:	4b88      	ldr	r3, [pc, #544]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	4a87      	ldr	r2, [pc, #540]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	61d3      	str	r3, [r2, #28]
 8001eb6:	4b85      	ldr	r3, [pc, #532]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec6:	4b82      	ldr	r3, [pc, #520]	; (80020d0 <HAL_RCC_OscConfig+0x4c8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d118      	bne.n	8001f04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ed2:	4b7f      	ldr	r3, [pc, #508]	; (80020d0 <HAL_RCC_OscConfig+0x4c8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a7e      	ldr	r2, [pc, #504]	; (80020d0 <HAL_RCC_OscConfig+0x4c8>)
 8001ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ede:	f7ff fb15 	bl	800150c <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee6:	f7ff fb11 	bl	800150c <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b64      	cmp	r3, #100	; 0x64
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e103      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef8:	4b75      	ldr	r3, [pc, #468]	; (80020d0 <HAL_RCC_OscConfig+0x4c8>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0f0      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d106      	bne.n	8001f1a <HAL_RCC_OscConfig+0x312>
 8001f0c:	4b6f      	ldr	r3, [pc, #444]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	4a6e      	ldr	r2, [pc, #440]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	6213      	str	r3, [r2, #32]
 8001f18:	e02d      	b.n	8001f76 <HAL_RCC_OscConfig+0x36e>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10c      	bne.n	8001f3c <HAL_RCC_OscConfig+0x334>
 8001f22:	4b6a      	ldr	r3, [pc, #424]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	4a69      	ldr	r2, [pc, #420]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f28:	f023 0301 	bic.w	r3, r3, #1
 8001f2c:	6213      	str	r3, [r2, #32]
 8001f2e:	4b67      	ldr	r3, [pc, #412]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	4a66      	ldr	r2, [pc, #408]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f34:	f023 0304 	bic.w	r3, r3, #4
 8001f38:	6213      	str	r3, [r2, #32]
 8001f3a:	e01c      	b.n	8001f76 <HAL_RCC_OscConfig+0x36e>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	2b05      	cmp	r3, #5
 8001f42:	d10c      	bne.n	8001f5e <HAL_RCC_OscConfig+0x356>
 8001f44:	4b61      	ldr	r3, [pc, #388]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	4a60      	ldr	r2, [pc, #384]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f4a:	f043 0304 	orr.w	r3, r3, #4
 8001f4e:	6213      	str	r3, [r2, #32]
 8001f50:	4b5e      	ldr	r3, [pc, #376]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	4a5d      	ldr	r2, [pc, #372]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	6213      	str	r3, [r2, #32]
 8001f5c:	e00b      	b.n	8001f76 <HAL_RCC_OscConfig+0x36e>
 8001f5e:	4b5b      	ldr	r3, [pc, #364]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	4a5a      	ldr	r2, [pc, #360]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f64:	f023 0301 	bic.w	r3, r3, #1
 8001f68:	6213      	str	r3, [r2, #32]
 8001f6a:	4b58      	ldr	r3, [pc, #352]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	4a57      	ldr	r2, [pc, #348]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f70:	f023 0304 	bic.w	r3, r3, #4
 8001f74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d015      	beq.n	8001faa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7e:	f7ff fac5 	bl	800150c <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f84:	e00a      	b.n	8001f9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f86:	f7ff fac1 	bl	800150c <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e0b1      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9c:	4b4b      	ldr	r3, [pc, #300]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0ee      	beq.n	8001f86 <HAL_RCC_OscConfig+0x37e>
 8001fa8:	e014      	b.n	8001fd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001faa:	f7ff faaf 	bl	800150c <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb0:	e00a      	b.n	8001fc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb2:	f7ff faab 	bl	800150c <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e09b      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc8:	4b40      	ldr	r3, [pc, #256]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1ee      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fd4:	7dfb      	ldrb	r3, [r7, #23]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d105      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fda:	4b3c      	ldr	r3, [pc, #240]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	4a3b      	ldr	r2, [pc, #236]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fe4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 8087 	beq.w	80020fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ff0:	4b36      	ldr	r3, [pc, #216]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 030c 	and.w	r3, r3, #12
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d061      	beq.n	80020c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	2b02      	cmp	r3, #2
 8002002:	d146      	bne.n	8002092 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002004:	4b33      	ldr	r3, [pc, #204]	; (80020d4 <HAL_RCC_OscConfig+0x4cc>)
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200a:	f7ff fa7f 	bl	800150c <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002012:	f7ff fa7b 	bl	800150c <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e06d      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002024:	4b29      	ldr	r3, [pc, #164]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1f0      	bne.n	8002012 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002038:	d108      	bne.n	800204c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800203a:	4b24      	ldr	r3, [pc, #144]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	4921      	ldr	r1, [pc, #132]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8002048:	4313      	orrs	r3, r2
 800204a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800204c:	4b1f      	ldr	r3, [pc, #124]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a19      	ldr	r1, [r3, #32]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205c:	430b      	orrs	r3, r1
 800205e:	491b      	ldr	r1, [pc, #108]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8002060:	4313      	orrs	r3, r2
 8002062:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002064:	4b1b      	ldr	r3, [pc, #108]	; (80020d4 <HAL_RCC_OscConfig+0x4cc>)
 8002066:	2201      	movs	r2, #1
 8002068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206a:	f7ff fa4f 	bl	800150c <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002072:	f7ff fa4b 	bl	800150c <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e03d      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002084:	4b11      	ldr	r3, [pc, #68]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f0      	beq.n	8002072 <HAL_RCC_OscConfig+0x46a>
 8002090:	e035      	b.n	80020fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002092:	4b10      	ldr	r3, [pc, #64]	; (80020d4 <HAL_RCC_OscConfig+0x4cc>)
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002098:	f7ff fa38 	bl	800150c <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a0:	f7ff fa34 	bl	800150c <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e026      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b2:	4b06      	ldr	r3, [pc, #24]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x498>
 80020be:	e01e      	b.n	80020fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d107      	bne.n	80020d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e019      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
 80020cc:	40021000 	.word	0x40021000
 80020d0:	40007000 	.word	0x40007000
 80020d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020d8:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <HAL_RCC_OscConfig+0x500>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d106      	bne.n	80020fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d001      	beq.n	80020fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40021000 	.word	0x40021000

0800210c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0d0      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002120:	4b6a      	ldr	r3, [pc, #424]	; (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d910      	bls.n	8002150 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212e:	4b67      	ldr	r3, [pc, #412]	; (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f023 0207 	bic.w	r2, r3, #7
 8002136:	4965      	ldr	r1, [pc, #404]	; (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	4313      	orrs	r3, r2
 800213c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800213e:	4b63      	ldr	r3, [pc, #396]	; (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d001      	beq.n	8002150 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e0b8      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d020      	beq.n	800219e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b00      	cmp	r3, #0
 8002166:	d005      	beq.n	8002174 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002168:	4b59      	ldr	r3, [pc, #356]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	4a58      	ldr	r2, [pc, #352]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 800216e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002172:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	2b00      	cmp	r3, #0
 800217e:	d005      	beq.n	800218c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002180:	4b53      	ldr	r3, [pc, #332]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	4a52      	ldr	r2, [pc, #328]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002186:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800218a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800218c:	4b50      	ldr	r3, [pc, #320]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	494d      	ldr	r1, [pc, #308]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 800219a:	4313      	orrs	r3, r2
 800219c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d040      	beq.n	800222c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d107      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b2:	4b47      	ldr	r3, [pc, #284]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d115      	bne.n	80021ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e07f      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d107      	bne.n	80021da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ca:	4b41      	ldr	r3, [pc, #260]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d109      	bne.n	80021ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e073      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021da:	4b3d      	ldr	r3, [pc, #244]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e06b      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ea:	4b39      	ldr	r3, [pc, #228]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f023 0203 	bic.w	r2, r3, #3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	4936      	ldr	r1, [pc, #216]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021fc:	f7ff f986 	bl	800150c <HAL_GetTick>
 8002200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002202:	e00a      	b.n	800221a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002204:	f7ff f982 	bl	800150c <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002212:	4293      	cmp	r3, r2
 8002214:	d901      	bls.n	800221a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e053      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221a:	4b2d      	ldr	r3, [pc, #180]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 020c 	and.w	r2, r3, #12
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	429a      	cmp	r2, r3
 800222a:	d1eb      	bne.n	8002204 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800222c:	4b27      	ldr	r3, [pc, #156]	; (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d210      	bcs.n	800225c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223a:	4b24      	ldr	r3, [pc, #144]	; (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f023 0207 	bic.w	r2, r3, #7
 8002242:	4922      	ldr	r1, [pc, #136]	; (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	4313      	orrs	r3, r2
 8002248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800224a:	4b20      	ldr	r3, [pc, #128]	; (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d001      	beq.n	800225c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e032      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b00      	cmp	r3, #0
 8002266:	d008      	beq.n	800227a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002268:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	4916      	ldr	r1, [pc, #88]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002276:	4313      	orrs	r3, r2
 8002278:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b00      	cmp	r3, #0
 8002284:	d009      	beq.n	800229a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002286:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	490e      	ldr	r1, [pc, #56]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002296:	4313      	orrs	r3, r2
 8002298:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800229a:	f000 f821 	bl	80022e0 <HAL_RCC_GetSysClockFreq>
 800229e:	4602      	mov	r2, r0
 80022a0:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	091b      	lsrs	r3, r3, #4
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	490a      	ldr	r1, [pc, #40]	; (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 80022ac:	5ccb      	ldrb	r3, [r1, r3]
 80022ae:	fa22 f303 	lsr.w	r3, r2, r3
 80022b2:	4a09      	ldr	r2, [pc, #36]	; (80022d8 <HAL_RCC_ClockConfig+0x1cc>)
 80022b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022b6:	4b09      	ldr	r3, [pc, #36]	; (80022dc <HAL_RCC_ClockConfig+0x1d0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff f8e4 	bl	8001488 <HAL_InitTick>

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40022000 	.word	0x40022000
 80022d0:	40021000 	.word	0x40021000
 80022d4:	08004c40 	.word	0x08004c40
 80022d8:	200000ec 	.word	0x200000ec
 80022dc:	200000f0 	.word	0x200000f0

080022e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b087      	sub	sp, #28
 80022e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	2300      	movs	r3, #0
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	2300      	movs	r3, #0
 80022f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022fa:	4b1e      	ldr	r3, [pc, #120]	; (8002374 <HAL_RCC_GetSysClockFreq+0x94>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b04      	cmp	r3, #4
 8002308:	d002      	beq.n	8002310 <HAL_RCC_GetSysClockFreq+0x30>
 800230a:	2b08      	cmp	r3, #8
 800230c:	d003      	beq.n	8002316 <HAL_RCC_GetSysClockFreq+0x36>
 800230e:	e027      	b.n	8002360 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002310:	4b19      	ldr	r3, [pc, #100]	; (8002378 <HAL_RCC_GetSysClockFreq+0x98>)
 8002312:	613b      	str	r3, [r7, #16]
      break;
 8002314:	e027      	b.n	8002366 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	0c9b      	lsrs	r3, r3, #18
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	4a17      	ldr	r2, [pc, #92]	; (800237c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002320:	5cd3      	ldrb	r3, [r2, r3]
 8002322:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d010      	beq.n	8002350 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800232e:	4b11      	ldr	r3, [pc, #68]	; (8002374 <HAL_RCC_GetSysClockFreq+0x94>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	0c5b      	lsrs	r3, r3, #17
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	4a11      	ldr	r2, [pc, #68]	; (8002380 <HAL_RCC_GetSysClockFreq+0xa0>)
 800233a:	5cd3      	ldrb	r3, [r2, r3]
 800233c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a0d      	ldr	r2, [pc, #52]	; (8002378 <HAL_RCC_GetSysClockFreq+0x98>)
 8002342:	fb03 f202 	mul.w	r2, r3, r2
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	fbb2 f3f3 	udiv	r3, r2, r3
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	e004      	b.n	800235a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a0c      	ldr	r2, [pc, #48]	; (8002384 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002354:	fb02 f303 	mul.w	r3, r2, r3
 8002358:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	613b      	str	r3, [r7, #16]
      break;
 800235e:	e002      	b.n	8002366 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002360:	4b05      	ldr	r3, [pc, #20]	; (8002378 <HAL_RCC_GetSysClockFreq+0x98>)
 8002362:	613b      	str	r3, [r7, #16]
      break;
 8002364:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002366:	693b      	ldr	r3, [r7, #16]
}
 8002368:	4618      	mov	r0, r3
 800236a:	371c      	adds	r7, #28
 800236c:	46bd      	mov	sp, r7
 800236e:	bc80      	pop	{r7}
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	40021000 	.word	0x40021000
 8002378:	007a1200 	.word	0x007a1200
 800237c:	08004c58 	.word	0x08004c58
 8002380:	08004c68 	.word	0x08004c68
 8002384:	003d0900 	.word	0x003d0900

08002388 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800238c:	4b02      	ldr	r3, [pc, #8]	; (8002398 <HAL_RCC_GetHCLKFreq+0x10>)
 800238e:	681b      	ldr	r3, [r3, #0]
}
 8002390:	4618      	mov	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr
 8002398:	200000ec 	.word	0x200000ec

0800239c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023a0:	f7ff fff2 	bl	8002388 <HAL_RCC_GetHCLKFreq>
 80023a4:	4602      	mov	r2, r0
 80023a6:	4b05      	ldr	r3, [pc, #20]	; (80023bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	0a1b      	lsrs	r3, r3, #8
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	4903      	ldr	r1, [pc, #12]	; (80023c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023b2:	5ccb      	ldrb	r3, [r1, r3]
 80023b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40021000 	.word	0x40021000
 80023c0:	08004c50 	.word	0x08004c50

080023c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023c8:	f7ff ffde 	bl	8002388 <HAL_RCC_GetHCLKFreq>
 80023cc:	4602      	mov	r2, r0
 80023ce:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	0adb      	lsrs	r3, r3, #11
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	4903      	ldr	r1, [pc, #12]	; (80023e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023da:	5ccb      	ldrb	r3, [r1, r3]
 80023dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40021000 	.word	0x40021000
 80023e8:	08004c50 	.word	0x08004c50

080023ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023f4:	4b0a      	ldr	r3, [pc, #40]	; (8002420 <RCC_Delay+0x34>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a0a      	ldr	r2, [pc, #40]	; (8002424 <RCC_Delay+0x38>)
 80023fa:	fba2 2303 	umull	r2, r3, r2, r3
 80023fe:	0a5b      	lsrs	r3, r3, #9
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	fb02 f303 	mul.w	r3, r2, r3
 8002406:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002408:	bf00      	nop
  }
  while (Delay --);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	1e5a      	subs	r2, r3, #1
 800240e:	60fa      	str	r2, [r7, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1f9      	bne.n	8002408 <RCC_Delay+0x1c>
}
 8002414:	bf00      	nop
 8002416:	bf00      	nop
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr
 8002420:	200000ec 	.word	0x200000ec
 8002424:	10624dd3 	.word	0x10624dd3

08002428 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e041      	b.n	80024be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d106      	bne.n	8002454 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7fe fdfc 	bl	800104c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3304      	adds	r3, #4
 8002464:	4619      	mov	r1, r3
 8002466:	4610      	mov	r0, r2
 8002468:	f000 fd30 	bl	8002ecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d001      	beq.n	80024e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e03a      	b.n	8002556 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2202      	movs	r2, #2
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0201 	orr.w	r2, r2, #1
 80024f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a18      	ldr	r2, [pc, #96]	; (8002560 <HAL_TIM_Base_Start_IT+0x98>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d00e      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x58>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800250a:	d009      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x58>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a14      	ldr	r2, [pc, #80]	; (8002564 <HAL_TIM_Base_Start_IT+0x9c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d004      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x58>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a13      	ldr	r2, [pc, #76]	; (8002568 <HAL_TIM_Base_Start_IT+0xa0>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d111      	bne.n	8002544 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2b06      	cmp	r3, #6
 8002530:	d010      	beq.n	8002554 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f042 0201 	orr.w	r2, r2, #1
 8002540:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002542:	e007      	b.n	8002554 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0201 	orr.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr
 8002560:	40012c00 	.word	0x40012c00
 8002564:	40000400 	.word	0x40000400
 8002568:	40000800 	.word	0x40000800

0800256c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e041      	b.n	8002602 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d106      	bne.n	8002598 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f839 	bl	800260a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2202      	movs	r2, #2
 800259c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3304      	adds	r3, #4
 80025a8:	4619      	mov	r1, r3
 80025aa:	4610      	mov	r0, r2
 80025ac:	f000 fc8e 	bl	8002ecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr

0800261c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d109      	bne.n	8002644 <HAL_TIM_PWM_Start_IT+0x28>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b01      	cmp	r3, #1
 800263a:	bf14      	ite	ne
 800263c:	2301      	movne	r3, #1
 800263e:	2300      	moveq	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	e022      	b.n	800268a <HAL_TIM_PWM_Start_IT+0x6e>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	2b04      	cmp	r3, #4
 8002648:	d109      	bne.n	800265e <HAL_TIM_PWM_Start_IT+0x42>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b01      	cmp	r3, #1
 8002654:	bf14      	ite	ne
 8002656:	2301      	movne	r3, #1
 8002658:	2300      	moveq	r3, #0
 800265a:	b2db      	uxtb	r3, r3
 800265c:	e015      	b.n	800268a <HAL_TIM_PWM_Start_IT+0x6e>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	2b08      	cmp	r3, #8
 8002662:	d109      	bne.n	8002678 <HAL_TIM_PWM_Start_IT+0x5c>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b01      	cmp	r3, #1
 800266e:	bf14      	ite	ne
 8002670:	2301      	movne	r3, #1
 8002672:	2300      	moveq	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	e008      	b.n	800268a <HAL_TIM_PWM_Start_IT+0x6e>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b01      	cmp	r3, #1
 8002682:	bf14      	ite	ne
 8002684:	2301      	movne	r3, #1
 8002686:	2300      	moveq	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e0a9      	b.n	80027e6 <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d104      	bne.n	80026a2 <HAL_TIM_PWM_Start_IT+0x86>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2202      	movs	r2, #2
 800269c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026a0:	e013      	b.n	80026ca <HAL_TIM_PWM_Start_IT+0xae>
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	d104      	bne.n	80026b2 <HAL_TIM_PWM_Start_IT+0x96>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2202      	movs	r2, #2
 80026ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026b0:	e00b      	b.n	80026ca <HAL_TIM_PWM_Start_IT+0xae>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	d104      	bne.n	80026c2 <HAL_TIM_PWM_Start_IT+0xa6>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2202      	movs	r2, #2
 80026bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026c0:	e003      	b.n	80026ca <HAL_TIM_PWM_Start_IT+0xae>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2202      	movs	r2, #2
 80026c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	2b0c      	cmp	r3, #12
 80026ce:	d841      	bhi.n	8002754 <HAL_TIM_PWM_Start_IT+0x138>
 80026d0:	a201      	add	r2, pc, #4	; (adr r2, 80026d8 <HAL_TIM_PWM_Start_IT+0xbc>)
 80026d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d6:	bf00      	nop
 80026d8:	0800270d 	.word	0x0800270d
 80026dc:	08002755 	.word	0x08002755
 80026e0:	08002755 	.word	0x08002755
 80026e4:	08002755 	.word	0x08002755
 80026e8:	0800271f 	.word	0x0800271f
 80026ec:	08002755 	.word	0x08002755
 80026f0:	08002755 	.word	0x08002755
 80026f4:	08002755 	.word	0x08002755
 80026f8:	08002731 	.word	0x08002731
 80026fc:	08002755 	.word	0x08002755
 8002700:	08002755 	.word	0x08002755
 8002704:	08002755 	.word	0x08002755
 8002708:	08002743 	.word	0x08002743
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0202 	orr.w	r2, r2, #2
 800271a:	60da      	str	r2, [r3, #12]
      break;
 800271c:	e01d      	b.n	800275a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68da      	ldr	r2, [r3, #12]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f042 0204 	orr.w	r2, r2, #4
 800272c:	60da      	str	r2, [r3, #12]
      break;
 800272e:	e014      	b.n	800275a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0208 	orr.w	r2, r2, #8
 800273e:	60da      	str	r2, [r3, #12]
      break;
 8002740:	e00b      	b.n	800275a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68da      	ldr	r2, [r3, #12]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f042 0210 	orr.w	r2, r2, #16
 8002750:	60da      	str	r2, [r3, #12]
      break;
 8002752:	e002      	b.n	800275a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	73fb      	strb	r3, [r7, #15]
      break;
 8002758:	bf00      	nop
  }

  if (status == HAL_OK)
 800275a:	7bfb      	ldrb	r3, [r7, #15]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d141      	bne.n	80027e4 <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2201      	movs	r2, #1
 8002766:	6839      	ldr	r1, [r7, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f000 fe2f 	bl	80033cc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a1f      	ldr	r2, [pc, #124]	; (80027f0 <HAL_TIM_PWM_Start_IT+0x1d4>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d107      	bne.n	8002788 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002786:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a18      	ldr	r2, [pc, #96]	; (80027f0 <HAL_TIM_PWM_Start_IT+0x1d4>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d00e      	beq.n	80027b0 <HAL_TIM_PWM_Start_IT+0x194>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800279a:	d009      	beq.n	80027b0 <HAL_TIM_PWM_Start_IT+0x194>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a14      	ldr	r2, [pc, #80]	; (80027f4 <HAL_TIM_PWM_Start_IT+0x1d8>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d004      	beq.n	80027b0 <HAL_TIM_PWM_Start_IT+0x194>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a13      	ldr	r2, [pc, #76]	; (80027f8 <HAL_TIM_PWM_Start_IT+0x1dc>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d111      	bne.n	80027d4 <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2b06      	cmp	r3, #6
 80027c0:	d010      	beq.n	80027e4 <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f042 0201 	orr.w	r2, r2, #1
 80027d0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027d2:	e007      	b.n	80027e4 <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0201 	orr.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40012c00 	.word	0x40012c00
 80027f4:	40000400 	.word	0x40000400
 80027f8:	40000800 	.word	0x40000800

080027fc <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	2b0c      	cmp	r3, #12
 800280e:	d841      	bhi.n	8002894 <HAL_TIM_PWM_Stop_IT+0x98>
 8002810:	a201      	add	r2, pc, #4	; (adr r2, 8002818 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8002812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002816:	bf00      	nop
 8002818:	0800284d 	.word	0x0800284d
 800281c:	08002895 	.word	0x08002895
 8002820:	08002895 	.word	0x08002895
 8002824:	08002895 	.word	0x08002895
 8002828:	0800285f 	.word	0x0800285f
 800282c:	08002895 	.word	0x08002895
 8002830:	08002895 	.word	0x08002895
 8002834:	08002895 	.word	0x08002895
 8002838:	08002871 	.word	0x08002871
 800283c:	08002895 	.word	0x08002895
 8002840:	08002895 	.word	0x08002895
 8002844:	08002895 	.word	0x08002895
 8002848:	08002883 	.word	0x08002883
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0202 	bic.w	r2, r2, #2
 800285a:	60da      	str	r2, [r3, #12]
      break;
 800285c:	e01d      	b.n	800289a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68da      	ldr	r2, [r3, #12]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 0204 	bic.w	r2, r2, #4
 800286c:	60da      	str	r2, [r3, #12]
      break;
 800286e:	e014      	b.n	800289a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0208 	bic.w	r2, r2, #8
 800287e:	60da      	str	r2, [r3, #12]
      break;
 8002880:	e00b      	b.n	800289a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68da      	ldr	r2, [r3, #12]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0210 	bic.w	r2, r2, #16
 8002890:	60da      	str	r2, [r3, #12]
      break;
 8002892:	e002      	b.n	800289a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	73fb      	strb	r3, [r7, #15]
      break;
 8002898:	bf00      	nop
  }

  if (status == HAL_OK)
 800289a:	7bfb      	ldrb	r3, [r7, #15]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d157      	bne.n	8002950 <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2200      	movs	r2, #0
 80028a6:	6839      	ldr	r1, [r7, #0]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f000 fd8f 	bl	80033cc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a2a      	ldr	r2, [pc, #168]	; (800295c <HAL_TIM_PWM_Stop_IT+0x160>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d117      	bne.n	80028e8 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6a1a      	ldr	r2, [r3, #32]
 80028be:	f241 1311 	movw	r3, #4369	; 0x1111
 80028c2:	4013      	ands	r3, r2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10f      	bne.n	80028e8 <HAL_TIM_PWM_Stop_IT+0xec>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6a1a      	ldr	r2, [r3, #32]
 80028ce:	f240 4344 	movw	r3, #1092	; 0x444
 80028d2:	4013      	ands	r3, r2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d107      	bne.n	80028e8 <HAL_TIM_PWM_Stop_IT+0xec>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028e6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6a1a      	ldr	r2, [r3, #32]
 80028ee:	f241 1311 	movw	r3, #4369	; 0x1111
 80028f2:	4013      	ands	r3, r2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10f      	bne.n	8002918 <HAL_TIM_PWM_Stop_IT+0x11c>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6a1a      	ldr	r2, [r3, #32]
 80028fe:	f240 4344 	movw	r3, #1092	; 0x444
 8002902:	4013      	ands	r3, r2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d107      	bne.n	8002918 <HAL_TIM_PWM_Stop_IT+0x11c>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0201 	bic.w	r2, r2, #1
 8002916:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d104      	bne.n	8002928 <HAL_TIM_PWM_Stop_IT+0x12c>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002926:	e013      	b.n	8002950 <HAL_TIM_PWM_Stop_IT+0x154>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	2b04      	cmp	r3, #4
 800292c:	d104      	bne.n	8002938 <HAL_TIM_PWM_Stop_IT+0x13c>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002936:	e00b      	b.n	8002950 <HAL_TIM_PWM_Stop_IT+0x154>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	2b08      	cmp	r3, #8
 800293c:	d104      	bne.n	8002948 <HAL_TIM_PWM_Stop_IT+0x14c>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002946:	e003      	b.n	8002950 <HAL_TIM_PWM_Stop_IT+0x154>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8002950:	7bfb      	ldrb	r3, [r7, #15]
}
 8002952:	4618      	mov	r0, r3
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40012c00 	.word	0x40012c00

08002960 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b02      	cmp	r3, #2
 8002974:	d122      	bne.n	80029bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b02      	cmp	r3, #2
 8002982:	d11b      	bne.n	80029bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f06f 0202 	mvn.w	r2, #2
 800298c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 fa76 	bl	8002e94 <HAL_TIM_IC_CaptureCallback>
 80029a8:	e005      	b.n	80029b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 fa69 	bl	8002e82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 fa78 	bl	8002ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	f003 0304 	and.w	r3, r3, #4
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	d122      	bne.n	8002a10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d11b      	bne.n	8002a10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f06f 0204 	mvn.w	r2, #4
 80029e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2202      	movs	r2, #2
 80029e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 fa4c 	bl	8002e94 <HAL_TIM_IC_CaptureCallback>
 80029fc:	e005      	b.n	8002a0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 fa3f 	bl	8002e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 fa4e 	bl	8002ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	f003 0308 	and.w	r3, r3, #8
 8002a1a:	2b08      	cmp	r3, #8
 8002a1c:	d122      	bne.n	8002a64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f003 0308 	and.w	r3, r3, #8
 8002a28:	2b08      	cmp	r3, #8
 8002a2a:	d11b      	bne.n	8002a64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f06f 0208 	mvn.w	r2, #8
 8002a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2204      	movs	r2, #4
 8002a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	f003 0303 	and.w	r3, r3, #3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 fa22 	bl	8002e94 <HAL_TIM_IC_CaptureCallback>
 8002a50:	e005      	b.n	8002a5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 fa15 	bl	8002e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 fa24 	bl	8002ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	f003 0310 	and.w	r3, r3, #16
 8002a6e:	2b10      	cmp	r3, #16
 8002a70:	d122      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f003 0310 	and.w	r3, r3, #16
 8002a7c:	2b10      	cmp	r3, #16
 8002a7e:	d11b      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f06f 0210 	mvn.w	r2, #16
 8002a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2208      	movs	r2, #8
 8002a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f9f8 	bl	8002e94 <HAL_TIM_IC_CaptureCallback>
 8002aa4:	e005      	b.n	8002ab2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f9eb 	bl	8002e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 f9fa 	bl	8002ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d10e      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d107      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f06f 0201 	mvn.w	r2, #1
 8002adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7fd fb4a 	bl	8000178 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aee:	2b80      	cmp	r3, #128	; 0x80
 8002af0:	d10e      	bne.n	8002b10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afc:	2b80      	cmp	r3, #128	; 0x80
 8002afe:	d107      	bne.n	8002b10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 fce9 	bl	80034e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1a:	2b40      	cmp	r3, #64	; 0x40
 8002b1c:	d10e      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b28:	2b40      	cmp	r3, #64	; 0x40
 8002b2a:	d107      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f9be 	bl	8002eb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f003 0320 	and.w	r3, r3, #32
 8002b46:	2b20      	cmp	r3, #32
 8002b48:	d10e      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f003 0320 	and.w	r3, r3, #32
 8002b54:	2b20      	cmp	r3, #32
 8002b56:	d107      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f06f 0220 	mvn.w	r2, #32
 8002b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 fcb4 	bl	80034d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b68:	bf00      	nop
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d101      	bne.n	8002b8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	e0ae      	b.n	8002cec <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b0c      	cmp	r3, #12
 8002b9a:	f200 809f 	bhi.w	8002cdc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002b9e:	a201      	add	r2, pc, #4	; (adr r2, 8002ba4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba4:	08002bd9 	.word	0x08002bd9
 8002ba8:	08002cdd 	.word	0x08002cdd
 8002bac:	08002cdd 	.word	0x08002cdd
 8002bb0:	08002cdd 	.word	0x08002cdd
 8002bb4:	08002c19 	.word	0x08002c19
 8002bb8:	08002cdd 	.word	0x08002cdd
 8002bbc:	08002cdd 	.word	0x08002cdd
 8002bc0:	08002cdd 	.word	0x08002cdd
 8002bc4:	08002c5b 	.word	0x08002c5b
 8002bc8:	08002cdd 	.word	0x08002cdd
 8002bcc:	08002cdd 	.word	0x08002cdd
 8002bd0:	08002cdd 	.word	0x08002cdd
 8002bd4:	08002c9b 	.word	0x08002c9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68b9      	ldr	r1, [r7, #8]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 f9d6 	bl	8002f90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	699a      	ldr	r2, [r3, #24]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f042 0208 	orr.w	r2, r2, #8
 8002bf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	699a      	ldr	r2, [r3, #24]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0204 	bic.w	r2, r2, #4
 8002c02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6999      	ldr	r1, [r3, #24]
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	691a      	ldr	r2, [r3, #16]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	619a      	str	r2, [r3, #24]
      break;
 8002c16:	e064      	b.n	8002ce2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68b9      	ldr	r1, [r7, #8]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 fa1c 	bl	800305c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699a      	ldr	r2, [r3, #24]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	699a      	ldr	r2, [r3, #24]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6999      	ldr	r1, [r3, #24]
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	021a      	lsls	r2, r3, #8
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	619a      	str	r2, [r3, #24]
      break;
 8002c58:	e043      	b.n	8002ce2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68b9      	ldr	r1, [r7, #8]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f000 fa65 	bl	8003130 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	69da      	ldr	r2, [r3, #28]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f042 0208 	orr.w	r2, r2, #8
 8002c74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	69da      	ldr	r2, [r3, #28]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0204 	bic.w	r2, r2, #4
 8002c84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	69d9      	ldr	r1, [r3, #28]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	691a      	ldr	r2, [r3, #16]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	61da      	str	r2, [r3, #28]
      break;
 8002c98:	e023      	b.n	8002ce2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68b9      	ldr	r1, [r7, #8]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f000 faaf 	bl	8003204 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	69da      	ldr	r2, [r3, #28]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	69da      	ldr	r2, [r3, #28]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	69d9      	ldr	r1, [r3, #28]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	021a      	lsls	r2, r3, #8
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	61da      	str	r2, [r3, #28]
      break;
 8002cda:	e002      	b.n	8002ce2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	75fb      	strb	r3, [r7, #23]
      break;
 8002ce0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3718      	adds	r7, #24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d101      	bne.n	8002d10 <HAL_TIM_ConfigClockSource+0x1c>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e0b4      	b.n	8002e7a <HAL_TIM_ConfigClockSource+0x186>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68ba      	ldr	r2, [r7, #8]
 8002d3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d48:	d03e      	beq.n	8002dc8 <HAL_TIM_ConfigClockSource+0xd4>
 8002d4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d4e:	f200 8087 	bhi.w	8002e60 <HAL_TIM_ConfigClockSource+0x16c>
 8002d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d56:	f000 8086 	beq.w	8002e66 <HAL_TIM_ConfigClockSource+0x172>
 8002d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d5e:	d87f      	bhi.n	8002e60 <HAL_TIM_ConfigClockSource+0x16c>
 8002d60:	2b70      	cmp	r3, #112	; 0x70
 8002d62:	d01a      	beq.n	8002d9a <HAL_TIM_ConfigClockSource+0xa6>
 8002d64:	2b70      	cmp	r3, #112	; 0x70
 8002d66:	d87b      	bhi.n	8002e60 <HAL_TIM_ConfigClockSource+0x16c>
 8002d68:	2b60      	cmp	r3, #96	; 0x60
 8002d6a:	d050      	beq.n	8002e0e <HAL_TIM_ConfigClockSource+0x11a>
 8002d6c:	2b60      	cmp	r3, #96	; 0x60
 8002d6e:	d877      	bhi.n	8002e60 <HAL_TIM_ConfigClockSource+0x16c>
 8002d70:	2b50      	cmp	r3, #80	; 0x50
 8002d72:	d03c      	beq.n	8002dee <HAL_TIM_ConfigClockSource+0xfa>
 8002d74:	2b50      	cmp	r3, #80	; 0x50
 8002d76:	d873      	bhi.n	8002e60 <HAL_TIM_ConfigClockSource+0x16c>
 8002d78:	2b40      	cmp	r3, #64	; 0x40
 8002d7a:	d058      	beq.n	8002e2e <HAL_TIM_ConfigClockSource+0x13a>
 8002d7c:	2b40      	cmp	r3, #64	; 0x40
 8002d7e:	d86f      	bhi.n	8002e60 <HAL_TIM_ConfigClockSource+0x16c>
 8002d80:	2b30      	cmp	r3, #48	; 0x30
 8002d82:	d064      	beq.n	8002e4e <HAL_TIM_ConfigClockSource+0x15a>
 8002d84:	2b30      	cmp	r3, #48	; 0x30
 8002d86:	d86b      	bhi.n	8002e60 <HAL_TIM_ConfigClockSource+0x16c>
 8002d88:	2b20      	cmp	r3, #32
 8002d8a:	d060      	beq.n	8002e4e <HAL_TIM_ConfigClockSource+0x15a>
 8002d8c:	2b20      	cmp	r3, #32
 8002d8e:	d867      	bhi.n	8002e60 <HAL_TIM_ConfigClockSource+0x16c>
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d05c      	beq.n	8002e4e <HAL_TIM_ConfigClockSource+0x15a>
 8002d94:	2b10      	cmp	r3, #16
 8002d96:	d05a      	beq.n	8002e4e <HAL_TIM_ConfigClockSource+0x15a>
 8002d98:	e062      	b.n	8002e60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002daa:	f000 faf0 	bl	800338e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002dbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	609a      	str	r2, [r3, #8]
      break;
 8002dc6:	e04f      	b.n	8002e68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002dd8:	f000 fad9 	bl	800338e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689a      	ldr	r2, [r3, #8]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dea:	609a      	str	r2, [r3, #8]
      break;
 8002dec:	e03c      	b.n	8002e68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	f000 fa50 	bl	80032a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2150      	movs	r1, #80	; 0x50
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 faa7 	bl	800335a <TIM_ITRx_SetConfig>
      break;
 8002e0c:	e02c      	b.n	8002e68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	f000 fa6e 	bl	80032fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2160      	movs	r1, #96	; 0x60
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 fa97 	bl	800335a <TIM_ITRx_SetConfig>
      break;
 8002e2c:	e01c      	b.n	8002e68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	f000 fa30 	bl	80032a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2140      	movs	r1, #64	; 0x40
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 fa87 	bl	800335a <TIM_ITRx_SetConfig>
      break;
 8002e4c:	e00c      	b.n	8002e68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4619      	mov	r1, r3
 8002e58:	4610      	mov	r0, r2
 8002e5a:	f000 fa7e 	bl	800335a <TIM_ITRx_SetConfig>
      break;
 8002e5e:	e003      	b.n	8002e68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	73fb      	strb	r3, [r7, #15]
      break;
 8002e64:	e000      	b.n	8002e68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr

08002e94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bc80      	pop	{r7}
 8002ea4:	4770      	bx	lr

08002ea6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bc80      	pop	{r7}
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bc80      	pop	{r7}
 8002ec8:	4770      	bx	lr
	...

08002ecc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a29      	ldr	r2, [pc, #164]	; (8002f84 <TIM_Base_SetConfig+0xb8>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d00b      	beq.n	8002efc <TIM_Base_SetConfig+0x30>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eea:	d007      	beq.n	8002efc <TIM_Base_SetConfig+0x30>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a26      	ldr	r2, [pc, #152]	; (8002f88 <TIM_Base_SetConfig+0xbc>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d003      	beq.n	8002efc <TIM_Base_SetConfig+0x30>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a25      	ldr	r2, [pc, #148]	; (8002f8c <TIM_Base_SetConfig+0xc0>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d108      	bne.n	8002f0e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a1c      	ldr	r2, [pc, #112]	; (8002f84 <TIM_Base_SetConfig+0xb8>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d00b      	beq.n	8002f2e <TIM_Base_SetConfig+0x62>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f1c:	d007      	beq.n	8002f2e <TIM_Base_SetConfig+0x62>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a19      	ldr	r2, [pc, #100]	; (8002f88 <TIM_Base_SetConfig+0xbc>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d003      	beq.n	8002f2e <TIM_Base_SetConfig+0x62>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a18      	ldr	r2, [pc, #96]	; (8002f8c <TIM_Base_SetConfig+0xc0>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d108      	bne.n	8002f40 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a07      	ldr	r2, [pc, #28]	; (8002f84 <TIM_Base_SetConfig+0xb8>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d103      	bne.n	8002f74 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	691a      	ldr	r2, [r3, #16]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	615a      	str	r2, [r3, #20]
}
 8002f7a:	bf00      	nop
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr
 8002f84:	40012c00 	.word	0x40012c00
 8002f88:	40000400 	.word	0x40000400
 8002f8c:	40000800 	.word	0x40000800

08002f90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b087      	sub	sp, #28
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	f023 0201 	bic.w	r2, r3, #1
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f023 0303 	bic.w	r3, r3, #3
 8002fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f023 0302 	bic.w	r3, r3, #2
 8002fd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a1c      	ldr	r2, [pc, #112]	; (8003058 <TIM_OC1_SetConfig+0xc8>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d10c      	bne.n	8003006 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f023 0308 	bic.w	r3, r3, #8
 8002ff2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	f023 0304 	bic.w	r3, r3, #4
 8003004:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a13      	ldr	r2, [pc, #76]	; (8003058 <TIM_OC1_SetConfig+0xc8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d111      	bne.n	8003032 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003014:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800301c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	4313      	orrs	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	4313      	orrs	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	621a      	str	r2, [r3, #32]
}
 800304c:	bf00      	nop
 800304e:	371c      	adds	r7, #28
 8003050:	46bd      	mov	sp, r7
 8003052:	bc80      	pop	{r7}
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	40012c00 	.word	0x40012c00

0800305c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800305c:	b480      	push	{r7}
 800305e:	b087      	sub	sp, #28
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	f023 0210 	bic.w	r2, r3, #16
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800308a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003092:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	021b      	lsls	r3, r3, #8
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	4313      	orrs	r3, r2
 800309e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f023 0320 	bic.w	r3, r3, #32
 80030a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	011b      	lsls	r3, r3, #4
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a1d      	ldr	r2, [pc, #116]	; (800312c <TIM_OC2_SetConfig+0xd0>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d10d      	bne.n	80030d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	011b      	lsls	r3, r3, #4
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a14      	ldr	r2, [pc, #80]	; (800312c <TIM_OC2_SetConfig+0xd0>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d113      	bne.n	8003108 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	4313      	orrs	r3, r2
 8003106:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	621a      	str	r2, [r3, #32]
}
 8003122:	bf00      	nop
 8003124:	371c      	adds	r7, #28
 8003126:	46bd      	mov	sp, r7
 8003128:	bc80      	pop	{r7}
 800312a:	4770      	bx	lr
 800312c:	40012c00 	.word	0x40012c00

08003130 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003130:	b480      	push	{r7}
 8003132:	b087      	sub	sp, #28
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800315e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f023 0303 	bic.w	r3, r3, #3
 8003166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	4313      	orrs	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003178:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	021b      	lsls	r3, r3, #8
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	4313      	orrs	r3, r2
 8003184:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a1d      	ldr	r2, [pc, #116]	; (8003200 <TIM_OC3_SetConfig+0xd0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d10d      	bne.n	80031aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003194:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	021b      	lsls	r3, r3, #8
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	4313      	orrs	r3, r2
 80031a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a14      	ldr	r2, [pc, #80]	; (8003200 <TIM_OC3_SetConfig+0xd0>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d113      	bne.n	80031da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	011b      	lsls	r3, r3, #4
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	621a      	str	r2, [r3, #32]
}
 80031f4:	bf00      	nop
 80031f6:	371c      	adds	r7, #28
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	40012c00 	.word	0x40012c00

08003204 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003204:	b480      	push	{r7}
 8003206:	b087      	sub	sp, #28
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800323a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	021b      	lsls	r3, r3, #8
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	4313      	orrs	r3, r2
 8003246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800324e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	031b      	lsls	r3, r3, #12
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4313      	orrs	r3, r2
 800325a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a0f      	ldr	r2, [pc, #60]	; (800329c <TIM_OC4_SetConfig+0x98>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d109      	bne.n	8003278 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800326a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	019b      	lsls	r3, r3, #6
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	4313      	orrs	r3, r2
 8003276:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	621a      	str	r2, [r3, #32]
}
 8003292:	bf00      	nop
 8003294:	371c      	adds	r7, #28
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr
 800329c:	40012c00 	.word	0x40012c00

080032a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b087      	sub	sp, #28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	f023 0201 	bic.w	r2, r3, #1
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f023 030a 	bic.w	r3, r3, #10
 80032dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	621a      	str	r2, [r3, #32]
}
 80032f2:	bf00      	nop
 80032f4:	371c      	adds	r7, #28
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr

080032fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b087      	sub	sp, #28
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	f023 0210 	bic.w	r2, r3, #16
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003326:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	031b      	lsls	r3, r3, #12
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	4313      	orrs	r3, r2
 8003330:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003338:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	4313      	orrs	r3, r2
 8003342:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	621a      	str	r2, [r3, #32]
}
 8003350:	bf00      	nop
 8003352:	371c      	adds	r7, #28
 8003354:	46bd      	mov	sp, r7
 8003356:	bc80      	pop	{r7}
 8003358:	4770      	bx	lr

0800335a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800335a:	b480      	push	{r7}
 800335c:	b085      	sub	sp, #20
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
 8003362:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003370:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4313      	orrs	r3, r2
 8003378:	f043 0307 	orr.w	r3, r3, #7
 800337c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	609a      	str	r2, [r3, #8]
}
 8003384:	bf00      	nop
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	bc80      	pop	{r7}
 800338c:	4770      	bx	lr

0800338e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800338e:	b480      	push	{r7}
 8003390:	b087      	sub	sp, #28
 8003392:	af00      	add	r7, sp, #0
 8003394:	60f8      	str	r0, [r7, #12]
 8003396:	60b9      	str	r1, [r7, #8]
 8003398:	607a      	str	r2, [r7, #4]
 800339a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	021a      	lsls	r2, r3, #8
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	431a      	orrs	r2, r3
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	609a      	str	r2, [r3, #8]
}
 80033c2:	bf00      	nop
 80033c4:	371c      	adds	r7, #28
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr

080033cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b087      	sub	sp, #28
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	f003 031f 	and.w	r3, r3, #31
 80033de:	2201      	movs	r2, #1
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6a1a      	ldr	r2, [r3, #32]
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	43db      	mvns	r3, r3
 80033ee:	401a      	ands	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6a1a      	ldr	r2, [r3, #32]
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	f003 031f 	and.w	r3, r3, #31
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	fa01 f303 	lsl.w	r3, r1, r3
 8003404:	431a      	orrs	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	621a      	str	r2, [r3, #32]
}
 800340a:	bf00      	nop
 800340c:	371c      	adds	r7, #28
 800340e:	46bd      	mov	sp, r7
 8003410:	bc80      	pop	{r7}
 8003412:	4770      	bx	lr

08003414 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003424:	2b01      	cmp	r3, #1
 8003426:	d101      	bne.n	800342c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003428:	2302      	movs	r3, #2
 800342a:	e046      	b.n	80034ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2202      	movs	r2, #2
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003452:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	4313      	orrs	r3, r2
 800345c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a16      	ldr	r2, [pc, #88]	; (80034c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d00e      	beq.n	800348e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003478:	d009      	beq.n	800348e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a12      	ldr	r2, [pc, #72]	; (80034c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d004      	beq.n	800348e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a10      	ldr	r2, [pc, #64]	; (80034cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d10c      	bne.n	80034a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003494:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	4313      	orrs	r3, r2
 800349e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3714      	adds	r7, #20
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr
 80034c4:	40012c00 	.word	0x40012c00
 80034c8:	40000400 	.word	0x40000400
 80034cc:	40000800 	.word	0x40000800

080034d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	bc80      	pop	{r7}
 80034e0:	4770      	bx	lr

080034e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034ea:	bf00      	nop
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr

080034f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e042      	b.n	800358c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d106      	bne.n	8003520 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7fd fe3c 	bl	8001198 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2224      	movs	r2, #36	; 0x24
 8003524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68da      	ldr	r2, [r3, #12]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003536:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 fdc5 	bl	80040c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800354c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695a      	ldr	r2, [r3, #20]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800355c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68da      	ldr	r2, [r3, #12]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800356c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2220      	movs	r2, #32
 8003578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2220      	movs	r2, #32
 8003580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b08a      	sub	sp, #40	; 0x28
 8003598:	af02      	add	r7, sp, #8
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	603b      	str	r3, [r7, #0]
 80035a0:	4613      	mov	r3, r2
 80035a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b20      	cmp	r3, #32
 80035b2:	d16d      	bne.n	8003690 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <HAL_UART_Transmit+0x2c>
 80035ba:	88fb      	ldrh	r3, [r7, #6]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e066      	b.n	8003692 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2221      	movs	r2, #33	; 0x21
 80035ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035d2:	f7fd ff9b 	bl	800150c <HAL_GetTick>
 80035d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	88fa      	ldrh	r2, [r7, #6]
 80035dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	88fa      	ldrh	r2, [r7, #6]
 80035e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ec:	d108      	bne.n	8003600 <HAL_UART_Transmit+0x6c>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d104      	bne.n	8003600 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80035f6:	2300      	movs	r3, #0
 80035f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	61bb      	str	r3, [r7, #24]
 80035fe:	e003      	b.n	8003608 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003604:	2300      	movs	r3, #0
 8003606:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003608:	e02a      	b.n	8003660 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	2200      	movs	r2, #0
 8003612:	2180      	movs	r1, #128	; 0x80
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 fb14 	bl	8003c42 <UART_WaitOnFlagUntilTimeout>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e036      	b.n	8003692 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10b      	bne.n	8003642 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	461a      	mov	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003638:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	3302      	adds	r3, #2
 800363e:	61bb      	str	r3, [r7, #24]
 8003640:	e007      	b.n	8003652 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	781a      	ldrb	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	3301      	adds	r3, #1
 8003650:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003656:	b29b      	uxth	r3, r3
 8003658:	3b01      	subs	r3, #1
 800365a:	b29a      	uxth	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003664:	b29b      	uxth	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1cf      	bne.n	800360a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	2200      	movs	r2, #0
 8003672:	2140      	movs	r1, #64	; 0x40
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 fae4 	bl	8003c42 <UART_WaitOnFlagUntilTimeout>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e006      	b.n	8003692 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2220      	movs	r2, #32
 8003688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800368c:	2300      	movs	r3, #0
 800368e:	e000      	b.n	8003692 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003690:	2302      	movs	r3, #2
  }
}
 8003692:	4618      	mov	r0, r3
 8003694:	3720      	adds	r7, #32
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b084      	sub	sp, #16
 800369e:	af00      	add	r7, sp, #0
 80036a0:	60f8      	str	r0, [r7, #12]
 80036a2:	60b9      	str	r1, [r7, #8]
 80036a4:	4613      	mov	r3, r2
 80036a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b20      	cmp	r3, #32
 80036b2:	d112      	bne.n	80036da <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d002      	beq.n	80036c0 <HAL_UART_Receive_IT+0x26>
 80036ba:	88fb      	ldrh	r3, [r7, #6]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e00b      	b.n	80036dc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80036ca:	88fb      	ldrh	r3, [r7, #6]
 80036cc:	461a      	mov	r2, r3
 80036ce:	68b9      	ldr	r1, [r7, #8]
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 fb24 	bl	8003d1e <UART_Start_Receive_IT>
 80036d6:	4603      	mov	r3, r0
 80036d8:	e000      	b.n	80036dc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80036da:	2302      	movs	r3, #2
  }
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b0ba      	sub	sp, #232	; 0xe8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800370a:	2300      	movs	r3, #0
 800370c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003710:	2300      	movs	r3, #0
 8003712:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003722:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10f      	bne.n	800374a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800372a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	2b00      	cmp	r3, #0
 8003734:	d009      	beq.n	800374a <HAL_UART_IRQHandler+0x66>
 8003736:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800373a:	f003 0320 	and.w	r3, r3, #32
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 fc01 	bl	8003f4a <UART_Receive_IT>
      return;
 8003748:	e25b      	b.n	8003c02 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800374a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 80de 	beq.w	8003910 <HAL_UART_IRQHandler+0x22c>
 8003754:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b00      	cmp	r3, #0
 800375e:	d106      	bne.n	800376e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003764:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 80d1 	beq.w	8003910 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800376e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00b      	beq.n	8003792 <HAL_UART_IRQHandler+0xae>
 800377a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800377e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003782:	2b00      	cmp	r3, #0
 8003784:	d005      	beq.n	8003792 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378a:	f043 0201 	orr.w	r2, r3, #1
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003796:	f003 0304 	and.w	r3, r3, #4
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00b      	beq.n	80037b6 <HAL_UART_IRQHandler+0xd2>
 800379e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d005      	beq.n	80037b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ae:	f043 0202 	orr.w	r2, r3, #2
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00b      	beq.n	80037da <HAL_UART_IRQHandler+0xf6>
 80037c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d005      	beq.n	80037da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d2:	f043 0204 	orr.w	r2, r3, #4
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80037da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037de:	f003 0308 	and.w	r3, r3, #8
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d011      	beq.n	800380a <HAL_UART_IRQHandler+0x126>
 80037e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037ea:	f003 0320 	and.w	r3, r3, #32
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d105      	bne.n	80037fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80037f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d005      	beq.n	800380a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003802:	f043 0208 	orr.w	r2, r3, #8
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 81f2 	beq.w	8003bf8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003818:	f003 0320 	and.w	r3, r3, #32
 800381c:	2b00      	cmp	r3, #0
 800381e:	d008      	beq.n	8003832 <HAL_UART_IRQHandler+0x14e>
 8003820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003824:	f003 0320 	and.w	r3, r3, #32
 8003828:	2b00      	cmp	r3, #0
 800382a:	d002      	beq.n	8003832 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 fb8c 	bl	8003f4a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383c:	2b00      	cmp	r3, #0
 800383e:	bf14      	ite	ne
 8003840:	2301      	movne	r3, #1
 8003842:	2300      	moveq	r3, #0
 8003844:	b2db      	uxtb	r3, r3
 8003846:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b00      	cmp	r3, #0
 8003854:	d103      	bne.n	800385e <HAL_UART_IRQHandler+0x17a>
 8003856:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800385a:	2b00      	cmp	r3, #0
 800385c:	d04f      	beq.n	80038fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fa96 	bl	8003d90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386e:	2b00      	cmp	r3, #0
 8003870:	d041      	beq.n	80038f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	3314      	adds	r3, #20
 8003878:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003880:	e853 3f00 	ldrex	r3, [r3]
 8003884:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003888:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800388c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003890:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	3314      	adds	r3, #20
 800389a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800389e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80038a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80038aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80038ae:	e841 2300 	strex	r3, r2, [r1]
 80038b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80038b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1d9      	bne.n	8003872 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d013      	beq.n	80038ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ca:	4a7e      	ldr	r2, [pc, #504]	; (8003ac4 <HAL_UART_IRQHandler+0x3e0>)
 80038cc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fd ff6c 	bl	80017b0 <HAL_DMA_Abort_IT>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d016      	beq.n	800390c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80038e8:	4610      	mov	r0, r2
 80038ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ec:	e00e      	b.n	800390c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f993 	bl	8003c1a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f4:	e00a      	b.n	800390c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f98f 	bl	8003c1a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038fc:	e006      	b.n	800390c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f98b 	bl	8003c1a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800390a:	e175      	b.n	8003bf8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800390c:	bf00      	nop
    return;
 800390e:	e173      	b.n	8003bf8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003914:	2b01      	cmp	r3, #1
 8003916:	f040 814f 	bne.w	8003bb8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800391a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800391e:	f003 0310 	and.w	r3, r3, #16
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 8148 	beq.w	8003bb8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800392c:	f003 0310 	and.w	r3, r3, #16
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 8141 	beq.w	8003bb8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003936:	2300      	movs	r3, #0
 8003938:	60bb      	str	r3, [r7, #8]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	60bb      	str	r3, [r7, #8]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	60bb      	str	r3, [r7, #8]
 800394a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 80b6 	beq.w	8003ac8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003968:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 8145 	beq.w	8003bfc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003976:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800397a:	429a      	cmp	r2, r3
 800397c:	f080 813e 	bcs.w	8003bfc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003986:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	2b20      	cmp	r3, #32
 8003990:	f000 8088 	beq.w	8003aa4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	330c      	adds	r3, #12
 800399a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039a2:	e853 3f00 	ldrex	r3, [r3]
 80039a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80039aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	330c      	adds	r3, #12
 80039bc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80039c0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80039cc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80039d0:	e841 2300 	strex	r3, r2, [r1]
 80039d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80039d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1d9      	bne.n	8003994 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	3314      	adds	r3, #20
 80039e6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039ea:	e853 3f00 	ldrex	r3, [r3]
 80039ee:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80039f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039f2:	f023 0301 	bic.w	r3, r3, #1
 80039f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	3314      	adds	r3, #20
 8003a00:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a04:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003a08:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003a0c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003a10:	e841 2300 	strex	r3, r2, [r1]
 8003a14:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003a16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1e1      	bne.n	80039e0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	3314      	adds	r3, #20
 8003a22:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a26:	e853 3f00 	ldrex	r3, [r3]
 8003a2a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003a2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	3314      	adds	r3, #20
 8003a3c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a40:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a42:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a44:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a46:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a48:	e841 2300 	strex	r3, r2, [r1]
 8003a4c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1e3      	bne.n	8003a1c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2220      	movs	r2, #32
 8003a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	330c      	adds	r3, #12
 8003a68:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a6c:	e853 3f00 	ldrex	r3, [r3]
 8003a70:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a74:	f023 0310 	bic.w	r3, r3, #16
 8003a78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	330c      	adds	r3, #12
 8003a82:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003a86:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a88:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a8e:	e841 2300 	strex	r3, r2, [r1]
 8003a92:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1e3      	bne.n	8003a62 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fd fe4b 	bl	800173a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	4619      	mov	r1, r3
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f8b6 	bl	8003c2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ac0:	e09c      	b.n	8003bfc <HAL_UART_IRQHandler+0x518>
 8003ac2:	bf00      	nop
 8003ac4:	08003e55 	.word	0x08003e55
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 808e 	beq.w	8003c00 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003ae4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 8089 	beq.w	8003c00 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	330c      	adds	r3, #12
 8003af4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af8:	e853 3f00 	ldrex	r3, [r3]
 8003afc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	330c      	adds	r3, #12
 8003b0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003b12:	647a      	str	r2, [r7, #68]	; 0x44
 8003b14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b1a:	e841 2300 	strex	r3, r2, [r1]
 8003b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1e3      	bne.n	8003aee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	3314      	adds	r3, #20
 8003b2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	e853 3f00 	ldrex	r3, [r3]
 8003b34:	623b      	str	r3, [r7, #32]
   return(result);
 8003b36:	6a3b      	ldr	r3, [r7, #32]
 8003b38:	f023 0301 	bic.w	r3, r3, #1
 8003b3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	3314      	adds	r3, #20
 8003b46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b4a:	633a      	str	r2, [r7, #48]	; 0x30
 8003b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b52:	e841 2300 	strex	r3, r2, [r1]
 8003b56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1e3      	bne.n	8003b26 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	330c      	adds	r3, #12
 8003b72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	e853 3f00 	ldrex	r3, [r3]
 8003b7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f023 0310 	bic.w	r3, r3, #16
 8003b82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	330c      	adds	r3, #12
 8003b8c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003b90:	61fa      	str	r2, [r7, #28]
 8003b92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b94:	69b9      	ldr	r1, [r7, #24]
 8003b96:	69fa      	ldr	r2, [r7, #28]
 8003b98:	e841 2300 	strex	r3, r2, [r1]
 8003b9c:	617b      	str	r3, [r7, #20]
   return(result);
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1e3      	bne.n	8003b6c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003baa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bae:	4619      	mov	r1, r3
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f83b 	bl	8003c2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bb6:	e023      	b.n	8003c00 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d009      	beq.n	8003bd8 <HAL_UART_IRQHandler+0x4f4>
 8003bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 f953 	bl	8003e7c <UART_Transmit_IT>
    return;
 8003bd6:	e014      	b.n	8003c02 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00e      	beq.n	8003c02 <HAL_UART_IRQHandler+0x51e>
 8003be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d008      	beq.n	8003c02 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f992 	bl	8003f1a <UART_EndTransmit_IT>
    return;
 8003bf6:	e004      	b.n	8003c02 <HAL_UART_IRQHandler+0x51e>
    return;
 8003bf8:	bf00      	nop
 8003bfa:	e002      	b.n	8003c02 <HAL_UART_IRQHandler+0x51e>
      return;
 8003bfc:	bf00      	nop
 8003bfe:	e000      	b.n	8003c02 <HAL_UART_IRQHandler+0x51e>
      return;
 8003c00:	bf00      	nop
  }
}
 8003c02:	37e8      	adds	r7, #232	; 0xe8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bc80      	pop	{r7}
 8003c18:	4770      	bx	lr

08003c1a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b083      	sub	sp, #12
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr

08003c2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	460b      	mov	r3, r1
 8003c36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bc80      	pop	{r7}
 8003c40:	4770      	bx	lr

08003c42 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b090      	sub	sp, #64	; 0x40
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	60f8      	str	r0, [r7, #12]
 8003c4a:	60b9      	str	r1, [r7, #8]
 8003c4c:	603b      	str	r3, [r7, #0]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c52:	e050      	b.n	8003cf6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c5a:	d04c      	beq.n	8003cf6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d007      	beq.n	8003c72 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c62:	f7fd fc53 	bl	800150c <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d241      	bcs.n	8003cf6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	330c      	adds	r3, #12
 8003c78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7c:	e853 3f00 	ldrex	r3, [r3]
 8003c80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	330c      	adds	r3, #12
 8003c90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c92:	637a      	str	r2, [r7, #52]	; 0x34
 8003c94:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c9a:	e841 2300 	strex	r3, r2, [r1]
 8003c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1e5      	bne.n	8003c72 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	3314      	adds	r3, #20
 8003cac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	e853 3f00 	ldrex	r3, [r3]
 8003cb4:	613b      	str	r3, [r7, #16]
   return(result);
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f023 0301 	bic.w	r3, r3, #1
 8003cbc:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	3314      	adds	r3, #20
 8003cc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cc6:	623a      	str	r2, [r7, #32]
 8003cc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cca:	69f9      	ldr	r1, [r7, #28]
 8003ccc:	6a3a      	ldr	r2, [r7, #32]
 8003cce:	e841 2300 	strex	r3, r2, [r1]
 8003cd2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1e5      	bne.n	8003ca6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e00f      	b.n	8003d16 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	bf0c      	ite	eq
 8003d06:	2301      	moveq	r3, #1
 8003d08:	2300      	movne	r3, #0
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	79fb      	ldrb	r3, [r7, #7]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d09f      	beq.n	8003c54 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3740      	adds	r7, #64	; 0x40
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b085      	sub	sp, #20
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	60f8      	str	r0, [r7, #12]
 8003d26:	60b9      	str	r1, [r7, #8]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	88fa      	ldrh	r2, [r7, #6]
 8003d36:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	88fa      	ldrh	r2, [r7, #6]
 8003d3c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2222      	movs	r2, #34	; 0x22
 8003d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d007      	beq.n	8003d64 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68da      	ldr	r2, [r3, #12]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d62:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695a      	ldr	r2, [r3, #20]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f042 0201 	orr.w	r2, r2, #1
 8003d72:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68da      	ldr	r2, [r3, #12]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f042 0220 	orr.w	r2, r2, #32
 8003d82:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3714      	adds	r7, #20
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bc80      	pop	{r7}
 8003d8e:	4770      	bx	lr

08003d90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b095      	sub	sp, #84	; 0x54
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	330c      	adds	r3, #12
 8003d9e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da2:	e853 3f00 	ldrex	r3, [r3]
 8003da6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003daa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	330c      	adds	r3, #12
 8003db6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003db8:	643a      	str	r2, [r7, #64]	; 0x40
 8003dba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dbc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003dbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003dc0:	e841 2300 	strex	r3, r2, [r1]
 8003dc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1e5      	bne.n	8003d98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	3314      	adds	r3, #20
 8003dd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd4:	6a3b      	ldr	r3, [r7, #32]
 8003dd6:	e853 3f00 	ldrex	r3, [r3]
 8003dda:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	f023 0301 	bic.w	r3, r3, #1
 8003de2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	3314      	adds	r3, #20
 8003dea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003df2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003df4:	e841 2300 	strex	r3, r2, [r1]
 8003df8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1e5      	bne.n	8003dcc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d119      	bne.n	8003e3c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	330c      	adds	r3, #12
 8003e0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	e853 3f00 	ldrex	r3, [r3]
 8003e16:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	f023 0310 	bic.w	r3, r3, #16
 8003e1e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	330c      	adds	r3, #12
 8003e26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e28:	61ba      	str	r2, [r7, #24]
 8003e2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2c:	6979      	ldr	r1, [r7, #20]
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	e841 2300 	strex	r3, r2, [r1]
 8003e34:	613b      	str	r3, [r7, #16]
   return(result);
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1e5      	bne.n	8003e08 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e4a:	bf00      	nop
 8003e4c:	3754      	adds	r7, #84	; 0x54
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bc80      	pop	{r7}
 8003e52:	4770      	bx	lr

08003e54 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f7ff fed3 	bl	8003c1a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e74:	bf00      	nop
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b21      	cmp	r3, #33	; 0x21
 8003e8e:	d13e      	bne.n	8003f0e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e98:	d114      	bne.n	8003ec4 <UART_Transmit_IT+0x48>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d110      	bne.n	8003ec4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	881b      	ldrh	r3, [r3, #0]
 8003eac:	461a      	mov	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003eb6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	1c9a      	adds	r2, r3, #2
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	621a      	str	r2, [r3, #32]
 8003ec2:	e008      	b.n	8003ed6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	1c59      	adds	r1, r3, #1
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	6211      	str	r1, [r2, #32]
 8003ece:	781a      	ldrb	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	3b01      	subs	r3, #1
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10f      	bne.n	8003f0a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68da      	ldr	r2, [r3, #12]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ef8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68da      	ldr	r2, [r3, #12]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f08:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	e000      	b.n	8003f10 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f0e:	2302      	movs	r3, #2
  }
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bc80      	pop	{r7}
 8003f18:	4770      	bx	lr

08003f1a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b082      	sub	sp, #8
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f30:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2220      	movs	r2, #32
 8003f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7ff fe64 	bl	8003c08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b08c      	sub	sp, #48	; 0x30
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b22      	cmp	r3, #34	; 0x22
 8003f5c:	f040 80ae 	bne.w	80040bc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f68:	d117      	bne.n	8003f9a <UART_Receive_IT+0x50>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d113      	bne.n	8003f9a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f72:	2300      	movs	r3, #0
 8003f74:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f92:	1c9a      	adds	r2, r3, #2
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	629a      	str	r2, [r3, #40]	; 0x28
 8003f98:	e026      	b.n	8003fe8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fac:	d007      	beq.n	8003fbe <UART_Receive_IT+0x74>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10a      	bne.n	8003fcc <UART_Receive_IT+0x82>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d106      	bne.n	8003fcc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	b2da      	uxtb	r2, r3
 8003fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc8:	701a      	strb	r2, [r3, #0]
 8003fca:	e008      	b.n	8003fde <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fdc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe2:	1c5a      	adds	r2, r3, #1
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d15d      	bne.n	80040b8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68da      	ldr	r2, [r3, #12]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 0220 	bic.w	r2, r2, #32
 800400a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800401a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	695a      	ldr	r2, [r3, #20]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 0201 	bic.w	r2, r2, #1
 800402a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2220      	movs	r2, #32
 8004030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403e:	2b01      	cmp	r3, #1
 8004040:	d135      	bne.n	80040ae <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	330c      	adds	r3, #12
 800404e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	e853 3f00 	ldrex	r3, [r3]
 8004056:	613b      	str	r3, [r7, #16]
   return(result);
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	f023 0310 	bic.w	r3, r3, #16
 800405e:	627b      	str	r3, [r7, #36]	; 0x24
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	330c      	adds	r3, #12
 8004066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004068:	623a      	str	r2, [r7, #32]
 800406a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406c:	69f9      	ldr	r1, [r7, #28]
 800406e:	6a3a      	ldr	r2, [r7, #32]
 8004070:	e841 2300 	strex	r3, r2, [r1]
 8004074:	61bb      	str	r3, [r7, #24]
   return(result);
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1e5      	bne.n	8004048 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0310 	and.w	r3, r3, #16
 8004086:	2b10      	cmp	r3, #16
 8004088:	d10a      	bne.n	80040a0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800408a:	2300      	movs	r3, #0
 800408c:	60fb      	str	r3, [r7, #12]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040a4:	4619      	mov	r1, r3
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7ff fdc0 	bl	8003c2c <HAL_UARTEx_RxEventCallback>
 80040ac:	e002      	b.n	80040b4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7fc f9b6 	bl	8000420 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80040b4:	2300      	movs	r3, #0
 80040b6:	e002      	b.n	80040be <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80040b8:	2300      	movs	r3, #0
 80040ba:	e000      	b.n	80040be <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80040bc:	2302      	movs	r3, #2
  }
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3730      	adds	r7, #48	; 0x30
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
	...

080040c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	431a      	orrs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004102:	f023 030c 	bic.w	r3, r3, #12
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6812      	ldr	r2, [r2, #0]
 800410a:	68b9      	ldr	r1, [r7, #8]
 800410c:	430b      	orrs	r3, r1
 800410e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	699a      	ldr	r2, [r3, #24]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a2c      	ldr	r2, [pc, #176]	; (80041dc <UART_SetConfig+0x114>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d103      	bne.n	8004138 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004130:	f7fe f948 	bl	80023c4 <HAL_RCC_GetPCLK2Freq>
 8004134:	60f8      	str	r0, [r7, #12]
 8004136:	e002      	b.n	800413e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004138:	f7fe f930 	bl	800239c <HAL_RCC_GetPCLK1Freq>
 800413c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	4613      	mov	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4413      	add	r3, r2
 8004146:	009a      	lsls	r2, r3, #2
 8004148:	441a      	add	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	fbb2 f3f3 	udiv	r3, r2, r3
 8004154:	4a22      	ldr	r2, [pc, #136]	; (80041e0 <UART_SetConfig+0x118>)
 8004156:	fba2 2303 	umull	r2, r3, r2, r3
 800415a:	095b      	lsrs	r3, r3, #5
 800415c:	0119      	lsls	r1, r3, #4
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	4613      	mov	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	009a      	lsls	r2, r3, #2
 8004168:	441a      	add	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	fbb2 f2f3 	udiv	r2, r2, r3
 8004174:	4b1a      	ldr	r3, [pc, #104]	; (80041e0 <UART_SetConfig+0x118>)
 8004176:	fba3 0302 	umull	r0, r3, r3, r2
 800417a:	095b      	lsrs	r3, r3, #5
 800417c:	2064      	movs	r0, #100	; 0x64
 800417e:	fb00 f303 	mul.w	r3, r0, r3
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	3332      	adds	r3, #50	; 0x32
 8004188:	4a15      	ldr	r2, [pc, #84]	; (80041e0 <UART_SetConfig+0x118>)
 800418a:	fba2 2303 	umull	r2, r3, r2, r3
 800418e:	095b      	lsrs	r3, r3, #5
 8004190:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004194:	4419      	add	r1, r3
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	4613      	mov	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	009a      	lsls	r2, r3, #2
 80041a0:	441a      	add	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80041ac:	4b0c      	ldr	r3, [pc, #48]	; (80041e0 <UART_SetConfig+0x118>)
 80041ae:	fba3 0302 	umull	r0, r3, r3, r2
 80041b2:	095b      	lsrs	r3, r3, #5
 80041b4:	2064      	movs	r0, #100	; 0x64
 80041b6:	fb00 f303 	mul.w	r3, r0, r3
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	011b      	lsls	r3, r3, #4
 80041be:	3332      	adds	r3, #50	; 0x32
 80041c0:	4a07      	ldr	r2, [pc, #28]	; (80041e0 <UART_SetConfig+0x118>)
 80041c2:	fba2 2303 	umull	r2, r3, r2, r3
 80041c6:	095b      	lsrs	r3, r3, #5
 80041c8:	f003 020f 	and.w	r2, r3, #15
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	440a      	add	r2, r1
 80041d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80041d4:	bf00      	nop
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	40013800 	.word	0x40013800
 80041e0:	51eb851f 	.word	0x51eb851f

080041e4 <std>:
 80041e4:	2300      	movs	r3, #0
 80041e6:	b510      	push	{r4, lr}
 80041e8:	4604      	mov	r4, r0
 80041ea:	e9c0 3300 	strd	r3, r3, [r0]
 80041ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80041f2:	6083      	str	r3, [r0, #8]
 80041f4:	8181      	strh	r1, [r0, #12]
 80041f6:	6643      	str	r3, [r0, #100]	; 0x64
 80041f8:	81c2      	strh	r2, [r0, #14]
 80041fa:	6183      	str	r3, [r0, #24]
 80041fc:	4619      	mov	r1, r3
 80041fe:	2208      	movs	r2, #8
 8004200:	305c      	adds	r0, #92	; 0x5c
 8004202:	f000 f9e5 	bl	80045d0 <memset>
 8004206:	4b0d      	ldr	r3, [pc, #52]	; (800423c <std+0x58>)
 8004208:	6224      	str	r4, [r4, #32]
 800420a:	6263      	str	r3, [r4, #36]	; 0x24
 800420c:	4b0c      	ldr	r3, [pc, #48]	; (8004240 <std+0x5c>)
 800420e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004210:	4b0c      	ldr	r3, [pc, #48]	; (8004244 <std+0x60>)
 8004212:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004214:	4b0c      	ldr	r3, [pc, #48]	; (8004248 <std+0x64>)
 8004216:	6323      	str	r3, [r4, #48]	; 0x30
 8004218:	4b0c      	ldr	r3, [pc, #48]	; (800424c <std+0x68>)
 800421a:	429c      	cmp	r4, r3
 800421c:	d006      	beq.n	800422c <std+0x48>
 800421e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004222:	4294      	cmp	r4, r2
 8004224:	d002      	beq.n	800422c <std+0x48>
 8004226:	33d0      	adds	r3, #208	; 0xd0
 8004228:	429c      	cmp	r4, r3
 800422a:	d105      	bne.n	8004238 <std+0x54>
 800422c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004234:	f000 ba56 	b.w	80046e4 <__retarget_lock_init_recursive>
 8004238:	bd10      	pop	{r4, pc}
 800423a:	bf00      	nop
 800423c:	08004421 	.word	0x08004421
 8004240:	08004443 	.word	0x08004443
 8004244:	0800447b 	.word	0x0800447b
 8004248:	0800449f 	.word	0x0800449f
 800424c:	200002d0 	.word	0x200002d0

08004250 <stdio_exit_handler>:
 8004250:	4a02      	ldr	r2, [pc, #8]	; (800425c <stdio_exit_handler+0xc>)
 8004252:	4903      	ldr	r1, [pc, #12]	; (8004260 <stdio_exit_handler+0x10>)
 8004254:	4803      	ldr	r0, [pc, #12]	; (8004264 <stdio_exit_handler+0x14>)
 8004256:	f000 b869 	b.w	800432c <_fwalk_sglue>
 800425a:	bf00      	nop
 800425c:	200000f8 	.word	0x200000f8
 8004260:	080049d9 	.word	0x080049d9
 8004264:	20000104 	.word	0x20000104

08004268 <cleanup_stdio>:
 8004268:	6841      	ldr	r1, [r0, #4]
 800426a:	4b0c      	ldr	r3, [pc, #48]	; (800429c <cleanup_stdio+0x34>)
 800426c:	b510      	push	{r4, lr}
 800426e:	4299      	cmp	r1, r3
 8004270:	4604      	mov	r4, r0
 8004272:	d001      	beq.n	8004278 <cleanup_stdio+0x10>
 8004274:	f000 fbb0 	bl	80049d8 <_fflush_r>
 8004278:	68a1      	ldr	r1, [r4, #8]
 800427a:	4b09      	ldr	r3, [pc, #36]	; (80042a0 <cleanup_stdio+0x38>)
 800427c:	4299      	cmp	r1, r3
 800427e:	d002      	beq.n	8004286 <cleanup_stdio+0x1e>
 8004280:	4620      	mov	r0, r4
 8004282:	f000 fba9 	bl	80049d8 <_fflush_r>
 8004286:	68e1      	ldr	r1, [r4, #12]
 8004288:	4b06      	ldr	r3, [pc, #24]	; (80042a4 <cleanup_stdio+0x3c>)
 800428a:	4299      	cmp	r1, r3
 800428c:	d004      	beq.n	8004298 <cleanup_stdio+0x30>
 800428e:	4620      	mov	r0, r4
 8004290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004294:	f000 bba0 	b.w	80049d8 <_fflush_r>
 8004298:	bd10      	pop	{r4, pc}
 800429a:	bf00      	nop
 800429c:	200002d0 	.word	0x200002d0
 80042a0:	20000338 	.word	0x20000338
 80042a4:	200003a0 	.word	0x200003a0

080042a8 <global_stdio_init.part.0>:
 80042a8:	b510      	push	{r4, lr}
 80042aa:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <global_stdio_init.part.0+0x30>)
 80042ac:	4c0b      	ldr	r4, [pc, #44]	; (80042dc <global_stdio_init.part.0+0x34>)
 80042ae:	4a0c      	ldr	r2, [pc, #48]	; (80042e0 <global_stdio_init.part.0+0x38>)
 80042b0:	4620      	mov	r0, r4
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	2104      	movs	r1, #4
 80042b6:	2200      	movs	r2, #0
 80042b8:	f7ff ff94 	bl	80041e4 <std>
 80042bc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80042c0:	2201      	movs	r2, #1
 80042c2:	2109      	movs	r1, #9
 80042c4:	f7ff ff8e 	bl	80041e4 <std>
 80042c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80042cc:	2202      	movs	r2, #2
 80042ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042d2:	2112      	movs	r1, #18
 80042d4:	f7ff bf86 	b.w	80041e4 <std>
 80042d8:	20000408 	.word	0x20000408
 80042dc:	200002d0 	.word	0x200002d0
 80042e0:	08004251 	.word	0x08004251

080042e4 <__sfp_lock_acquire>:
 80042e4:	4801      	ldr	r0, [pc, #4]	; (80042ec <__sfp_lock_acquire+0x8>)
 80042e6:	f000 b9fe 	b.w	80046e6 <__retarget_lock_acquire_recursive>
 80042ea:	bf00      	nop
 80042ec:	20000411 	.word	0x20000411

080042f0 <__sfp_lock_release>:
 80042f0:	4801      	ldr	r0, [pc, #4]	; (80042f8 <__sfp_lock_release+0x8>)
 80042f2:	f000 b9f9 	b.w	80046e8 <__retarget_lock_release_recursive>
 80042f6:	bf00      	nop
 80042f8:	20000411 	.word	0x20000411

080042fc <__sinit>:
 80042fc:	b510      	push	{r4, lr}
 80042fe:	4604      	mov	r4, r0
 8004300:	f7ff fff0 	bl	80042e4 <__sfp_lock_acquire>
 8004304:	6a23      	ldr	r3, [r4, #32]
 8004306:	b11b      	cbz	r3, 8004310 <__sinit+0x14>
 8004308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800430c:	f7ff bff0 	b.w	80042f0 <__sfp_lock_release>
 8004310:	4b04      	ldr	r3, [pc, #16]	; (8004324 <__sinit+0x28>)
 8004312:	6223      	str	r3, [r4, #32]
 8004314:	4b04      	ldr	r3, [pc, #16]	; (8004328 <__sinit+0x2c>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1f5      	bne.n	8004308 <__sinit+0xc>
 800431c:	f7ff ffc4 	bl	80042a8 <global_stdio_init.part.0>
 8004320:	e7f2      	b.n	8004308 <__sinit+0xc>
 8004322:	bf00      	nop
 8004324:	08004269 	.word	0x08004269
 8004328:	20000408 	.word	0x20000408

0800432c <_fwalk_sglue>:
 800432c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004330:	4607      	mov	r7, r0
 8004332:	4688      	mov	r8, r1
 8004334:	4614      	mov	r4, r2
 8004336:	2600      	movs	r6, #0
 8004338:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800433c:	f1b9 0901 	subs.w	r9, r9, #1
 8004340:	d505      	bpl.n	800434e <_fwalk_sglue+0x22>
 8004342:	6824      	ldr	r4, [r4, #0]
 8004344:	2c00      	cmp	r4, #0
 8004346:	d1f7      	bne.n	8004338 <_fwalk_sglue+0xc>
 8004348:	4630      	mov	r0, r6
 800434a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800434e:	89ab      	ldrh	r3, [r5, #12]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d907      	bls.n	8004364 <_fwalk_sglue+0x38>
 8004354:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004358:	3301      	adds	r3, #1
 800435a:	d003      	beq.n	8004364 <_fwalk_sglue+0x38>
 800435c:	4629      	mov	r1, r5
 800435e:	4638      	mov	r0, r7
 8004360:	47c0      	blx	r8
 8004362:	4306      	orrs	r6, r0
 8004364:	3568      	adds	r5, #104	; 0x68
 8004366:	e7e9      	b.n	800433c <_fwalk_sglue+0x10>

08004368 <_puts_r>:
 8004368:	6a03      	ldr	r3, [r0, #32]
 800436a:	b570      	push	{r4, r5, r6, lr}
 800436c:	4605      	mov	r5, r0
 800436e:	460e      	mov	r6, r1
 8004370:	6884      	ldr	r4, [r0, #8]
 8004372:	b90b      	cbnz	r3, 8004378 <_puts_r+0x10>
 8004374:	f7ff ffc2 	bl	80042fc <__sinit>
 8004378:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800437a:	07db      	lsls	r3, r3, #31
 800437c:	d405      	bmi.n	800438a <_puts_r+0x22>
 800437e:	89a3      	ldrh	r3, [r4, #12]
 8004380:	0598      	lsls	r0, r3, #22
 8004382:	d402      	bmi.n	800438a <_puts_r+0x22>
 8004384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004386:	f000 f9ae 	bl	80046e6 <__retarget_lock_acquire_recursive>
 800438a:	89a3      	ldrh	r3, [r4, #12]
 800438c:	0719      	lsls	r1, r3, #28
 800438e:	d513      	bpl.n	80043b8 <_puts_r+0x50>
 8004390:	6923      	ldr	r3, [r4, #16]
 8004392:	b18b      	cbz	r3, 80043b8 <_puts_r+0x50>
 8004394:	3e01      	subs	r6, #1
 8004396:	68a3      	ldr	r3, [r4, #8]
 8004398:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800439c:	3b01      	subs	r3, #1
 800439e:	60a3      	str	r3, [r4, #8]
 80043a0:	b9e9      	cbnz	r1, 80043de <_puts_r+0x76>
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	da2e      	bge.n	8004404 <_puts_r+0x9c>
 80043a6:	4622      	mov	r2, r4
 80043a8:	210a      	movs	r1, #10
 80043aa:	4628      	mov	r0, r5
 80043ac:	f000 f87b 	bl	80044a6 <__swbuf_r>
 80043b0:	3001      	adds	r0, #1
 80043b2:	d007      	beq.n	80043c4 <_puts_r+0x5c>
 80043b4:	250a      	movs	r5, #10
 80043b6:	e007      	b.n	80043c8 <_puts_r+0x60>
 80043b8:	4621      	mov	r1, r4
 80043ba:	4628      	mov	r0, r5
 80043bc:	f000 f8b0 	bl	8004520 <__swsetup_r>
 80043c0:	2800      	cmp	r0, #0
 80043c2:	d0e7      	beq.n	8004394 <_puts_r+0x2c>
 80043c4:	f04f 35ff 	mov.w	r5, #4294967295
 80043c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043ca:	07da      	lsls	r2, r3, #31
 80043cc:	d405      	bmi.n	80043da <_puts_r+0x72>
 80043ce:	89a3      	ldrh	r3, [r4, #12]
 80043d0:	059b      	lsls	r3, r3, #22
 80043d2:	d402      	bmi.n	80043da <_puts_r+0x72>
 80043d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043d6:	f000 f987 	bl	80046e8 <__retarget_lock_release_recursive>
 80043da:	4628      	mov	r0, r5
 80043dc:	bd70      	pop	{r4, r5, r6, pc}
 80043de:	2b00      	cmp	r3, #0
 80043e0:	da04      	bge.n	80043ec <_puts_r+0x84>
 80043e2:	69a2      	ldr	r2, [r4, #24]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	dc06      	bgt.n	80043f6 <_puts_r+0x8e>
 80043e8:	290a      	cmp	r1, #10
 80043ea:	d004      	beq.n	80043f6 <_puts_r+0x8e>
 80043ec:	6823      	ldr	r3, [r4, #0]
 80043ee:	1c5a      	adds	r2, r3, #1
 80043f0:	6022      	str	r2, [r4, #0]
 80043f2:	7019      	strb	r1, [r3, #0]
 80043f4:	e7cf      	b.n	8004396 <_puts_r+0x2e>
 80043f6:	4622      	mov	r2, r4
 80043f8:	4628      	mov	r0, r5
 80043fa:	f000 f854 	bl	80044a6 <__swbuf_r>
 80043fe:	3001      	adds	r0, #1
 8004400:	d1c9      	bne.n	8004396 <_puts_r+0x2e>
 8004402:	e7df      	b.n	80043c4 <_puts_r+0x5c>
 8004404:	250a      	movs	r5, #10
 8004406:	6823      	ldr	r3, [r4, #0]
 8004408:	1c5a      	adds	r2, r3, #1
 800440a:	6022      	str	r2, [r4, #0]
 800440c:	701d      	strb	r5, [r3, #0]
 800440e:	e7db      	b.n	80043c8 <_puts_r+0x60>

08004410 <puts>:
 8004410:	4b02      	ldr	r3, [pc, #8]	; (800441c <puts+0xc>)
 8004412:	4601      	mov	r1, r0
 8004414:	6818      	ldr	r0, [r3, #0]
 8004416:	f7ff bfa7 	b.w	8004368 <_puts_r>
 800441a:	bf00      	nop
 800441c:	20000150 	.word	0x20000150

08004420 <__sread>:
 8004420:	b510      	push	{r4, lr}
 8004422:	460c      	mov	r4, r1
 8004424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004428:	f000 f90e 	bl	8004648 <_read_r>
 800442c:	2800      	cmp	r0, #0
 800442e:	bfab      	itete	ge
 8004430:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004432:	89a3      	ldrhlt	r3, [r4, #12]
 8004434:	181b      	addge	r3, r3, r0
 8004436:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800443a:	bfac      	ite	ge
 800443c:	6563      	strge	r3, [r4, #84]	; 0x54
 800443e:	81a3      	strhlt	r3, [r4, #12]
 8004440:	bd10      	pop	{r4, pc}

08004442 <__swrite>:
 8004442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004446:	461f      	mov	r7, r3
 8004448:	898b      	ldrh	r3, [r1, #12]
 800444a:	4605      	mov	r5, r0
 800444c:	05db      	lsls	r3, r3, #23
 800444e:	460c      	mov	r4, r1
 8004450:	4616      	mov	r6, r2
 8004452:	d505      	bpl.n	8004460 <__swrite+0x1e>
 8004454:	2302      	movs	r3, #2
 8004456:	2200      	movs	r2, #0
 8004458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800445c:	f000 f8e2 	bl	8004624 <_lseek_r>
 8004460:	89a3      	ldrh	r3, [r4, #12]
 8004462:	4632      	mov	r2, r6
 8004464:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004468:	81a3      	strh	r3, [r4, #12]
 800446a:	4628      	mov	r0, r5
 800446c:	463b      	mov	r3, r7
 800446e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004476:	f000 b8f9 	b.w	800466c <_write_r>

0800447a <__sseek>:
 800447a:	b510      	push	{r4, lr}
 800447c:	460c      	mov	r4, r1
 800447e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004482:	f000 f8cf 	bl	8004624 <_lseek_r>
 8004486:	1c43      	adds	r3, r0, #1
 8004488:	89a3      	ldrh	r3, [r4, #12]
 800448a:	bf15      	itete	ne
 800448c:	6560      	strne	r0, [r4, #84]	; 0x54
 800448e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004492:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004496:	81a3      	strheq	r3, [r4, #12]
 8004498:	bf18      	it	ne
 800449a:	81a3      	strhne	r3, [r4, #12]
 800449c:	bd10      	pop	{r4, pc}

0800449e <__sclose>:
 800449e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044a2:	f000 b8af 	b.w	8004604 <_close_r>

080044a6 <__swbuf_r>:
 80044a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044a8:	460e      	mov	r6, r1
 80044aa:	4614      	mov	r4, r2
 80044ac:	4605      	mov	r5, r0
 80044ae:	b118      	cbz	r0, 80044b8 <__swbuf_r+0x12>
 80044b0:	6a03      	ldr	r3, [r0, #32]
 80044b2:	b90b      	cbnz	r3, 80044b8 <__swbuf_r+0x12>
 80044b4:	f7ff ff22 	bl	80042fc <__sinit>
 80044b8:	69a3      	ldr	r3, [r4, #24]
 80044ba:	60a3      	str	r3, [r4, #8]
 80044bc:	89a3      	ldrh	r3, [r4, #12]
 80044be:	071a      	lsls	r2, r3, #28
 80044c0:	d525      	bpl.n	800450e <__swbuf_r+0x68>
 80044c2:	6923      	ldr	r3, [r4, #16]
 80044c4:	b31b      	cbz	r3, 800450e <__swbuf_r+0x68>
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	6922      	ldr	r2, [r4, #16]
 80044ca:	b2f6      	uxtb	r6, r6
 80044cc:	1a98      	subs	r0, r3, r2
 80044ce:	6963      	ldr	r3, [r4, #20]
 80044d0:	4637      	mov	r7, r6
 80044d2:	4283      	cmp	r3, r0
 80044d4:	dc04      	bgt.n	80044e0 <__swbuf_r+0x3a>
 80044d6:	4621      	mov	r1, r4
 80044d8:	4628      	mov	r0, r5
 80044da:	f000 fa7d 	bl	80049d8 <_fflush_r>
 80044de:	b9e0      	cbnz	r0, 800451a <__swbuf_r+0x74>
 80044e0:	68a3      	ldr	r3, [r4, #8]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	60a3      	str	r3, [r4, #8]
 80044e6:	6823      	ldr	r3, [r4, #0]
 80044e8:	1c5a      	adds	r2, r3, #1
 80044ea:	6022      	str	r2, [r4, #0]
 80044ec:	701e      	strb	r6, [r3, #0]
 80044ee:	6962      	ldr	r2, [r4, #20]
 80044f0:	1c43      	adds	r3, r0, #1
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d004      	beq.n	8004500 <__swbuf_r+0x5a>
 80044f6:	89a3      	ldrh	r3, [r4, #12]
 80044f8:	07db      	lsls	r3, r3, #31
 80044fa:	d506      	bpl.n	800450a <__swbuf_r+0x64>
 80044fc:	2e0a      	cmp	r6, #10
 80044fe:	d104      	bne.n	800450a <__swbuf_r+0x64>
 8004500:	4621      	mov	r1, r4
 8004502:	4628      	mov	r0, r5
 8004504:	f000 fa68 	bl	80049d8 <_fflush_r>
 8004508:	b938      	cbnz	r0, 800451a <__swbuf_r+0x74>
 800450a:	4638      	mov	r0, r7
 800450c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800450e:	4621      	mov	r1, r4
 8004510:	4628      	mov	r0, r5
 8004512:	f000 f805 	bl	8004520 <__swsetup_r>
 8004516:	2800      	cmp	r0, #0
 8004518:	d0d5      	beq.n	80044c6 <__swbuf_r+0x20>
 800451a:	f04f 37ff 	mov.w	r7, #4294967295
 800451e:	e7f4      	b.n	800450a <__swbuf_r+0x64>

08004520 <__swsetup_r>:
 8004520:	b538      	push	{r3, r4, r5, lr}
 8004522:	4b2a      	ldr	r3, [pc, #168]	; (80045cc <__swsetup_r+0xac>)
 8004524:	4605      	mov	r5, r0
 8004526:	6818      	ldr	r0, [r3, #0]
 8004528:	460c      	mov	r4, r1
 800452a:	b118      	cbz	r0, 8004534 <__swsetup_r+0x14>
 800452c:	6a03      	ldr	r3, [r0, #32]
 800452e:	b90b      	cbnz	r3, 8004534 <__swsetup_r+0x14>
 8004530:	f7ff fee4 	bl	80042fc <__sinit>
 8004534:	89a3      	ldrh	r3, [r4, #12]
 8004536:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800453a:	0718      	lsls	r0, r3, #28
 800453c:	d422      	bmi.n	8004584 <__swsetup_r+0x64>
 800453e:	06d9      	lsls	r1, r3, #27
 8004540:	d407      	bmi.n	8004552 <__swsetup_r+0x32>
 8004542:	2309      	movs	r3, #9
 8004544:	602b      	str	r3, [r5, #0]
 8004546:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800454a:	f04f 30ff 	mov.w	r0, #4294967295
 800454e:	81a3      	strh	r3, [r4, #12]
 8004550:	e034      	b.n	80045bc <__swsetup_r+0x9c>
 8004552:	0758      	lsls	r0, r3, #29
 8004554:	d512      	bpl.n	800457c <__swsetup_r+0x5c>
 8004556:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004558:	b141      	cbz	r1, 800456c <__swsetup_r+0x4c>
 800455a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800455e:	4299      	cmp	r1, r3
 8004560:	d002      	beq.n	8004568 <__swsetup_r+0x48>
 8004562:	4628      	mov	r0, r5
 8004564:	f000 f8c2 	bl	80046ec <_free_r>
 8004568:	2300      	movs	r3, #0
 800456a:	6363      	str	r3, [r4, #52]	; 0x34
 800456c:	89a3      	ldrh	r3, [r4, #12]
 800456e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004572:	81a3      	strh	r3, [r4, #12]
 8004574:	2300      	movs	r3, #0
 8004576:	6063      	str	r3, [r4, #4]
 8004578:	6923      	ldr	r3, [r4, #16]
 800457a:	6023      	str	r3, [r4, #0]
 800457c:	89a3      	ldrh	r3, [r4, #12]
 800457e:	f043 0308 	orr.w	r3, r3, #8
 8004582:	81a3      	strh	r3, [r4, #12]
 8004584:	6923      	ldr	r3, [r4, #16]
 8004586:	b94b      	cbnz	r3, 800459c <__swsetup_r+0x7c>
 8004588:	89a3      	ldrh	r3, [r4, #12]
 800458a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800458e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004592:	d003      	beq.n	800459c <__swsetup_r+0x7c>
 8004594:	4621      	mov	r1, r4
 8004596:	4628      	mov	r0, r5
 8004598:	f000 fa6b 	bl	8004a72 <__smakebuf_r>
 800459c:	89a0      	ldrh	r0, [r4, #12]
 800459e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80045a2:	f010 0301 	ands.w	r3, r0, #1
 80045a6:	d00a      	beq.n	80045be <__swsetup_r+0x9e>
 80045a8:	2300      	movs	r3, #0
 80045aa:	60a3      	str	r3, [r4, #8]
 80045ac:	6963      	ldr	r3, [r4, #20]
 80045ae:	425b      	negs	r3, r3
 80045b0:	61a3      	str	r3, [r4, #24]
 80045b2:	6923      	ldr	r3, [r4, #16]
 80045b4:	b943      	cbnz	r3, 80045c8 <__swsetup_r+0xa8>
 80045b6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80045ba:	d1c4      	bne.n	8004546 <__swsetup_r+0x26>
 80045bc:	bd38      	pop	{r3, r4, r5, pc}
 80045be:	0781      	lsls	r1, r0, #30
 80045c0:	bf58      	it	pl
 80045c2:	6963      	ldrpl	r3, [r4, #20]
 80045c4:	60a3      	str	r3, [r4, #8]
 80045c6:	e7f4      	b.n	80045b2 <__swsetup_r+0x92>
 80045c8:	2000      	movs	r0, #0
 80045ca:	e7f7      	b.n	80045bc <__swsetup_r+0x9c>
 80045cc:	20000150 	.word	0x20000150

080045d0 <memset>:
 80045d0:	4603      	mov	r3, r0
 80045d2:	4402      	add	r2, r0
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d100      	bne.n	80045da <memset+0xa>
 80045d8:	4770      	bx	lr
 80045da:	f803 1b01 	strb.w	r1, [r3], #1
 80045de:	e7f9      	b.n	80045d4 <memset+0x4>

080045e0 <strncmp>:
 80045e0:	b510      	push	{r4, lr}
 80045e2:	b16a      	cbz	r2, 8004600 <strncmp+0x20>
 80045e4:	3901      	subs	r1, #1
 80045e6:	1884      	adds	r4, r0, r2
 80045e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045ec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d103      	bne.n	80045fc <strncmp+0x1c>
 80045f4:	42a0      	cmp	r0, r4
 80045f6:	d001      	beq.n	80045fc <strncmp+0x1c>
 80045f8:	2a00      	cmp	r2, #0
 80045fa:	d1f5      	bne.n	80045e8 <strncmp+0x8>
 80045fc:	1ad0      	subs	r0, r2, r3
 80045fe:	bd10      	pop	{r4, pc}
 8004600:	4610      	mov	r0, r2
 8004602:	e7fc      	b.n	80045fe <strncmp+0x1e>

08004604 <_close_r>:
 8004604:	b538      	push	{r3, r4, r5, lr}
 8004606:	2300      	movs	r3, #0
 8004608:	4d05      	ldr	r5, [pc, #20]	; (8004620 <_close_r+0x1c>)
 800460a:	4604      	mov	r4, r0
 800460c:	4608      	mov	r0, r1
 800460e:	602b      	str	r3, [r5, #0]
 8004610:	f7fc fe91 	bl	8001336 <_close>
 8004614:	1c43      	adds	r3, r0, #1
 8004616:	d102      	bne.n	800461e <_close_r+0x1a>
 8004618:	682b      	ldr	r3, [r5, #0]
 800461a:	b103      	cbz	r3, 800461e <_close_r+0x1a>
 800461c:	6023      	str	r3, [r4, #0]
 800461e:	bd38      	pop	{r3, r4, r5, pc}
 8004620:	2000040c 	.word	0x2000040c

08004624 <_lseek_r>:
 8004624:	b538      	push	{r3, r4, r5, lr}
 8004626:	4604      	mov	r4, r0
 8004628:	4608      	mov	r0, r1
 800462a:	4611      	mov	r1, r2
 800462c:	2200      	movs	r2, #0
 800462e:	4d05      	ldr	r5, [pc, #20]	; (8004644 <_lseek_r+0x20>)
 8004630:	602a      	str	r2, [r5, #0]
 8004632:	461a      	mov	r2, r3
 8004634:	f7fc fea3 	bl	800137e <_lseek>
 8004638:	1c43      	adds	r3, r0, #1
 800463a:	d102      	bne.n	8004642 <_lseek_r+0x1e>
 800463c:	682b      	ldr	r3, [r5, #0]
 800463e:	b103      	cbz	r3, 8004642 <_lseek_r+0x1e>
 8004640:	6023      	str	r3, [r4, #0]
 8004642:	bd38      	pop	{r3, r4, r5, pc}
 8004644:	2000040c 	.word	0x2000040c

08004648 <_read_r>:
 8004648:	b538      	push	{r3, r4, r5, lr}
 800464a:	4604      	mov	r4, r0
 800464c:	4608      	mov	r0, r1
 800464e:	4611      	mov	r1, r2
 8004650:	2200      	movs	r2, #0
 8004652:	4d05      	ldr	r5, [pc, #20]	; (8004668 <_read_r+0x20>)
 8004654:	602a      	str	r2, [r5, #0]
 8004656:	461a      	mov	r2, r3
 8004658:	f7fc fe50 	bl	80012fc <_read>
 800465c:	1c43      	adds	r3, r0, #1
 800465e:	d102      	bne.n	8004666 <_read_r+0x1e>
 8004660:	682b      	ldr	r3, [r5, #0]
 8004662:	b103      	cbz	r3, 8004666 <_read_r+0x1e>
 8004664:	6023      	str	r3, [r4, #0]
 8004666:	bd38      	pop	{r3, r4, r5, pc}
 8004668:	2000040c 	.word	0x2000040c

0800466c <_write_r>:
 800466c:	b538      	push	{r3, r4, r5, lr}
 800466e:	4604      	mov	r4, r0
 8004670:	4608      	mov	r0, r1
 8004672:	4611      	mov	r1, r2
 8004674:	2200      	movs	r2, #0
 8004676:	4d05      	ldr	r5, [pc, #20]	; (800468c <_write_r+0x20>)
 8004678:	602a      	str	r2, [r5, #0]
 800467a:	461a      	mov	r2, r3
 800467c:	f7fb fd66 	bl	800014c <_write>
 8004680:	1c43      	adds	r3, r0, #1
 8004682:	d102      	bne.n	800468a <_write_r+0x1e>
 8004684:	682b      	ldr	r3, [r5, #0]
 8004686:	b103      	cbz	r3, 800468a <_write_r+0x1e>
 8004688:	6023      	str	r3, [r4, #0]
 800468a:	bd38      	pop	{r3, r4, r5, pc}
 800468c:	2000040c 	.word	0x2000040c

08004690 <__errno>:
 8004690:	4b01      	ldr	r3, [pc, #4]	; (8004698 <__errno+0x8>)
 8004692:	6818      	ldr	r0, [r3, #0]
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	20000150 	.word	0x20000150

0800469c <__libc_init_array>:
 800469c:	b570      	push	{r4, r5, r6, lr}
 800469e:	2600      	movs	r6, #0
 80046a0:	4d0c      	ldr	r5, [pc, #48]	; (80046d4 <__libc_init_array+0x38>)
 80046a2:	4c0d      	ldr	r4, [pc, #52]	; (80046d8 <__libc_init_array+0x3c>)
 80046a4:	1b64      	subs	r4, r4, r5
 80046a6:	10a4      	asrs	r4, r4, #2
 80046a8:	42a6      	cmp	r6, r4
 80046aa:	d109      	bne.n	80046c0 <__libc_init_array+0x24>
 80046ac:	f000 fa50 	bl	8004b50 <_init>
 80046b0:	2600      	movs	r6, #0
 80046b2:	4d0a      	ldr	r5, [pc, #40]	; (80046dc <__libc_init_array+0x40>)
 80046b4:	4c0a      	ldr	r4, [pc, #40]	; (80046e0 <__libc_init_array+0x44>)
 80046b6:	1b64      	subs	r4, r4, r5
 80046b8:	10a4      	asrs	r4, r4, #2
 80046ba:	42a6      	cmp	r6, r4
 80046bc:	d105      	bne.n	80046ca <__libc_init_array+0x2e>
 80046be:	bd70      	pop	{r4, r5, r6, pc}
 80046c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80046c4:	4798      	blx	r3
 80046c6:	3601      	adds	r6, #1
 80046c8:	e7ee      	b.n	80046a8 <__libc_init_array+0xc>
 80046ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ce:	4798      	blx	r3
 80046d0:	3601      	adds	r6, #1
 80046d2:	e7f2      	b.n	80046ba <__libc_init_array+0x1e>
 80046d4:	08004c6c 	.word	0x08004c6c
 80046d8:	08004c6c 	.word	0x08004c6c
 80046dc:	08004c6c 	.word	0x08004c6c
 80046e0:	08004c70 	.word	0x08004c70

080046e4 <__retarget_lock_init_recursive>:
 80046e4:	4770      	bx	lr

080046e6 <__retarget_lock_acquire_recursive>:
 80046e6:	4770      	bx	lr

080046e8 <__retarget_lock_release_recursive>:
 80046e8:	4770      	bx	lr
	...

080046ec <_free_r>:
 80046ec:	b538      	push	{r3, r4, r5, lr}
 80046ee:	4605      	mov	r5, r0
 80046f0:	2900      	cmp	r1, #0
 80046f2:	d040      	beq.n	8004776 <_free_r+0x8a>
 80046f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046f8:	1f0c      	subs	r4, r1, #4
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	bfb8      	it	lt
 80046fe:	18e4      	addlt	r4, r4, r3
 8004700:	f000 f8dc 	bl	80048bc <__malloc_lock>
 8004704:	4a1c      	ldr	r2, [pc, #112]	; (8004778 <_free_r+0x8c>)
 8004706:	6813      	ldr	r3, [r2, #0]
 8004708:	b933      	cbnz	r3, 8004718 <_free_r+0x2c>
 800470a:	6063      	str	r3, [r4, #4]
 800470c:	6014      	str	r4, [r2, #0]
 800470e:	4628      	mov	r0, r5
 8004710:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004714:	f000 b8d8 	b.w	80048c8 <__malloc_unlock>
 8004718:	42a3      	cmp	r3, r4
 800471a:	d908      	bls.n	800472e <_free_r+0x42>
 800471c:	6820      	ldr	r0, [r4, #0]
 800471e:	1821      	adds	r1, r4, r0
 8004720:	428b      	cmp	r3, r1
 8004722:	bf01      	itttt	eq
 8004724:	6819      	ldreq	r1, [r3, #0]
 8004726:	685b      	ldreq	r3, [r3, #4]
 8004728:	1809      	addeq	r1, r1, r0
 800472a:	6021      	streq	r1, [r4, #0]
 800472c:	e7ed      	b.n	800470a <_free_r+0x1e>
 800472e:	461a      	mov	r2, r3
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	b10b      	cbz	r3, 8004738 <_free_r+0x4c>
 8004734:	42a3      	cmp	r3, r4
 8004736:	d9fa      	bls.n	800472e <_free_r+0x42>
 8004738:	6811      	ldr	r1, [r2, #0]
 800473a:	1850      	adds	r0, r2, r1
 800473c:	42a0      	cmp	r0, r4
 800473e:	d10b      	bne.n	8004758 <_free_r+0x6c>
 8004740:	6820      	ldr	r0, [r4, #0]
 8004742:	4401      	add	r1, r0
 8004744:	1850      	adds	r0, r2, r1
 8004746:	4283      	cmp	r3, r0
 8004748:	6011      	str	r1, [r2, #0]
 800474a:	d1e0      	bne.n	800470e <_free_r+0x22>
 800474c:	6818      	ldr	r0, [r3, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	4408      	add	r0, r1
 8004752:	6010      	str	r0, [r2, #0]
 8004754:	6053      	str	r3, [r2, #4]
 8004756:	e7da      	b.n	800470e <_free_r+0x22>
 8004758:	d902      	bls.n	8004760 <_free_r+0x74>
 800475a:	230c      	movs	r3, #12
 800475c:	602b      	str	r3, [r5, #0]
 800475e:	e7d6      	b.n	800470e <_free_r+0x22>
 8004760:	6820      	ldr	r0, [r4, #0]
 8004762:	1821      	adds	r1, r4, r0
 8004764:	428b      	cmp	r3, r1
 8004766:	bf01      	itttt	eq
 8004768:	6819      	ldreq	r1, [r3, #0]
 800476a:	685b      	ldreq	r3, [r3, #4]
 800476c:	1809      	addeq	r1, r1, r0
 800476e:	6021      	streq	r1, [r4, #0]
 8004770:	6063      	str	r3, [r4, #4]
 8004772:	6054      	str	r4, [r2, #4]
 8004774:	e7cb      	b.n	800470e <_free_r+0x22>
 8004776:	bd38      	pop	{r3, r4, r5, pc}
 8004778:	20000414 	.word	0x20000414

0800477c <sbrk_aligned>:
 800477c:	b570      	push	{r4, r5, r6, lr}
 800477e:	4e0e      	ldr	r6, [pc, #56]	; (80047b8 <sbrk_aligned+0x3c>)
 8004780:	460c      	mov	r4, r1
 8004782:	6831      	ldr	r1, [r6, #0]
 8004784:	4605      	mov	r5, r0
 8004786:	b911      	cbnz	r1, 800478e <sbrk_aligned+0x12>
 8004788:	f000 f9d2 	bl	8004b30 <_sbrk_r>
 800478c:	6030      	str	r0, [r6, #0]
 800478e:	4621      	mov	r1, r4
 8004790:	4628      	mov	r0, r5
 8004792:	f000 f9cd 	bl	8004b30 <_sbrk_r>
 8004796:	1c43      	adds	r3, r0, #1
 8004798:	d00a      	beq.n	80047b0 <sbrk_aligned+0x34>
 800479a:	1cc4      	adds	r4, r0, #3
 800479c:	f024 0403 	bic.w	r4, r4, #3
 80047a0:	42a0      	cmp	r0, r4
 80047a2:	d007      	beq.n	80047b4 <sbrk_aligned+0x38>
 80047a4:	1a21      	subs	r1, r4, r0
 80047a6:	4628      	mov	r0, r5
 80047a8:	f000 f9c2 	bl	8004b30 <_sbrk_r>
 80047ac:	3001      	adds	r0, #1
 80047ae:	d101      	bne.n	80047b4 <sbrk_aligned+0x38>
 80047b0:	f04f 34ff 	mov.w	r4, #4294967295
 80047b4:	4620      	mov	r0, r4
 80047b6:	bd70      	pop	{r4, r5, r6, pc}
 80047b8:	20000418 	.word	0x20000418

080047bc <_malloc_r>:
 80047bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047c0:	1ccd      	adds	r5, r1, #3
 80047c2:	f025 0503 	bic.w	r5, r5, #3
 80047c6:	3508      	adds	r5, #8
 80047c8:	2d0c      	cmp	r5, #12
 80047ca:	bf38      	it	cc
 80047cc:	250c      	movcc	r5, #12
 80047ce:	2d00      	cmp	r5, #0
 80047d0:	4607      	mov	r7, r0
 80047d2:	db01      	blt.n	80047d8 <_malloc_r+0x1c>
 80047d4:	42a9      	cmp	r1, r5
 80047d6:	d905      	bls.n	80047e4 <_malloc_r+0x28>
 80047d8:	230c      	movs	r3, #12
 80047da:	2600      	movs	r6, #0
 80047dc:	603b      	str	r3, [r7, #0]
 80047de:	4630      	mov	r0, r6
 80047e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80048b8 <_malloc_r+0xfc>
 80047e8:	f000 f868 	bl	80048bc <__malloc_lock>
 80047ec:	f8d8 3000 	ldr.w	r3, [r8]
 80047f0:	461c      	mov	r4, r3
 80047f2:	bb5c      	cbnz	r4, 800484c <_malloc_r+0x90>
 80047f4:	4629      	mov	r1, r5
 80047f6:	4638      	mov	r0, r7
 80047f8:	f7ff ffc0 	bl	800477c <sbrk_aligned>
 80047fc:	1c43      	adds	r3, r0, #1
 80047fe:	4604      	mov	r4, r0
 8004800:	d155      	bne.n	80048ae <_malloc_r+0xf2>
 8004802:	f8d8 4000 	ldr.w	r4, [r8]
 8004806:	4626      	mov	r6, r4
 8004808:	2e00      	cmp	r6, #0
 800480a:	d145      	bne.n	8004898 <_malloc_r+0xdc>
 800480c:	2c00      	cmp	r4, #0
 800480e:	d048      	beq.n	80048a2 <_malloc_r+0xe6>
 8004810:	6823      	ldr	r3, [r4, #0]
 8004812:	4631      	mov	r1, r6
 8004814:	4638      	mov	r0, r7
 8004816:	eb04 0903 	add.w	r9, r4, r3
 800481a:	f000 f989 	bl	8004b30 <_sbrk_r>
 800481e:	4581      	cmp	r9, r0
 8004820:	d13f      	bne.n	80048a2 <_malloc_r+0xe6>
 8004822:	6821      	ldr	r1, [r4, #0]
 8004824:	4638      	mov	r0, r7
 8004826:	1a6d      	subs	r5, r5, r1
 8004828:	4629      	mov	r1, r5
 800482a:	f7ff ffa7 	bl	800477c <sbrk_aligned>
 800482e:	3001      	adds	r0, #1
 8004830:	d037      	beq.n	80048a2 <_malloc_r+0xe6>
 8004832:	6823      	ldr	r3, [r4, #0]
 8004834:	442b      	add	r3, r5
 8004836:	6023      	str	r3, [r4, #0]
 8004838:	f8d8 3000 	ldr.w	r3, [r8]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d038      	beq.n	80048b2 <_malloc_r+0xf6>
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	42a2      	cmp	r2, r4
 8004844:	d12b      	bne.n	800489e <_malloc_r+0xe2>
 8004846:	2200      	movs	r2, #0
 8004848:	605a      	str	r2, [r3, #4]
 800484a:	e00f      	b.n	800486c <_malloc_r+0xb0>
 800484c:	6822      	ldr	r2, [r4, #0]
 800484e:	1b52      	subs	r2, r2, r5
 8004850:	d41f      	bmi.n	8004892 <_malloc_r+0xd6>
 8004852:	2a0b      	cmp	r2, #11
 8004854:	d917      	bls.n	8004886 <_malloc_r+0xca>
 8004856:	1961      	adds	r1, r4, r5
 8004858:	42a3      	cmp	r3, r4
 800485a:	6025      	str	r5, [r4, #0]
 800485c:	bf18      	it	ne
 800485e:	6059      	strne	r1, [r3, #4]
 8004860:	6863      	ldr	r3, [r4, #4]
 8004862:	bf08      	it	eq
 8004864:	f8c8 1000 	streq.w	r1, [r8]
 8004868:	5162      	str	r2, [r4, r5]
 800486a:	604b      	str	r3, [r1, #4]
 800486c:	4638      	mov	r0, r7
 800486e:	f104 060b 	add.w	r6, r4, #11
 8004872:	f000 f829 	bl	80048c8 <__malloc_unlock>
 8004876:	f026 0607 	bic.w	r6, r6, #7
 800487a:	1d23      	adds	r3, r4, #4
 800487c:	1af2      	subs	r2, r6, r3
 800487e:	d0ae      	beq.n	80047de <_malloc_r+0x22>
 8004880:	1b9b      	subs	r3, r3, r6
 8004882:	50a3      	str	r3, [r4, r2]
 8004884:	e7ab      	b.n	80047de <_malloc_r+0x22>
 8004886:	42a3      	cmp	r3, r4
 8004888:	6862      	ldr	r2, [r4, #4]
 800488a:	d1dd      	bne.n	8004848 <_malloc_r+0x8c>
 800488c:	f8c8 2000 	str.w	r2, [r8]
 8004890:	e7ec      	b.n	800486c <_malloc_r+0xb0>
 8004892:	4623      	mov	r3, r4
 8004894:	6864      	ldr	r4, [r4, #4]
 8004896:	e7ac      	b.n	80047f2 <_malloc_r+0x36>
 8004898:	4634      	mov	r4, r6
 800489a:	6876      	ldr	r6, [r6, #4]
 800489c:	e7b4      	b.n	8004808 <_malloc_r+0x4c>
 800489e:	4613      	mov	r3, r2
 80048a0:	e7cc      	b.n	800483c <_malloc_r+0x80>
 80048a2:	230c      	movs	r3, #12
 80048a4:	4638      	mov	r0, r7
 80048a6:	603b      	str	r3, [r7, #0]
 80048a8:	f000 f80e 	bl	80048c8 <__malloc_unlock>
 80048ac:	e797      	b.n	80047de <_malloc_r+0x22>
 80048ae:	6025      	str	r5, [r4, #0]
 80048b0:	e7dc      	b.n	800486c <_malloc_r+0xb0>
 80048b2:	605b      	str	r3, [r3, #4]
 80048b4:	deff      	udf	#255	; 0xff
 80048b6:	bf00      	nop
 80048b8:	20000414 	.word	0x20000414

080048bc <__malloc_lock>:
 80048bc:	4801      	ldr	r0, [pc, #4]	; (80048c4 <__malloc_lock+0x8>)
 80048be:	f7ff bf12 	b.w	80046e6 <__retarget_lock_acquire_recursive>
 80048c2:	bf00      	nop
 80048c4:	20000410 	.word	0x20000410

080048c8 <__malloc_unlock>:
 80048c8:	4801      	ldr	r0, [pc, #4]	; (80048d0 <__malloc_unlock+0x8>)
 80048ca:	f7ff bf0d 	b.w	80046e8 <__retarget_lock_release_recursive>
 80048ce:	bf00      	nop
 80048d0:	20000410 	.word	0x20000410

080048d4 <__sflush_r>:
 80048d4:	898a      	ldrh	r2, [r1, #12]
 80048d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d8:	4605      	mov	r5, r0
 80048da:	0710      	lsls	r0, r2, #28
 80048dc:	460c      	mov	r4, r1
 80048de:	d457      	bmi.n	8004990 <__sflush_r+0xbc>
 80048e0:	684b      	ldr	r3, [r1, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	dc04      	bgt.n	80048f0 <__sflush_r+0x1c>
 80048e6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	dc01      	bgt.n	80048f0 <__sflush_r+0x1c>
 80048ec:	2000      	movs	r0, #0
 80048ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048f2:	2e00      	cmp	r6, #0
 80048f4:	d0fa      	beq.n	80048ec <__sflush_r+0x18>
 80048f6:	2300      	movs	r3, #0
 80048f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048fc:	682f      	ldr	r7, [r5, #0]
 80048fe:	6a21      	ldr	r1, [r4, #32]
 8004900:	602b      	str	r3, [r5, #0]
 8004902:	d032      	beq.n	800496a <__sflush_r+0x96>
 8004904:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004906:	89a3      	ldrh	r3, [r4, #12]
 8004908:	075a      	lsls	r2, r3, #29
 800490a:	d505      	bpl.n	8004918 <__sflush_r+0x44>
 800490c:	6863      	ldr	r3, [r4, #4]
 800490e:	1ac0      	subs	r0, r0, r3
 8004910:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004912:	b10b      	cbz	r3, 8004918 <__sflush_r+0x44>
 8004914:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004916:	1ac0      	subs	r0, r0, r3
 8004918:	2300      	movs	r3, #0
 800491a:	4602      	mov	r2, r0
 800491c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800491e:	4628      	mov	r0, r5
 8004920:	6a21      	ldr	r1, [r4, #32]
 8004922:	47b0      	blx	r6
 8004924:	1c43      	adds	r3, r0, #1
 8004926:	89a3      	ldrh	r3, [r4, #12]
 8004928:	d106      	bne.n	8004938 <__sflush_r+0x64>
 800492a:	6829      	ldr	r1, [r5, #0]
 800492c:	291d      	cmp	r1, #29
 800492e:	d82b      	bhi.n	8004988 <__sflush_r+0xb4>
 8004930:	4a28      	ldr	r2, [pc, #160]	; (80049d4 <__sflush_r+0x100>)
 8004932:	410a      	asrs	r2, r1
 8004934:	07d6      	lsls	r6, r2, #31
 8004936:	d427      	bmi.n	8004988 <__sflush_r+0xb4>
 8004938:	2200      	movs	r2, #0
 800493a:	6062      	str	r2, [r4, #4]
 800493c:	6922      	ldr	r2, [r4, #16]
 800493e:	04d9      	lsls	r1, r3, #19
 8004940:	6022      	str	r2, [r4, #0]
 8004942:	d504      	bpl.n	800494e <__sflush_r+0x7a>
 8004944:	1c42      	adds	r2, r0, #1
 8004946:	d101      	bne.n	800494c <__sflush_r+0x78>
 8004948:	682b      	ldr	r3, [r5, #0]
 800494a:	b903      	cbnz	r3, 800494e <__sflush_r+0x7a>
 800494c:	6560      	str	r0, [r4, #84]	; 0x54
 800494e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004950:	602f      	str	r7, [r5, #0]
 8004952:	2900      	cmp	r1, #0
 8004954:	d0ca      	beq.n	80048ec <__sflush_r+0x18>
 8004956:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800495a:	4299      	cmp	r1, r3
 800495c:	d002      	beq.n	8004964 <__sflush_r+0x90>
 800495e:	4628      	mov	r0, r5
 8004960:	f7ff fec4 	bl	80046ec <_free_r>
 8004964:	2000      	movs	r0, #0
 8004966:	6360      	str	r0, [r4, #52]	; 0x34
 8004968:	e7c1      	b.n	80048ee <__sflush_r+0x1a>
 800496a:	2301      	movs	r3, #1
 800496c:	4628      	mov	r0, r5
 800496e:	47b0      	blx	r6
 8004970:	1c41      	adds	r1, r0, #1
 8004972:	d1c8      	bne.n	8004906 <__sflush_r+0x32>
 8004974:	682b      	ldr	r3, [r5, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0c5      	beq.n	8004906 <__sflush_r+0x32>
 800497a:	2b1d      	cmp	r3, #29
 800497c:	d001      	beq.n	8004982 <__sflush_r+0xae>
 800497e:	2b16      	cmp	r3, #22
 8004980:	d101      	bne.n	8004986 <__sflush_r+0xb2>
 8004982:	602f      	str	r7, [r5, #0]
 8004984:	e7b2      	b.n	80048ec <__sflush_r+0x18>
 8004986:	89a3      	ldrh	r3, [r4, #12]
 8004988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800498c:	81a3      	strh	r3, [r4, #12]
 800498e:	e7ae      	b.n	80048ee <__sflush_r+0x1a>
 8004990:	690f      	ldr	r7, [r1, #16]
 8004992:	2f00      	cmp	r7, #0
 8004994:	d0aa      	beq.n	80048ec <__sflush_r+0x18>
 8004996:	0793      	lsls	r3, r2, #30
 8004998:	bf18      	it	ne
 800499a:	2300      	movne	r3, #0
 800499c:	680e      	ldr	r6, [r1, #0]
 800499e:	bf08      	it	eq
 80049a0:	694b      	ldreq	r3, [r1, #20]
 80049a2:	1bf6      	subs	r6, r6, r7
 80049a4:	600f      	str	r7, [r1, #0]
 80049a6:	608b      	str	r3, [r1, #8]
 80049a8:	2e00      	cmp	r6, #0
 80049aa:	dd9f      	ble.n	80048ec <__sflush_r+0x18>
 80049ac:	4633      	mov	r3, r6
 80049ae:	463a      	mov	r2, r7
 80049b0:	4628      	mov	r0, r5
 80049b2:	6a21      	ldr	r1, [r4, #32]
 80049b4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80049b8:	47e0      	blx	ip
 80049ba:	2800      	cmp	r0, #0
 80049bc:	dc06      	bgt.n	80049cc <__sflush_r+0xf8>
 80049be:	89a3      	ldrh	r3, [r4, #12]
 80049c0:	f04f 30ff 	mov.w	r0, #4294967295
 80049c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049c8:	81a3      	strh	r3, [r4, #12]
 80049ca:	e790      	b.n	80048ee <__sflush_r+0x1a>
 80049cc:	4407      	add	r7, r0
 80049ce:	1a36      	subs	r6, r6, r0
 80049d0:	e7ea      	b.n	80049a8 <__sflush_r+0xd4>
 80049d2:	bf00      	nop
 80049d4:	dfbffffe 	.word	0xdfbffffe

080049d8 <_fflush_r>:
 80049d8:	b538      	push	{r3, r4, r5, lr}
 80049da:	690b      	ldr	r3, [r1, #16]
 80049dc:	4605      	mov	r5, r0
 80049de:	460c      	mov	r4, r1
 80049e0:	b913      	cbnz	r3, 80049e8 <_fflush_r+0x10>
 80049e2:	2500      	movs	r5, #0
 80049e4:	4628      	mov	r0, r5
 80049e6:	bd38      	pop	{r3, r4, r5, pc}
 80049e8:	b118      	cbz	r0, 80049f2 <_fflush_r+0x1a>
 80049ea:	6a03      	ldr	r3, [r0, #32]
 80049ec:	b90b      	cbnz	r3, 80049f2 <_fflush_r+0x1a>
 80049ee:	f7ff fc85 	bl	80042fc <__sinit>
 80049f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d0f3      	beq.n	80049e2 <_fflush_r+0xa>
 80049fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049fc:	07d0      	lsls	r0, r2, #31
 80049fe:	d404      	bmi.n	8004a0a <_fflush_r+0x32>
 8004a00:	0599      	lsls	r1, r3, #22
 8004a02:	d402      	bmi.n	8004a0a <_fflush_r+0x32>
 8004a04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a06:	f7ff fe6e 	bl	80046e6 <__retarget_lock_acquire_recursive>
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	4621      	mov	r1, r4
 8004a0e:	f7ff ff61 	bl	80048d4 <__sflush_r>
 8004a12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a14:	4605      	mov	r5, r0
 8004a16:	07da      	lsls	r2, r3, #31
 8004a18:	d4e4      	bmi.n	80049e4 <_fflush_r+0xc>
 8004a1a:	89a3      	ldrh	r3, [r4, #12]
 8004a1c:	059b      	lsls	r3, r3, #22
 8004a1e:	d4e1      	bmi.n	80049e4 <_fflush_r+0xc>
 8004a20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a22:	f7ff fe61 	bl	80046e8 <__retarget_lock_release_recursive>
 8004a26:	e7dd      	b.n	80049e4 <_fflush_r+0xc>

08004a28 <__swhatbuf_r>:
 8004a28:	b570      	push	{r4, r5, r6, lr}
 8004a2a:	460c      	mov	r4, r1
 8004a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a30:	4615      	mov	r5, r2
 8004a32:	2900      	cmp	r1, #0
 8004a34:	461e      	mov	r6, r3
 8004a36:	b096      	sub	sp, #88	; 0x58
 8004a38:	da0c      	bge.n	8004a54 <__swhatbuf_r+0x2c>
 8004a3a:	89a3      	ldrh	r3, [r4, #12]
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004a42:	bf0c      	ite	eq
 8004a44:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004a48:	2340      	movne	r3, #64	; 0x40
 8004a4a:	2000      	movs	r0, #0
 8004a4c:	6031      	str	r1, [r6, #0]
 8004a4e:	602b      	str	r3, [r5, #0]
 8004a50:	b016      	add	sp, #88	; 0x58
 8004a52:	bd70      	pop	{r4, r5, r6, pc}
 8004a54:	466a      	mov	r2, sp
 8004a56:	f000 f849 	bl	8004aec <_fstat_r>
 8004a5a:	2800      	cmp	r0, #0
 8004a5c:	dbed      	blt.n	8004a3a <__swhatbuf_r+0x12>
 8004a5e:	9901      	ldr	r1, [sp, #4]
 8004a60:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004a64:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004a68:	4259      	negs	r1, r3
 8004a6a:	4159      	adcs	r1, r3
 8004a6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a70:	e7eb      	b.n	8004a4a <__swhatbuf_r+0x22>

08004a72 <__smakebuf_r>:
 8004a72:	898b      	ldrh	r3, [r1, #12]
 8004a74:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a76:	079d      	lsls	r5, r3, #30
 8004a78:	4606      	mov	r6, r0
 8004a7a:	460c      	mov	r4, r1
 8004a7c:	d507      	bpl.n	8004a8e <__smakebuf_r+0x1c>
 8004a7e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004a82:	6023      	str	r3, [r4, #0]
 8004a84:	6123      	str	r3, [r4, #16]
 8004a86:	2301      	movs	r3, #1
 8004a88:	6163      	str	r3, [r4, #20]
 8004a8a:	b002      	add	sp, #8
 8004a8c:	bd70      	pop	{r4, r5, r6, pc}
 8004a8e:	466a      	mov	r2, sp
 8004a90:	ab01      	add	r3, sp, #4
 8004a92:	f7ff ffc9 	bl	8004a28 <__swhatbuf_r>
 8004a96:	9900      	ldr	r1, [sp, #0]
 8004a98:	4605      	mov	r5, r0
 8004a9a:	4630      	mov	r0, r6
 8004a9c:	f7ff fe8e 	bl	80047bc <_malloc_r>
 8004aa0:	b948      	cbnz	r0, 8004ab6 <__smakebuf_r+0x44>
 8004aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004aa6:	059a      	lsls	r2, r3, #22
 8004aa8:	d4ef      	bmi.n	8004a8a <__smakebuf_r+0x18>
 8004aaa:	f023 0303 	bic.w	r3, r3, #3
 8004aae:	f043 0302 	orr.w	r3, r3, #2
 8004ab2:	81a3      	strh	r3, [r4, #12]
 8004ab4:	e7e3      	b.n	8004a7e <__smakebuf_r+0xc>
 8004ab6:	89a3      	ldrh	r3, [r4, #12]
 8004ab8:	6020      	str	r0, [r4, #0]
 8004aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004abe:	81a3      	strh	r3, [r4, #12]
 8004ac0:	9b00      	ldr	r3, [sp, #0]
 8004ac2:	6120      	str	r0, [r4, #16]
 8004ac4:	6163      	str	r3, [r4, #20]
 8004ac6:	9b01      	ldr	r3, [sp, #4]
 8004ac8:	b15b      	cbz	r3, 8004ae2 <__smakebuf_r+0x70>
 8004aca:	4630      	mov	r0, r6
 8004acc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ad0:	f000 f81e 	bl	8004b10 <_isatty_r>
 8004ad4:	b128      	cbz	r0, 8004ae2 <__smakebuf_r+0x70>
 8004ad6:	89a3      	ldrh	r3, [r4, #12]
 8004ad8:	f023 0303 	bic.w	r3, r3, #3
 8004adc:	f043 0301 	orr.w	r3, r3, #1
 8004ae0:	81a3      	strh	r3, [r4, #12]
 8004ae2:	89a3      	ldrh	r3, [r4, #12]
 8004ae4:	431d      	orrs	r5, r3
 8004ae6:	81a5      	strh	r5, [r4, #12]
 8004ae8:	e7cf      	b.n	8004a8a <__smakebuf_r+0x18>
	...

08004aec <_fstat_r>:
 8004aec:	b538      	push	{r3, r4, r5, lr}
 8004aee:	2300      	movs	r3, #0
 8004af0:	4d06      	ldr	r5, [pc, #24]	; (8004b0c <_fstat_r+0x20>)
 8004af2:	4604      	mov	r4, r0
 8004af4:	4608      	mov	r0, r1
 8004af6:	4611      	mov	r1, r2
 8004af8:	602b      	str	r3, [r5, #0]
 8004afa:	f7fc fc27 	bl	800134c <_fstat>
 8004afe:	1c43      	adds	r3, r0, #1
 8004b00:	d102      	bne.n	8004b08 <_fstat_r+0x1c>
 8004b02:	682b      	ldr	r3, [r5, #0]
 8004b04:	b103      	cbz	r3, 8004b08 <_fstat_r+0x1c>
 8004b06:	6023      	str	r3, [r4, #0]
 8004b08:	bd38      	pop	{r3, r4, r5, pc}
 8004b0a:	bf00      	nop
 8004b0c:	2000040c 	.word	0x2000040c

08004b10 <_isatty_r>:
 8004b10:	b538      	push	{r3, r4, r5, lr}
 8004b12:	2300      	movs	r3, #0
 8004b14:	4d05      	ldr	r5, [pc, #20]	; (8004b2c <_isatty_r+0x1c>)
 8004b16:	4604      	mov	r4, r0
 8004b18:	4608      	mov	r0, r1
 8004b1a:	602b      	str	r3, [r5, #0]
 8004b1c:	f7fc fc25 	bl	800136a <_isatty>
 8004b20:	1c43      	adds	r3, r0, #1
 8004b22:	d102      	bne.n	8004b2a <_isatty_r+0x1a>
 8004b24:	682b      	ldr	r3, [r5, #0]
 8004b26:	b103      	cbz	r3, 8004b2a <_isatty_r+0x1a>
 8004b28:	6023      	str	r3, [r4, #0]
 8004b2a:	bd38      	pop	{r3, r4, r5, pc}
 8004b2c:	2000040c 	.word	0x2000040c

08004b30 <_sbrk_r>:
 8004b30:	b538      	push	{r3, r4, r5, lr}
 8004b32:	2300      	movs	r3, #0
 8004b34:	4d05      	ldr	r5, [pc, #20]	; (8004b4c <_sbrk_r+0x1c>)
 8004b36:	4604      	mov	r4, r0
 8004b38:	4608      	mov	r0, r1
 8004b3a:	602b      	str	r3, [r5, #0]
 8004b3c:	f7fc fc2c 	bl	8001398 <_sbrk>
 8004b40:	1c43      	adds	r3, r0, #1
 8004b42:	d102      	bne.n	8004b4a <_sbrk_r+0x1a>
 8004b44:	682b      	ldr	r3, [r5, #0]
 8004b46:	b103      	cbz	r3, 8004b4a <_sbrk_r+0x1a>
 8004b48:	6023      	str	r3, [r4, #0]
 8004b4a:	bd38      	pop	{r3, r4, r5, pc}
 8004b4c:	2000040c 	.word	0x2000040c

08004b50 <_init>:
 8004b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b52:	bf00      	nop
 8004b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b56:	bc08      	pop	{r3}
 8004b58:	469e      	mov	lr, r3
 8004b5a:	4770      	bx	lr

08004b5c <_fini>:
 8004b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b5e:	bf00      	nop
 8004b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b62:	bc08      	pop	{r3}
 8004b64:	469e      	mov	lr, r3
 8004b66:	4770      	bx	lr
